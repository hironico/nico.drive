{"version":3,"sources":["logo.svg","AppSettings.js","components/Folder.js","components/Image.js","components/RegularFile.js","components/RatingPane.js","components/FileDetailsPane.js","components/welcome-page/WelcomePage.js","components/DavExplorerPane.js","components/LoginDialog.js","App.js","reportWebVitals.js","index.js"],"names":["DavConfigurationContext","AuthType","Basic","React","createContext","connectionValid","DavConfigurationProvider","setDavClient","client","setState","davClient","showConnectionDialog","setConnectionValid","disconnect","setShowConnectionDialog","showConDialog","console","log","getBasePath","state","davWebContext","homeDirectory","getClientUrl","davBaseUrl","getThumbApiUrl","getExifApiUrl","getMetadataApiUrl","isImageFile","filename","startsWith","index","lastIndexOf","extention","toUpperCase","substring","supportedFormats","indexOf","render","Provider","value","props","children","authType","username","password","Component","Folder","Card","elevation","backgroundColor","width","height","margin","display","justifyContent","alignItems","flexDirection","Link","href","onClick","evt","navigate","fileItem","basename","Pane","style","marginTop","background","icon","FolderOpenIcon","size","color","alignItem","Text","overflow","maxWidth","maxHeight","Image","componentDidMount","thumb","generateThumb","req","that","fetch","context","method","body","JSON","stringify","headers","then","res","blob","reader","FileReader","readAsDataURL","onloadend","base64data","result","prev","catch","err","showDetails","styleThumb","backgroundImage","backgroundPosition","backgroundSize","InfoSignIcon","getFileDownloadLink","target","DownloadIcon","contextType","RegularFile","DocumentIcon","RatingPane","stars","rating","maxRating","lightedStar","StarIcon","push","unlightedStar","StarEmptyIcon","FileDetailsPane","loadImageInformation","loadMetaDataInformation","getDownloadLink","metaUrl","exifRequest","json","imageData","metadataRequest","tags","metadata","renderFileItemSize","unite","taille","toFixed","renderImageTabs","isImage","padding","Tablist","marginBottom","flexBasis","marginRight","tabs","filter","tab","map","Tab","id","onSelect","selectedIndex","isSelected","aria-controls","panelTab","renderFileDetails","renderImageDetails","renderMetadataDetails","role","aria-labelledby","aria-hidden","Table","Head","TextHeaderCell","Body","Row","TextCell","lastmod","image","rows","Object","keys","key","renderTags","split","placeholder","length","TagInput","inputProps","values","flexGrow","disabled","getRating","Number","parseInt","downloadIcon","zIndex","flexShrink","borderBottom","Heading","Button","appearance","intent","is","iconBefore","marginLeft","gridTemplateColumns","WelcomePage","showLoginDialog","className","alert","fontSize","LogInIcon","src","alt","DavExplorerPane","componentDidUpdate","currentDirectory","getDirectoryContents","a","dirs","files","directoryItems","item","type","directories","folderName","separator","endsWith","newDir","navigateAbsolute","absolutePath","toggleFileDetails","modified","detailedFileItem","renderFolders","directory","renderFiles","file","renderBreadCrumb","path","chevronIcon","ChevronRightIcon","homeIcon","HomeIcon","currentDirs","navDirs","dir","fullPath","join","renderAvatarMenu","Popover","position","Position","BOTTOM_LEFT","content","Menu","Group","Item","Badge","Divider","LogOutIcon","Avatar","name","renderRootPane","breadCrumb","justifySelf","flexWrap","SideSheet","isShown","onCloseComplete","LoginDialog","testConnection","clientOptions","createClient","url","error","errorMessage","isLoading","onConfirm","renderDialog","Dialog","title","isConfirmLoading","close","hasFooter","TextInputField","onChange","e","label","Paragraph","App","clearfix","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2249ff54.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from \"react\";\nimport { AuthType } from \"webdav\";\n\nconst defaultValue =  {\n    davBaseUrl: 'https://localhost:8080',\n    davWebContext: '/photo',\n    authType: AuthType.Basic,\n    username: 'hironico',\n    password: 'hironico',\n    davClient: null,\n    connectionValid: false,\n    showConnectionDialog: false,\n    homeDirectory: '/blog',\n    currentDirectory: '/',\n    supportedFormats: ['JPEG', 'JPG', 'PNG', 'WEBP', 'AVIF', 'TIFF', 'GIF', 'SVG'],\n    setDavClient: (client) =>  { },\n    setConnectionValid:  () =>  { },\n    setShowConnectionDialog: (showConDlg) => { },\n    getClientUrl:  () =>  { },\n    getThumbApiUrl:  () =>  { },\n    getExifApiUrl:  () =>  { },\n    getMetadataApiUrl:  () =>  { },\n    isImageFile:  () =>  { },\n    setCurrentDirectory: () => { },\n    disconnect: () => { }\n}\n\n\nconst DavConfigurationContext = React.createContext({connectionValid: false});\n\nclass DavConfigurationProvider extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            davBaseUrl: 'https://localhost:8080',\n            davWebContext: '/photo',\n            authType: AuthType.Basic,\n            username: 'hironico',\n            password: 'hironico',\n            davClient: null,\n            connectionValid: false,\n            showConnectionDialog: false,\n            homeDirectory: '/blog',\n            supportedFormats: ['JPEG', 'JPG', 'PNG', 'WEBP', 'AVIF', 'TIFF', 'GIF', 'SVG'],\n            setDavClient: this.setDavClient,\n            setConnectionValid: this.setConnectionValid,\n            setShowConnectionDialog: this.setShowConnectionDialog,\n            getClientUrl: this.getClientUrl,\n            getThumbApiUrl: this.getThumbApiUrl,\n            getExifApiUrl: this.getExifApiUrl,\n            getMetadataApiUrl: this.getMetadataApiUrl,\n            isImageFile: this.isImageFile,\n            getBasePath: this.getBasePath,\n            disconnect: this.disconnect\n        }\n    }\n\n    setDavClient = (client) => {\n        this.setState({\n            davClient: client, \n            connectionValid: client ? true : false,\n            showConnectionDialog: client ? false : true\n        });\n    }\n\n    setConnectionValid = (connectionValid) => {\n        this.setState({\n            connectionValid: connectionValid\n        });\n    }\n\n    disconnect = () => {\n        this.setState({\n            connectionValid: false,\n            davClient: null\n        });\n    }\n\n    setShowConnectionDialog = (showConDialog) => {\n        console.log('Must set showConnectionDialog to : ' + showConDialog);\n        this.setState({\n            showConnectionDialog: showConDialog\n        });\n    }\n\n    getBasePath = () => {\n        return `${this.state.davWebContext}${this.state.homeDirectory}`;\n    }\n\n    getClientUrl = () => {\n        return `${this.state.davBaseUrl}${this.state.davWebContext}`;\n    }\n\n    getThumbApiUrl = () => {\n        return `${this.state.davBaseUrl}/thumb`;\n    }\n\n    getExifApiUrl = () => {\n        return `${this.state.davBaseUrl}/meta/exif`;\n    }\n\n    getMetadataApiUrl = () => {\n        return `${this.state.davBaseUrl}/meta/xmp`;\n    }\n\n    isImageFile = (filename) => {\n        if (typeof filename === 'undefined' || filename === null) {\n            return false;\n        }\n\n        if (filename.startsWith('.')) {\n            return false;\n        }\n\n        const index = filename.lastIndexOf('.');\n        if (index < 0) {\n            return false;\n        }\n\n        const extention = filename.toUpperCase().substring(index + 1);\n\n        const formatIndex = this.state.supportedFormats.indexOf(extention);\n        return formatIndex !== -1;\n    }\n\n    render = () => {\n        return <DavConfigurationContext.Provider value={this.state}>{this.props.children}</DavConfigurationContext.Provider>\n    }\n}\n\nexport { DavConfigurationContext, DavConfigurationProvider }\n","\nimport { Card, Icon, Text, Pane, FolderOpenIcon, Link } from 'evergreen-ui';\nimport { Component } from 'react';\n\nexport default class Folder extends Component {\n\n    render = () => {\n        let styleThumb = {\n            width: '200px',\n            height: '200px',\n            marginTop: '-15px',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center'\n        }\n\n        return (\n            <Card\n                elevation={2}\n                backgroundColor=\"white\"\n                width={200}\n                height={240}\n                margin={24}\n                display=\"flex\"\n                justifyContent=\"center\"\n                alignItems=\"center\"\n                flexDirection=\"column\"\n            >   \n                <Link href=\"#\" onClick={(evt) => this.props.navigate(this.props.fileItem.basename)}>             \n                    <Pane style={styleThumb} background=\"tint2\">\n                        <Icon icon={FolderOpenIcon} size={48} color=\"#F7D154\" />\n                    </Pane>\n                    <Pane display=\"inline-flex\" alignItem=\"center\" justifyContent=\"center\" style={{width: '190px', height: '18px', margin: '5px'}}>\n                        <FolderOpenIcon color=\"#F7D154\"/>\n                        <Text style={{overflow: 'hidden', maxWidth: '155px', maxHeight: '24px'}}>{this.props.fileItem.basename}</Text>                        \n                    </Pane>                    \n                </Link>\n            </Card>\n        );\n    }\n}","\nimport { Card, Icon, Link, Pane, Text, InfoSignIcon, DownloadIcon } from 'evergreen-ui';\nimport { Component } from 'react';\n\nimport { DavConfigurationContext } from '../AppSettings';\n\nexport default class Image extends Component {\n    static contextType = DavConfigurationContext;\n\n    constructor() {\n        super();\n        this.state = {\n            thumb: null\n        }\n    }\n\n    componentDidMount = () => {\n        this.setState({\n            thumb: null\n        }, () => this.generateThumb());\n    }\n\n    generateThumb = () => {\n        const req = {\n            \"filename\": this.props.fileItem.filename\n        }\n\n        const that = this;\n        fetch(this.context.getThumbApiUrl(), { \n            method: 'POST',\n            body: JSON.stringify(req),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n        .then(res => res.blob())\n        .then(res => {\n            var reader = new FileReader();\n            reader.readAsDataURL(res);\n            reader.onloadend = function() {\n                var base64data = reader.result;\n\n                // put that into state\n                that.setState(prev => {\n                    return {\n                        thumb: base64data\n                    }\n                });   \n            }                   \n        })\n        .catch(err => console.log(`Could not generate thumb for file ${this.props.fileItem.filename}\\nReason: ${err}`));\n    }\n\n    showDetails = () => {\n        this.props.showDetails(this.props.fileItem);\n    }\n\n    render = () => {\n        let styleThumb = {};\n        if (this.state.thumb !== null) {\n            const imgUrl = 'url(' + this.state.thumb + ')';\n            styleThumb = {\n                backgroundImage: imgUrl,\n                backgroundPosition: 'center',\n                backgroundSize: 'cover',\n                width: '200px',\n                height: '200px',\n                marginTop: '-15px'\n            }        \n        }        \n\n        return (\n            <Card\n                elevation={2}\n                backgroundColor=\"white\"\n                width={200}\n                height={240}\n                margin={24}\n                display=\"flex\"\n                justifyContent=\"center\"\n                alignItems=\"center\"\n                flexDirection=\"column\"\n            > \n                <div style={styleThumb}>&nbsp;</div>\n                <Pane display=\"inline-flex\" alignItem=\"center\" justifyContent=\"space-between\" style={{width: '190px', height: '18px', margin: '5px'}}>\n                    <Link href=\"#\" onClick={(evt) => {this.showDetails()}}><Icon icon={InfoSignIcon} color=\"info\"/></Link>\n                    <Text style={{overflow: 'hidden', maxWidth: '155px', maxHeight: '24px'}}>{this.props.fileItem.basename}</Text>\n                    <Link href={this.context.davClient.getFileDownloadLink(this.props.fileItem.filename)} target=\"_blank\"><DownloadIcon color=\"success\"/></Link>\n                </Pane>\n            </Card>\n        );\n    }\n}","\nimport { Card, Icon, Pane, DocumentIcon, Link, Text, InfoSignIcon, DownloadIcon } from 'evergreen-ui';\nimport { Component } from 'react';\nimport { DavConfigurationContext } from '../AppSettings';\n\nexport default class RegularFile extends Component {\n    static contextType = DavConfigurationContext;\n\n    showDetails = () => {\n        this.props.showDetails(this.props.fileItem);\n    }\n\n    render = () => {\n        let styleThumb = {\n            width: '200px',\n            height: '200px',\n            marginTop: '-15px',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center'\n        }\n\n        return (\n            <Card\n                elevation={2}\n                backgroundColor=\"white\"\n                width={200}\n                height={240}\n                margin={24}\n                display=\"flex\"\n                justifyContent=\"center\"\n                alignItems=\"center\"\n                flexDirection=\"column\"\n            >                \n                <Pane style={styleThumb} background=\"tint2\">\n                    <Icon icon={DocumentIcon} size={48} color=\"success\" />\n                </Pane>  \n\n                <Pane display=\"inline-flex\" alignItem=\"center\" justifyContent=\"space-between\" style={{width: '190px', height: '18px', margin: '5px'}}>\n                    <Link href=\"#\" onClick={(evt) => {this.showDetails()}}><Icon icon={InfoSignIcon} color=\"info\"/></Link>\n                    <Text style={{overflow: 'hidden', maxWidth: '155px', maxHeight: '24px'}}>{this.props.fileItem.basename}</Text>\n                    <Link href={this.context.davClient.getFileDownloadLink(this.props.fileItem.filename)} target=\"_blank\"><DownloadIcon color=\"success\"/></Link>\n                </Pane>\n            </Card>\n        );\n    }\n}","import { Component } from 'react';\nimport { Pane, StarIcon, StarEmptyIcon } from 'evergreen-ui';\n\nexport default class RatingPane extends Component {\n\n    render = () => {\n        let stars = [];\n\n        let rating = this.props.rating ? this.props.rating : 0;\n        let maxRating = this.props.maxRating ? this.props.maxRating : 5;\n        if (maxRating < rating) {\n            maxRating = rating;\n        }\n\n        let size = this.props.size ? this.props.size : 24;\n        \n        for(let index = 0; index < rating; index++) {\n            const lightedStar = <StarIcon key={index} color=\"#FBE6A2\" size={size}/>\n            stars.push(lightedStar);\n        }\n\n        for(let index = rating; index < maxRating; index++) {\n            const unlightedStar = <StarEmptyIcon key={index} color=\"#C7CED4\" size={size}/>\n            stars.push(unlightedStar);\n        }\n\n        return <Pane display=\"inline-fex\" alignItems=\"center\">\n            {stars}\n        </Pane>\n    }\n}","import { Button, Heading, InfoSignIcon, Pane, Table, DownloadIcon, Tablist, Tab, TagInput } from 'evergreen-ui';\nimport { Fragment, Component } from 'react';\n\nimport RatingPane from './RatingPane';\n\nimport { DavConfigurationContext } from '../AppSettings';\n\nexport default class FileDetailsPane extends Component {\n    static contextType = DavConfigurationContext;\n\n    constructor() {\n        super();\n\n        this.state = {\n            imageData: [],\n            selectedIndex: 0,\n            tabs: ['Information', 'Image', 'Metadata']\n        }\n    }\n\n    componentDidMount = () => {\n        this.loadImageInformation();\n        this.loadMetaDataInformation();\n    }\n\n    getDownloadLink = () => {        \n        if (!this.context.connectionValid) {\n            // console.log('davClient is undefined in context. Cannot download file.');\n            return;\n        }\n\n        return this.context.davClient.getFileDownloadLink(this.props.fileItem.filename);\n    }\n\n    loadImageInformation = () => {\n        const metaUrl = this.context.getExifApiUrl();\n\n        const exifRequest = {\n            \"filename\": this.props.fileItem.filename\n        }\n\n        fetch(metaUrl, {\n            method: 'POST',\n            body: JSON.stringify(exifRequest),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(res => res.json())\n            .then(res => {\n                console.log('Received exif for this file: ' + JSON.stringify(res));\n                this.setState({\n                    imageData: res\n                });\n            }).catch(err => {\n                console.log('Error while reading exif data: ' + err);\n            });\n    }\n\n\n    loadMetaDataInformation = () => {\n        const metaUrl = this.context.getMetadataApiUrl();\n\n        const metadataRequest = {\n            \"filename\": this.props.fileItem.filename,\n            \"raw\": false\n        }\n\n        fetch(metaUrl, {\n            method: 'POST',\n            body: JSON.stringify(metadataRequest),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(res => res.json())\n            .then(res => {\n                console.log('Received metadata for this file: ' + JSON.stringify(res));\n\n                console.log('Tags are: ' + res.tags);\n\n                this.setState({\n                    metadata: res\n                });\n            }).catch(err => {\n                console.log('Error while reading metadata: ' + err);\n            });\n    }\n\n    renderFileItemSize = () => {\n        let unite = 'bytes';\n        let taille = this.props.fileItem.size;\n        if (taille > 1024) {\n            taille = (taille / 1024).toFixed(2);\n            unite = 'KB';\n        }\n        if (taille > 1024) {\n            taille = (taille / 1024).toFixed(2);\n            unite = 'MB';\n        }\n        if (taille > 1024) {\n            taille = (taille / 1024).toFixed(2);\n            unite = 'GB';\n        }\n\n        return <span>{taille}&nbsp;{unite}</span>\n    }\n\n    renderImageTabs = () => {\n        const isImage = this.context.isImageFile(this.props.fileItem.basename);\n        return <Pane padding={15}>\n            <Tablist marginBottom={16} flexBasis={240} marginRight={24}>\n                {this.state.tabs.filter((tab, index) => {\n                    return index > 0 ? isImage : true;\n                })\n                    .map((tab, index) => (\n                        <Tab\n                            key={tab}\n                            id={tab}\n                            onSelect={() => this.setState({ selectedIndex: index })}\n                            isSelected={index === this.state.selectedIndex}\n                            aria-controls={`panel-${tab}`}\n                        >\n                            {tab}\n                        </Tab>\n                    ))}\n            </Tablist>\n            {this.state.tabs.map((tab, index) => {\n\n                let panelTab;\n                switch (index) {\n                    case 0:\n                        panelTab = this.renderFileDetails();\n                        break;\n\n                    case 1:\n                        panelTab = this.renderImageDetails();\n                        break;\n\n                    case 2:\n                        panelTab = this.renderMetadataDetails();\n                        break;\n\n                    default:\n                        panelTab = <div />\n                }\n\n                return <Pane\n                    key={tab}\n                    id={`panel-${tab}`}\n                    role=\"tabpanel\"\n                    aria-labelledby={tab}\n                    aria-hidden={index !== this.state.selectedIndex}\n                    display={index === this.state.selectedIndex ? 'block' : 'none'}\n                >\n                    {panelTab}\n                </Pane>\n            })}\n\n        </Pane>\n    }\n\n    renderFileDetails = () => {\n        return <Table marginTop={15}>\n            <Table.Head>\n                <Table.TextHeaderCell>\n                    <Pane display=\"inline-flex\" alignItems=\"center\">\n                        <InfoSignIcon />&nbsp;File information\n                    </Pane>\n                </Table.TextHeaderCell>\n                <Table.TextHeaderCell>\n                    &nbsp;\n                </Table.TextHeaderCell>\n            </Table.Head>\n            <Table.Body>\n                <Table.Row key=\"row_path\">\n                    <Table.TextCell>Path:</Table.TextCell>\n                    <Table.TextCell>{this.props.fileItem.filename}</Table.TextCell>\n                </Table.Row>\n                <Table.Row>\n                    <Table.TextCell key=\"row_modif\">Last modif:</Table.TextCell>\n                    <Table.TextCell>{this.props.fileItem.lastmod}</Table.TextCell>\n                </Table.Row>\n                <Table.Row>\n                    <Table.TextCell key=\"row_size\">Size:</Table.TextCell>\n                    <Table.TextCell>{this.renderFileItemSize()}</Table.TextCell>\n                </Table.Row>\n            </Table.Body>\n        </Table>\n    }\n\n    renderImageDetails = () => {\n        if (typeof this.state.imageData.image === 'undefined') {\n            return <Fragment>&nbsp;</Fragment>\n        }\n\n        let rows = Object.keys(this.state.imageData.image).map((key, index) => {\n            return <Table.Row key={index}>\n                <Table.TextCell>{key}</Table.TextCell>\n                <Table.TextCell>{this.state.imageData.image[key]}</Table.TextCell>\n            </Table.Row>\n        });\n\n        return <Table marginTop={15}>\n            <Table.Head>\n                <Table.TextHeaderCell>\n                    <Pane display=\"inline-flex\" alignItems=\"center\">\n                        <InfoSignIcon />&nbsp;Image information\n                    </Pane>\n                </Table.TextHeaderCell>\n                <Table.TextHeaderCell>\n                    &nbsp;\n                </Table.TextHeaderCell>\n            </Table.Head>\n            <Table.Body>\n                {rows}\n            </Table.Body>\n        </Table>\n    }\n\n    renderMetadataDetails = () => {\n        if (typeof this.state.metadata === 'undefined') {\n            return <Fragment>&nbsp;</Fragment>\n        }\n\n        let rows = Object.keys(this.state.metadata).map((key, index) => {\n            return <Table.Row key={`meta-${index}`}>\n                <Table.TextCell>{key}</Table.TextCell>\n                <Table.TextCell>{this.state.metadata[key]}</Table.TextCell>\n            </Table.Row>\n        });\n\n        return <Table marginTop={15}>\n            <Table.Head>\n                <Table.TextHeaderCell>\n                    <Pane display=\"inline-flex\" alignItems=\"center\">\n                        <InfoSignIcon />&nbsp;Metadata information\n                    </Pane>\n                </Table.TextHeaderCell>\n                <Table.TextHeaderCell>\n                    &nbsp;\n                </Table.TextHeaderCell>\n            </Table.Head>\n            <Table.Body>\n                {rows}\n            </Table.Body>\n        </Table>\n    }\n\n    renderTags = () => {\n        const isImage = this.context.isImageFile(this.props.fileItem.basename);\n        if (!isImage) {\n            return <div>&nbsp;</div>\n        }\n\n        if (!this.state.metadata) {\n            return <div>Tags loading...</div>\n        }\n\n        let tags = [];\n        if (typeof this.state.metadata.tags !== 'undefined') {\n            if ('' !== this.state.metadata.tags) {\n                tags = this.state.metadata.tags.split(',');\n            } \n        }\n\n        const placeholder = tags.length === 0 ? 'No tags for this image' : '';\n        return <TagInput\n            inputProps={{ placeholder: placeholder }}\n            values={tags}\n            flexGrow={2}\n            margin={15}\n            disabled={true}\n        />\n    }\n\n    getRating = () => {\n        const isImage = this.context.isImageFile(this.props.fileItem.basename);\n        if (!isImage) {\n            return 0;\n        }\n\n        if (!this.state.metadata) {\n            return 0;\n        }\n\n        if (!this.state.metadata['xmp:Rating']) {\n            return 0;\n        }\n        \n        return Number.parseInt(this.state.metadata['xmp:Rating']);\n    }\n\n    render = () => {\n        // console.log('Render file details: \\n' + JSON.stringify(this.props.fileItem));\n\n        const downloadIcon = <DownloadIcon size={24} />\n        const infoIcon = <InfoSignIcon size={24} />\n        \n        return <Pane zIndex={1} flexShrink={0} elevation={0} backgroundColor=\"white\">\n            <Pane padding={16} borderBottom=\"muted\">\n                <Heading size={600}>{this.props.fileItem.basename}</Heading>\n            </Pane>\n            <Pane display=\"inline-flex\" alignItems=\"center\">\n                <Button appearance=\"primary\" intent=\"success\" is=\"a\" margin={20} iconBefore={downloadIcon} href={this.getDownloadLink()} target=\"_blank\" disabled={!this.context.connectionValid}>Download</Button>                \n                <RatingPane rating={this.getRating()} maxRating={5} marginRight={10} marginLeft={10}/>\n            </Pane>\n            <Pane display=\"flex\" gridTemplateColumns=\"auto\">\n                {this.renderTags()}\n            </Pane>\n            <Pane>\n                {this.renderImageTabs()}\n            </Pane>\n        </Pane>\n    }\n}","import { Component } from 'react';\n\nimport { Button, InfoSignIcon, LogInIcon } from 'evergreen-ui';\n\nimport { DavConfigurationContext } from '../../AppSettings';\n\nimport './WelcomePage.css';\n\nexport default class WelcomePage extends Component {\n    static contextType = DavConfigurationContext;\n    constructor() {\n        super();\n    }\n\n    showLoginDialog = () => {\n        this.context.setShowConnectionDialog(true);\n    }\n\n    render = () => {\n        return <header id=\"header\">\n\t\t\t\t<div className=\"content\">\n\t\t\t\t\t<h1><a href=\"#\">Nico's Drive</a></h1>\n\t\t\t\t\t<p>Personal storage solution<br />\n\t\t\t\t\tKeep your private memories ... <strong>private!</strong></p>\n\t\t\t\t\t<ul className=\"actions\">\n                        <li><Button is=\"div\" onClick={() => alert('Coming soon...')} appearance=\"default\" height={60} padding={28} iconBefore={InfoSignIcon} fontSize={22}>Learn more</Button></li>\n                        <li><Button is=\"div\" onClick={() => this.showLoginDialog()} appearance=\"primary\" intent=\"success\" height={60} padding={28} iconBefore={LogInIcon} fontSize={22}>Login</Button></li>\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"image phone\"><div className=\"inner\"><img src=\"images/screen.jpg\" alt=\"\" /></div></div>\n\t\t\t</header>\n    }\n}","\nimport { Pane, Link, ChevronRightIcon, HomeIcon, SideSheet, Avatar, Badge, Popover, Menu, InfoSignIcon, Position, LogOutIcon } from 'evergreen-ui';\nimport { Component, Fragment } from 'react';\n\nimport { DavConfigurationContext } from '../AppSettings';\n\nimport Folder from './Folder';\nimport Image from './Image';\nimport RegularFile from './RegularFile';\nimport FileDetailsPane from './FileDetailsPane';\n\nimport WelcomePage from './welcome-page/WelcomePage';\n\nexport default class DavExplorerPane extends Component {\n    static contextType = DavConfigurationContext;\n\n    constructor() {\n        super();\n\n        this.state = {\n            currentDirectory: null,\n            directories: [],\n            files: [],\n            showDetails: false\n        }\n    }\n\n    componentDidUpdate = () => {\n        if (this.context.connectionValid && this.context.davClient !== null && this.state.currentDirectory === null) {\n            this.setState({\n                currentDirectory: '/'\n            }, () => {\n                this.getDirectoryContents();\n            });\n        }\n    }\n    \n    getDirectoryContents = async () => {\n\n        let dirs = [];\n        let files = [];\n\n        if (this.context.connectionValid) {\n            const directoryItems = await this.context.davClient.getDirectoryContents(this.state.currentDirectory);\n            dirs = directoryItems.filter(item => { return item.type === 'directory' });\n            files = directoryItems.filter(item => { return item.type === 'file' });\n        }\n\n        this.setState({\n            directories: dirs,\n            files: files\n        }, () => {\n            console.log(`${dirs.length} directories and ${files.length} files from ${this.state.currentDirectory}`);\n        });\n    }\n\n    navigate = (folderName) => {\n        const separator = this.state.currentDirectory.endsWith('/') || folderName.startsWith('/') ? '' : '/';\n        let newDir = this.state.currentDirectory + separator + folderName;\n        this.setState((prev) => {\n            return {\n                currentDirectory: newDir,\n                files: [],\n                directories: []\n            }\n        }, () => {\n            console.log(`Navigated to ${newDir}, now get directory contents...`);\n            this.getDirectoryContents();\n        });\n    }\n\n    navigateAbsolute = (absolutePath) => {\n        this.setState((prev) => {\n            return {\n                currentDirectory: absolutePath,\n                files: [],\n                directories: []\n            }\n        }, () => {\n            console.log(`Absolute navigated to ${absolutePath}, now get directory contents...`);\n            this.getDirectoryContents();\n        });\n    }\n\n    toggleFileDetails = (fileItem) => {\n        let modified = fileItem;\n        if (modified.filename.startsWith(this.context.homeDirectory)) {\n            modified.filename = modified.filename.substring(this.context.homeDirectory.length);\n        }\n\n        this.setState({\n            showDetails: true,\n            detailedFileItem: modified\n        });\n    }\n\n    disconnect = () => {\n        this.context.disconnect();\n    }\n\n    renderFolders = () => {\n        let folders = this.state.directories.map((directory, index) => {\n            return <Folder fileItem={directory} navigate={this.navigate} showDetails={this.toggleFileDetails} key={'dir_' + index} />\n        });\n        return folders;\n    }\n\n    renderFiles = () => {\n        let images = this.state.files.map((file, index) => {\n            if (this.context.isImageFile(file.basename)) {\n                return <Image fileItem={file} navigate={this.navigate} showDetails={this.toggleFileDetails} key={'file_' + index} />\n            } else {\n                return <RegularFile fileItem={file} navigate={this.navigate} showDetails={this.toggleFileDetails} key={'file_' + index} />\n            }\n        });\n        return images;\n    }\n\n    renderBreadCrumb = () => {\n        let path = this.state.currentDirectory;\n\n        const chevronIcon = <ChevronRightIcon size={24} style={{ marginLeft: '5px', marginRight: '5px' }} />\n        const homeIcon = <HomeIcon size={24} style={{ marginLeft: '5px', marginRight: '5px' }} />\n\n        let currentDirs = path === '/' ? [''] : path.split('/');\n        let navDirs = [];\n        let breadCrumb = currentDirs.map((dir, index) => {\n            const icon = index === 0 ? homeIcon : chevronIcon;\n            navDirs.push(dir);\n            const fullPath = navDirs.join('/');\n            return <Link href=\"#\" style={{ display: 'flex', alignItems: 'center' }} key={index + 1} onClick={() => {                \n                this.navigateAbsolute(dir === '' ? '/' : fullPath);\n            }}>{icon}{dir}</Link>\n        });\n\n        return breadCrumb;\n    }\n\n    renderAvatarMenu = () => {\n        return <Popover\n        position={Position.BOTTOM_LEFT}\n        content={\n          <Menu>\n            <Menu.Group>\n              <Menu.Item icon={InfoSignIcon} intent=\"success\"><Badge color=\"green\">Connected!</Badge></Menu.Item>              \n              <Menu.Item>{this.context.getClientUrl()}</Menu.Item>\n            </Menu.Group>\n            <Menu.Divider />\n            <Menu.Group>\n              <Menu.Item icon={LogOutIcon} intent=\"danger\" onClick={() => {this.disconnect()}}>\n                Disconnect\n              </Menu.Item>\n            </Menu.Group>\n          </Menu>\n        }\n      >\n        <Avatar name={this.context.username} size={40} marginLeft={15} marginRight={15} />\n      </Popover>\n    }\n\n    renderRootPane = () => {\n        const breadCrumb = this.renderBreadCrumb();\n\n        return <Fragment>\n            <Pane zIndex={1} flexShrink={0} elevation={0} backgroundColor=\"white\" display=\"grid\" gridTemplateColumns=\"auto 1fr\">\n                <Pane display=\"flex\" padding={8} background=\"blueTint\">\n                    {breadCrumb}\n                </Pane>\n                <Pane justifySelf=\"end\" display=\"inline-flex\" alignItems=\"center\">\n                   {this.renderAvatarMenu()}\n                </Pane>                \n            </Pane>\n            <Pane display=\"flex\" flexWrap=\"wrap\" justifyContent=\"space-evenly\" background=\"overlay\">\n                {this.renderFolders()}\n                {this.renderFiles()}\n            </Pane>\n        </Fragment>\n    }\n\n    render = () => {\n\n        if (!this.context.connectionValid) {\n            return <WelcomePage />\n        }\n\n        if (!this.state.currentDirectory) {\n            return <h3>Loading...</h3>\n        }\n\n        return <Pane>\n            {this.renderRootPane()}\n\n            <SideSheet\n                isShown={this.state.showDetails}\n                onCloseComplete={() => this.setState({ showDetails: false })}\n            >\n                <FileDetailsPane fileItem={this.state.detailedFileItem} davClient={this.state.davClient} />\n            </SideSheet>\n        </Pane>\n    }\n}","import { Component } from 'react';\nimport { Dialog, Pane, TextInputField, Text, Paragraph, Button } from 'evergreen-ui';\nimport { DavConfigurationContext } from '../AppSettings';\n\nimport { createClient, AuthType } from \"webdav\";\n\nexport default class LoginDialog extends Component {\n    static contextType = DavConfigurationContext;\n    \n    constructor() {\n        super();\n        this.state = {\n            isLoading: false,\n            username: '',\n            password: '',\n            url: '',\n            errorMessage: ''\n        }\n    }\n\n    testConnection = async () => {\n        try {\n\n            console.log('Now testing connection...');\n\n            const clientOptions = {\n                authType: AuthType.Basic,\n                username: this.state.username,\n                password: this.state.password\n            }\n\n            const client = createClient(this.state.url, clientOptions);\n\n            const directoryItems = await client.getDirectoryContents('./');\n\n            console.log('Sucess !');\n\n            this.context.setDavClient(client);\n\n        } catch (error) {\n            console.error('Could not connect to webdav: ' + JSON.stringify(error));\n            this.context.setDavClient(null);\n            this.context.setConnectionValid(false);\n            this.setState({\n                errorMessage: JSON.stringify(error)\n            });\n        } finally {\n            this.setState({\n                isLoading: false\n            });\n        }\n    }\n\n    componentDidMount = () => {\n        this.setState({\n            username: this.context.username,\n            password: this.context.password,\n            url: this.context.getClientUrl() + this.context.homeDirectory,\n            errorMessage: ''\n        });\n    }\n\n    onConfirm = () => {\n        this.setState({ \n            isLoading: true            \n        }, () => this.testConnection());\n    }\n\n    onCloseComplete = () => {\n        this.context.setShowConnectionDialog(false);\n        this.setState({ isLoading: false, errorMessage: '' });\n    }\n\n    renderDialog = () => {\n        return <Dialog\n            isShown={this.context.showConnectionDialog}\n            title=\"WebDAV Connection setup...\"\n            onCloseComplete={() => this.onCloseComplete()}\n            isConfirmLoading={this.state.isLoading}\n            onConfirm={(close) => this.onConfirm(close)}           \n            hasFooter={false}\n        >\n            <Pane display=\"grid\" gridTemplateColumns=\"auto\">\n                    <TextInputField id=\"txt-login\" \n                                    value={this.state.username} \n                                    onChange={e => this.setState({ username: e.target.value })}\n                                    placeholder=\"Login name...\" \n                                    label=\"Login:\"/>\n\n                    <TextInputField id=\"txt-password\" \n                                    type=\"password\" \n                                    value={this.state.password} \n                                    onChange={e => this.setState({ password: e.target.value })}\n                                    placeholder=\"Password...\" \n                                    label=\"Password:\"/>\n\n                    <TextInputField id=\"txt-url\" \n                                    value={this.state.url} \n                                    onChange={e => this.setState({ url: e.target.value })}\n                                    placeholder=\"WebDAV URL...\"\n                                    label=\"WebDAV base URL:\"/>\n                    <Pane>\n                        <Paragraph>{this.state.errorMessage}</Paragraph>\n                        <Button is=\"div\" marginTop={16} onClick={() => this.onConfirm()} disabled={this.state.isLoading} appearance=\"primary\" intent=\"success\">\n                        {this.state.isLoading ? 'Please wait...' : 'Connect'}\n                        </Button>\n                    </Pane>\n            </Pane>          \n        </Dialog>\n    }\n\n    render = () => {\n        return this.renderDialog();\n    }\n}","\nimport { React, Component } from 'react';\nimport { Pane } from 'evergreen-ui';\n\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {DavConfigurationProvider} from './AppSettings';\n\nimport DavExplorerPane from './components/DavExplorerPane';\nimport LoginDialog from './components/LoginDialog';\n\nclass App extends Component {\n\n  render = () => {\n    return (      \n        <div className=\"App\">\n          <Pane clearfix width=\"100%\">\n              <DavConfigurationProvider>\n                <LoginDialog />\n                <DavExplorerPane />\n              </DavConfigurationProvider>\n          </Pane>\n        </div>      \n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}