{"version":3,"sources":["AppSettings.js","components/welcome-page/WelcomePage.js","components/RatingPane.js","components/FileDetailsPane.js","components/RegularFile.js","components/Folder.js","components/Image.js","components/DavDirectoryPane.js","components/DavBreadCrumb.js","components/DavToolBar.js","components/tree/Tree.js","components/tree/TreeFolder.js","components/DavExplorerPane.js","components/LoginDialog.js","App.js","reportWebVitals.js","AppTheme.js","index.js"],"names":["defaultValue","davBaseUrl","davWebContext","authType","AuthType","Basic","username","password","davClient","connectionValid","showConnectionDialog","homeDirectory","currentDirectory","supportedFormats","filter","filterRegExp","RegExp","filterFileItems","setDavClient","client","setConnectionValid","setShowConnectionDialog","showConDlg","getClientUrl","getThumbApiUrl","getExifApiUrl","getMetadataApiUrl","isImageFile","setCurrentDirectory","disconnect","DavConfigurationContext","React","createContext","DavConfigurationProvider","value","valueStr","setState","url","uri","URL","protocol","host","pathTab","pathname","split","splice","homeDir","join","showConDialog","console","log","getBasePath","state","filename","startsWith","index","lastIndexOf","extention","toUpperCase","substring","indexOf","render","Provider","props","children","Component","WelcomePage","showLoginDialog","context","id","className","href","Button","is","onClick","window","location","assign","appearance","height","padding","iconBefore","InfoSignIcon","fontSize","intent","LogInIcon","src","alt","contextType","RatingPane","stars","rating","maxRating","size","lightedStar","StarIcon","color","push","unlightedStar","StarEmptyIcon","Pane","display","alignItems","FileDetailsPane","componentDidMount","loadImageInformation","loadMetaDataInformation","getDownloadLink","getFileDownloadLink","fileItem","metaUrl","exifRequest","fetch","method","body","JSON","stringify","headers","then","res","json","imageData","catch","err","metadata","tags","metadataRequest","renderFileItemSize","unite","taille","toFixed","renderImageTabs","isImage","basename","Tablist","marginBottom","flexBasis","marginRight","tabs","tab","map","Tab","onSelect","selectedIndex","isSelected","panelTab","renderFileDetails","renderImageDetails","renderMetadataDetails","role","Table","marginTop","Head","TextHeaderCell","Body","Row","TextCell","lastmod","image","rows","Object","keys","key","renderTags","placeholder","length","TagInput","inputProps","values","flexGrow","margin","disabled","getRating","Number","parseInt","downloadIcon","DownloadIcon","zIndex","flexShrink","elevation","backgroundColor","borderBottom","Heading","target","marginLeft","gridTemplateColumns","RegularFile","_capitalize","str","lower","toLowerCase","charAt","slice","renderMimeType","mimeType","endsWith","renderHttpDate","httpDate","DateTime","fromHTTP","toLocaleString","DATETIME_SHORT_WITH_SECONDS","renderGrid","Card","width","justifyContent","flexDirection","style","background","icon","DocumentIcon","Link","evt","handleShowDetails","Text","overflow","maxWidth","maxHeight","renderTable","isSelectable","textAlign","mime","displayMode","Folder","handleNavigate","FolderOpenIcon","Image","thumb","generateThumb","req","that","blob","reader","FileReader","readAsDataURL","onloadend","base64data","result","prev","styleThumb","backgroundImage","backgroundPosition","backgroundSize","maxHeigh","DavDirectoryPane","navigate","folderName","renderFolders","folders","folder","search","directory","renderFiles","files","file","renderDirectoryContentsGrid","flexWrap","renderDirectoryContentsTable","directoryContents","DavBreadCrumb","path","chevronIcon","ChevronRightIcon","homeIcon","HomeIcon","currentDirs","navDirs","breadCrumb","dir","fullPath","DavToolBar","renderDisplayTools","handleDisplayMode","GridViewIcon","ListIcon","justifySelf","Tree","paddingTop","styles","folderLabel","justifyItems","span","fontFamily","collapsibleOpen","paddingLeft","collapsibleClosed","TreeFolder","getDirectoryContents","a","dirs","absolutePath","directoryItems","item","type","subDirs","handleToggle","isOpen","handleClick","renderSubDirectories","plusIcon","ChevronDownIcon","folderIcon","FolderCloseIcon","cursor","DavExplorerPane","componentDidUpdate","rootDirs","directories","separator","newDir","navigateAbsolute","toggleFileDetails","modified","showDetails","detailedFileItem","changeDisplayMode","renderAvatarMenu","Popover","position","Position","BOTTOM_RIGHT","content","Menu","Group","Item","Badge","Divider","LogOutIcon","Avatar","name","gridTemplateRows","overflowX","paddingBottom","SearchInput","onChange","e","SideSheet","isShown","onCloseComplete","Spinner","marginX","LoginDialog","buildUrl","hostname","port","newUrl","davContext","testConnection","clientOptions","createClient","errorMessage","error","isLoading","onConfirm","onTxtLoginChange","renderDialog","Dialog","title","isConfirmLoading","close","hasFooter","TextInputField","label","Paragraph","App","clearfix","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","appTheme","merge","defaultTheme","typography","fontFamilies","ui","mono","components","baseStyle","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c2d8f78f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { AuthType } from \"webdav\";\n\nconst defaultValue = {\n    davBaseUrl: 'http://localhost:8080',\n    davWebContext: '/dav',\n    authType: AuthType.Basic,\n    username: 'hironico',\n    password: 'changeme',\n    davClient: null,\n    connectionValid: false,\n    showConnectionDialog: false,\n    homeDirectory: '/hironico',\n    currentDirectory: '/',\n    supportedFormats: ['JPEG', 'JPG', 'PNG', 'WEBP', 'AVIF', 'TIFF', 'TIF', 'GIF', 'SVG', 'CR2', 'DNG'],\n    filter: '',\n    filterRegExp: new RegExp('.*', 'i'),\n    filterFileItems: (filter) => { },\n    setDavClient: (client) => { },\n    setConnectionValid: () => { },\n    setShowConnectionDialog: (showConDlg) => { },\n    getClientUrl: () => { },\n    getThumbApiUrl: () => { },\n    getExifApiUrl: () => { },\n    getMetadataApiUrl: () => { },\n    isImageFile: () => { },\n    setCurrentDirectory: () => { },\n    disconnect: () => { }\n}\n\nconst DavConfigurationContext = React.createContext(defaultValue);\n\nclass DavConfigurationProvider extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            davBaseUrl: 'http://localhost:8080',\n            davWebContext: '/dav',\n            authType: AuthType.Basic,\n            username: 'hironico',\n            password: 'hironico',\n            davClient: null,\n            connectionValid: false,\n            showConnectionDialog: false,\n            homeDirectory: '/hironico',\n            supportedFormats: ['JPEG', 'JPG', 'PNG', 'WEBP', 'AVIF', 'TIFF', 'GIF', 'SVG', 'CR2', 'DNG'],\n            filter: '',\n            filterRegExp: new RegExp('.*', 'i'),\n            filterFileItems: this.filterFileItems,\n            setDavClient: this.setDavClient,\n            setConnectionValid: this.setConnectionValid,\n            setShowConnectionDialog: this.setShowConnectionDialog,\n            getClientUrl: this.getClientUrl,\n            getThumbApiUrl: this.getThumbApiUrl,\n            getExifApiUrl: this.getExifApiUrl,\n            getMetadataApiUrl: this.getMetadataApiUrl,\n            isImageFile: this.isImageFile,\n            getBasePath: this.getBasePath,\n            disconnect: this.disconnect\n        }\n    }\n\n    filterFileItems = (value) => {\n        let valueStr = value === null || value === '' ? '.*' : value;\n        this.setState({\n            filter: value,\n            filterRegExp: new RegExp(valueStr, 'i')\n        });\n    }\n\n    setDavClient = (client, url) => {\n        const urlValid = (typeof url !== 'undefined' && url !== null);\n        const uri = urlValid ? new URL(url) : null;\n        const davBaseUrl = uri ? `${uri.protocol}//${uri.host}` : '';\n        let pathTab = uri ? uri.pathname.split('/') : '';\n        const davWebContext = uri ? `/${pathTab[0]}` : '';\n        pathTab = uri ? pathTab.splice(0, 1) : [];\n        const homeDir = uri ? pathTab.join('/') : '';\n\n        this.setState({\n            davClient: client,\n            davBaseUrl: client ? davBaseUrl : '',\n            davWebContext: client ? davWebContext : '',\n            homeDirectory: client ? homeDir : '',\n            connectionValid: client ? true : false,\n            showConnectionDialog: client ? false : true\n        });\n    }\n\n    setConnectionValid = (connectionValid) => {\n        this.setState({\n            connectionValid: connectionValid\n        });\n    }\n\n    disconnect = () => {\n        this.setDavClient(null, null);\n    }\n\n    setShowConnectionDialog = (showConDialog) => {\n        console.log('Must set showConnectionDialog to : ' + showConDialog);\n        this.setState({\n            showConnectionDialog: showConDialog\n        });\n    }\n\n    getBasePath = () => {\n        return `${this.state.davWebContext}${this.state.homeDirectory}`;\n    }\n\n    getClientUrl = () => {\n        return `${this.state.davBaseUrl}${this.state.davWebContext}`;\n    }\n\n    getThumbApiUrl = () => {\n        return `${this.state.davBaseUrl}/thumb`;\n    }\n\n    getExifApiUrl = () => {\n        return `${this.state.davBaseUrl}/meta/exif`;\n    }\n\n    getMetadataApiUrl = () => {\n        return `${this.state.davBaseUrl}/meta/xmp`;\n    }\n\n    isImageFile = (filename) => {\n        if (typeof filename === 'undefined' || filename === null) {\n            return false;\n        }\n\n        if (filename.startsWith('.')) {\n            return false;\n        }\n\n        const index = filename.lastIndexOf('.');\n        if (index < 0) {\n            return false;\n        }\n\n        const extention = filename.toUpperCase().substring(index + 1);\n\n        const formatIndex = this.state.supportedFormats.indexOf(extention);\n        return formatIndex !== -1;\n    }\n\n    render = () => {\n        return <DavConfigurationContext.Provider value={this.state}>{this.props.children}</DavConfigurationContext.Provider>\n    }\n}\n\nexport { DavConfigurationContext, DavConfigurationProvider }\n","import { Component } from 'react';\n\nimport { Button, InfoSignIcon, LogInIcon } from 'evergreen-ui';\n\nimport { DavConfigurationContext } from '../../AppSettings';\n\nimport './WelcomePage.css';\n\nexport default class WelcomePage extends Component {\n    static contextType = DavConfigurationContext;\n\n    showLoginDialog = () => {\n        this.context.setShowConnectionDialog(true);\n    }\n\n    render = () => {\n        return <header id=\"header\">\n\t\t\t\t<div className=\"content\">\n\t\t\t\t\t<h1><a href=\"/\">Nico's Drive</a></h1>\n\t\t\t\t\t<p>The private online storage solution.<br />\n\t\t\t\t\tBackup your memories ... <strong>automatically!</strong><br />\n                    Access your files anytime, anywhere, just like a shared drive,<br />\n                    On any computer.</p>\n\t\t\t\t\t<ul className=\"actions\">\n                        <li><Button is=\"div\" onClick={() => window.location.assign('https://github.com/hironico/nico.drive#readme')} appearance=\"default\" height={60} padding={28} iconBefore={InfoSignIcon} fontSize={22}>Learn more</Button></li>\n                        <li><Button is=\"div\" onClick={() => this.showLoginDialog()} appearance=\"primary\" intent=\"success\" height={60} padding={28} iconBefore={LogInIcon} fontSize={22}>Login</Button></li>\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"image phone\"><div className=\"inner\"><img src=\"images/screen.jpg\" alt=\"\" /></div></div>\n\t\t\t</header>\n    }\n}","import { Component } from 'react';\nimport { Pane, StarIcon, StarEmptyIcon } from 'evergreen-ui';\n\nexport default class RatingPane extends Component {\n\n    render = () => {\n        let stars = [];\n\n        let rating = this.props.rating ? this.props.rating : 0;\n        let maxRating = this.props.maxRating ? this.props.maxRating : 5;\n        if (maxRating < rating) {\n            maxRating = rating;\n        }\n\n        let size = this.props.size ? this.props.size : 24;\n        \n        for(let index = 0; index < rating; index++) {\n            const lightedStar = <StarIcon key={index} color=\"#FBE6A2\" size={size}/>\n            stars.push(lightedStar);\n        }\n\n        for(let index = rating; index < maxRating; index++) {\n            const unlightedStar = <StarEmptyIcon key={index} color=\"#C7CED4\" size={size}/>\n            stars.push(unlightedStar);\n        }\n\n        return <Pane display=\"inline-fex\" alignItems=\"center\">\n            {stars}\n        </Pane>\n    }\n}","import { Button, Heading, InfoSignIcon, Pane, Table, DownloadIcon, Tablist, Tab, TagInput } from 'evergreen-ui';\nimport { Fragment, Component } from 'react';\n\nimport RatingPane from './RatingPane';\n\nimport { DavConfigurationContext } from '../AppSettings';\n\nexport default class FileDetailsPane extends Component {\n    static contextType = DavConfigurationContext;\n\n    constructor() {\n        super();\n\n        this.state = {\n            imageData: [],\n            selectedIndex: 0,\n            tabs: ['Information', 'Image', 'Metadata']\n        }\n    }\n\n    componentDidMount = () => {\n        this.loadImageInformation();\n        this.loadMetaDataInformation();\n    }\n\n    getDownloadLink = () => {        \n        if (!this.context.connectionValid) {\n            // console.log('davClient is undefined in context. Cannot download file.');\n            return;\n        }\n\n        return this.context.davClient.getFileDownloadLink(this.props.fileItem.filename);\n    }\n\n    loadImageInformation = () => {\n        const metaUrl = this.context.getExifApiUrl();\n\n        const exifRequest = {\n            \"filename\": this.props.fileItem.filename\n        }\n\n        fetch(metaUrl, {\n            method: 'POST',\n            body: JSON.stringify(exifRequest),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(res => res.json())\n            .then(res => {\n                // console.log('Received exif for this file: ' + JSON.stringify(res));\n                this.setState({\n                    imageData: res\n                });\n            }).catch(err => {\n                console.log('Error while reading exif data: ' + err);\n                this.setState({\n                    metadata: { tags: '' }\n                });\n            });\n    }\n\n\n    loadMetaDataInformation = () => {\n        const metaUrl = this.context.getMetadataApiUrl();\n\n        const metadataRequest = {\n            \"filename\": this.props.fileItem.filename,\n            \"raw\": false\n        }\n\n        fetch(metaUrl, {\n            method: 'POST',\n            body: JSON.stringify(metadataRequest),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(res => res.json())\n            .then(res => {\n                /*\n                console.log('Received metadata for this file: ' + JSON.stringify(res));\n                console.log('Tags are: ' + res.tags);\n                */\n\n                this.setState({\n                    metadata: res\n                });\n            }).catch(err => {\n                console.log('Error while reading metadata: ' + err);\n                this.setState({\n                    metadata: { tags: '' }\n                });\n            });\n    }\n\n    renderFileItemSize = () => {\n        let unite = 'bytes';\n        let taille = this.props.fileItem.size;\n        if (taille > 1024) {\n            taille = (taille / 1024).toFixed(2);\n            unite = 'KB';\n        }\n        if (taille > 1024) {\n            taille = (taille / 1024).toFixed(2);\n            unite = 'MB';\n        }\n        if (taille > 1024) {\n            taille = (taille / 1024).toFixed(2);\n            unite = 'GB';\n        }\n\n        return <span>{taille}&nbsp;{unite}</span>\n    }\n\n    renderImageTabs = () => {\n        const isImage = this.context.isImageFile(this.props.fileItem.basename);\n        return <Pane padding={15}>\n            <Tablist marginBottom={16} flexBasis={240} marginRight={24}>\n                {this.state.tabs.filter((tab, index) => {\n                    return index > 0 ? isImage : true;\n                })\n                    .map((tab, index) => (\n                        <Tab\n                            key={tab}\n                            id={tab}\n                            onSelect={() => this.setState({ selectedIndex: index })}\n                            isSelected={index === this.state.selectedIndex}\n                            aria-controls={`panel-${tab}`}\n                        >\n                            {tab}\n                        </Tab>\n                    ))}\n            </Tablist>\n            {this.state.tabs.map((tab, index) => {\n\n                let panelTab;\n                switch (index) {\n                    case 0:\n                        panelTab = this.renderFileDetails();\n                        break;\n\n                    case 1:\n                        panelTab = this.renderImageDetails();\n                        break;\n\n                    case 2:\n                        panelTab = this.renderMetadataDetails();\n                        break;\n\n                    default:\n                        panelTab = <div />\n                }\n\n                return <Pane\n                    key={tab}\n                    id={`panel-${tab}`}\n                    role=\"tabpanel\"\n                    aria-labelledby={tab}\n                    aria-hidden={index !== this.state.selectedIndex}\n                    display={index === this.state.selectedIndex ? 'block' : 'none'}\n                >\n                    {panelTab}\n                </Pane>\n            })}\n\n        </Pane>\n    }\n\n    renderFileDetails = () => {\n        return <Table marginTop={15}>\n            <Table.Head height={32}>\n                <Table.TextHeaderCell>\n                    <Pane display=\"inline-flex\" alignItems=\"center\">\n                        <InfoSignIcon />&nbsp;File information\n                    </Pane>\n                </Table.TextHeaderCell>\n                <Table.TextHeaderCell>\n                    &nbsp;\n                </Table.TextHeaderCell>\n            </Table.Head>\n            <Table.Body>\n                <Table.Row key=\"row_path\" height={32}>\n                    <Table.TextCell>Path:</Table.TextCell>\n                    <Table.TextCell>{this.props.fileItem.filename}</Table.TextCell>\n                </Table.Row>\n                <Table.Row height={32}>\n                    <Table.TextCell key=\"row_modif\">Last modif:</Table.TextCell>\n                    <Table.TextCell>{this.props.fileItem.lastmod}</Table.TextCell>\n                </Table.Row>\n                <Table.Row height={32}>\n                    <Table.TextCell key=\"row_size\">Size:</Table.TextCell>\n                    <Table.TextCell>{this.renderFileItemSize()}</Table.TextCell>\n                </Table.Row>\n            </Table.Body>\n        </Table>\n    }\n\n    renderImageDetails = () => {\n        if (typeof this.state.imageData.image === 'undefined') {\n            return <Fragment>&nbsp;</Fragment>\n        }\n\n        let rows = Object.keys(this.state.imageData.image).map((key, index) => {\n            return <Table.Row key={index}>\n                <Table.TextCell>{key}</Table.TextCell>\n                <Table.TextCell>{this.state.imageData.image[key]}</Table.TextCell>\n            </Table.Row>\n        });\n\n        return <Table marginTop={15}>\n            <Table.Head>\n                <Table.TextHeaderCell>\n                    <Pane display=\"inline-flex\" alignItems=\"center\">\n                        <InfoSignIcon />&nbsp;Image information\n                    </Pane>\n                </Table.TextHeaderCell>\n                <Table.TextHeaderCell>\n                    &nbsp;\n                </Table.TextHeaderCell>\n            </Table.Head>\n            <Table.Body>\n                {rows}\n            </Table.Body>\n        </Table>\n    }\n\n    renderMetadataDetails = () => {\n        if (typeof this.state.metadata === 'undefined') {\n            return <Fragment>&nbsp;</Fragment>\n        }\n\n        let rows = Object.keys(this.state.metadata).map((key, index) => {\n            return <Table.Row key={`meta-${index}`}>\n                <Table.TextCell>{key}</Table.TextCell>\n                <Table.TextCell>{this.state.metadata[key]}</Table.TextCell>\n            </Table.Row>\n        });\n\n        return <Table marginTop={15}>\n            <Table.Head>\n                <Table.TextHeaderCell>\n                    <Pane display=\"inline-flex\" alignItems=\"center\">\n                        <InfoSignIcon />&nbsp;Metadata information\n                    </Pane>\n                </Table.TextHeaderCell>\n                <Table.TextHeaderCell>\n                    &nbsp;\n                </Table.TextHeaderCell>\n            </Table.Head>\n            <Table.Body>\n                {rows}\n            </Table.Body>\n        </Table>\n    }\n\n    renderTags = () => {\n        const isImage = this.context.isImageFile(this.props.fileItem.basename);\n        if (!isImage) {\n            return <div>&nbsp;</div>\n        }\n\n        let placeholder = 'Loading tags info...';\n        let tags = [];\n        if (this.state.metadata) {            \n            if (typeof this.state.metadata.tags !== 'undefined') {\n                if ('' !== this.state.metadata.tags) {\n                    tags = this.state.metadata.tags.split(',');\n                } \n            }\n            placeholder = tags.length === 0 ? 'No tags for this image' : '';\n        }\n\n        return <TagInput\n            inputProps={{ placeholder: placeholder }}\n            values={tags}\n            flexGrow={2}\n            margin={15}\n            disabled={true}\n        />\n    }\n\n    getRating = () => {\n        const isImage = this.context.isImageFile(this.props.fileItem.basename);\n        if (!isImage) {\n            return 0;\n        }\n\n        if (!this.state.metadata) {\n            return 0;\n        }\n\n        if (!this.state.metadata['xmp:Rating']) {\n            return 0;\n        }\n        \n        return Number.parseInt(this.state.metadata['xmp:Rating']);\n    }\n\n    render = () => {\n        // console.log('Render file details: \\n' + JSON.stringify(this.props.fileItem));\n\n        const downloadIcon = <DownloadIcon size={24} marginRight={5}/>\n        \n        return <Pane zIndex={1} flexShrink={0} elevation={0} backgroundColor=\"white\">\n            <Pane padding={16} borderBottom=\"muted\">\n                <Heading size={600}>{this.props.fileItem.basename}</Heading>\n            </Pane>\n            <Pane display=\"inline-flex\" alignItems=\"center\">\n                <Button appearance=\"primary\" intent=\"success\" is=\"a\" margin={20} iconBefore={downloadIcon} href={this.getDownloadLink()} target=\"_blank\" disabled={!this.context.connectionValid}>Download</Button>                \n                <RatingPane rating={this.getRating()} maxRating={5} marginRight={10} marginLeft={10}/>\n            </Pane>\n            <Pane display=\"flex\" gridTemplateColumns=\"auto\">\n                {this.renderTags()}\n            </Pane>\n            <Pane>\n                {this.renderImageTabs()}\n            </Pane>\n        </Pane>\n    }\n}","\nimport { Card, Icon, Pane, DocumentIcon, Link, Text, InfoSignIcon, DownloadIcon, Table } from 'evergreen-ui';\nimport { Component } from 'react';\nimport { DateTime } from 'luxon';\nimport { DavConfigurationContext } from '../AppSettings';\n\n\nexport default class RegularFile extends Component {\n    static contextType = DavConfigurationContext;\n\n    _capitalize = (str) => {\n        const lower = str.toLowerCase();\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\n    }\n\n    renderMimeType = (mimeType) => {\n        if (typeof mimeType === 'undefined') {\n            return 'File';\n        }\n\n        if (mimeType.endsWith('json')) {\n            return 'JSON';\n        }\n\n        if (mimeType.endsWith('xml')) {\n            return 'XML';\n        }\n\n        if (mimeType.startsWith('application/')) {\n            return 'File';\n        }\n\n        if (mimeType.startsWith('image/')) {\n            return this._capitalize(mimeType.substring(6));\n        }\n\n        if (mimeType.startsWith('text/')) {\n            return this._capitalize(mimeType.substring(5)) + ' Text';\n        }\n\n        return mimeType;\n    }\n\n    renderHttpDate = (httpDate) => {\n        return DateTime.fromHTTP(httpDate).toLocaleString(DateTime.DATETIME_SHORT_WITH_SECONDS);\n    }\n\n    renderFileItemSize = () => {\n        let unite = 'bytes';\n        let taille = this.props.fileItem.size;\n        if (taille > 1024) {\n            taille = (taille / 1024).toFixed(2);\n            unite = 'KB';\n        }\n        if (taille > 1024) {\n            taille = (taille / 1024).toFixed(2);\n            unite = 'MB';\n        }\n        if (taille > 1024) {\n            taille = (taille / 1024).toFixed(2);\n            unite = 'GB';\n        }\n\n        return `${taille} ${unite}`;\n    }\n\n    renderGrid = () => {\n        let styleThumb = {\n            width: '200px',\n            height: '200px',\n            marginTop: '-15px',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center'\n        }\n\n        return (\n            <Card\n                elevation={2}\n                backgroundColor=\"white\"\n                width={200}\n                height={240}\n                margin={24}\n                display=\"flex\"\n                justifyContent=\"center\"\n                alignItems=\"center\"\n                flexDirection=\"column\"\n            >                \n                <Pane style={styleThumb} background=\"tint2\">\n                    <Icon icon={DocumentIcon} size={48} color=\"success\" />\n                </Pane>  \n\n                <Pane display=\"inline-flex\" alignItems=\"center\" justifyContent=\"space-between\" style={{width: '190px', height: '18px', margin: '5px'}}>\n                    <Link href=\"#\" onClick={(evt) => {this.props.handleShowDetails(this.props.fileItem)}} borderBottom=\"none\"><Icon icon={InfoSignIcon} color=\"info\"/></Link>\n                    <Text style={{overflow: 'hidden', maxWidth: '155px', maxHeight: '24px'}}>{this.props.fileItem.basename}</Text>\n                    <Link href={this.context.davClient.getFileDownloadLink(this.props.fileItem.filename)} target=\"_blank\" borderBottom=\"none\"><DownloadIcon color=\"success\"/></Link>\n                </Pane>\n            </Card>\n        );\n    }\n\n    renderTable = () => {\n        return <Table.Row key={this.props.fileItem.basename} isSelectable height={32}>\n            <Table.TextCell textAlign=\"center\" maxWidth={48}>\n                <DocumentIcon size={16}/>\n            </Table.TextCell>\n              <Table.TextCell textAlign=\"left\">\n                  <Link href={this.context.davClient.getFileDownloadLink(this.props.fileItem.filename)} target=\"_blank\" borderBottom=\"none\">                    \n                    {this.props.fileItem.basename}\n                  </Link>\n              </Table.TextCell>\n              <Table.TextCell textAlign=\"left\">\n                  {this.renderMimeType(this.props.fileItem.mime)}\n              </Table.TextCell>\n              <Table.TextCell textAlign=\"left\">\n                  {this.renderFileItemSize()}\n              </Table.TextCell>\n              <Table.TextCell textAlign=\"left\">\n                  {this.renderHttpDate(this.props.fileItem.lastmod)}\n              </Table.TextCell>\n              <Table.TextCell textAlign=\"center\">\n                <Link href=\"#\" onClick={(evt) => {this.props.handleShowDetails(this.props.fileItem)}} borderBottom=\"none\" marginRight={5}><Icon icon={InfoSignIcon} color=\"info\"/></Link>&nbsp;\n                <Link href={this.context.davClient.getFileDownloadLink(this.props.fileItem.filename)} target=\"_blank\" borderBottom=\"none\"><DownloadIcon color=\"success\"/></Link>\n              </Table.TextCell>\n            </Table.Row>\n    }\n\n    render = () => {\n        switch (this.props.displayMode) {\n            case 'grid':\n                return this.renderGrid();\n\n            case 'table':\n                return this.renderTable();\n\n            default:\n                console.log(`Invalid display mode: ${this.props.displayMode}. Using grid as a default.`);\n                return this.renderGrid();\n        }\n    }\n}","\nimport { Card, Icon, Text, Pane, FolderOpenIcon, Link, Table } from 'evergreen-ui';\n\nimport RegularFile from './RegularFile';\n\nexport default class Folder extends RegularFile {\n\n    renderGrid = () => {\n        let styleThumb = {\n            width: '200px',\n            height: '200px',\n            marginTop: '-15px',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center'\n        }\n\n        return (\n            <Card\n                elevation={2}\n                backgroundColor=\"white\"\n                width={200}\n                height={240}\n                margin={24}\n                display=\"flex\"\n                justifyContent=\"center\"\n                alignItems=\"center\"\n                flexDirection=\"column\"\n            >   \n                <Link href=\"#\" onClick={(evt) => this.props.handleNavigate(this.props.fileItem.basename)} borderBottom=\"none\">             \n                    <Pane style={styleThumb} background=\"tint2\">\n                        <Icon icon={FolderOpenIcon} size={48} color=\"#F7D154\" />\n                    </Pane>\n                    <Pane display=\"inline-flex\" alignItems=\"center\" justifyContent=\"center\" width={190} height={18} margin={5}>\n                        <FolderOpenIcon color=\"#F7D154\"/>\n                        <Text overflow=\"hidden\" maxWidth={155} maxHeight={24}>{this.props.fileItem.basename}</Text>                        \n                    </Pane>                    \n                </Link>\n            </Card>\n        );\n    }\n\n    renderTable = () => {\n        return <Table.Row key={this.props.fileItem.basename} isSelectable justifyContent=\"space-between\" height={32}>\n              <Table.TextCell textAlign=\"center\" maxWidth={48}>\n                <FolderOpenIcon color=\"#F7D154\" size={16}/>\n              </Table.TextCell>\n              <Table.TextCell textAlign=\"left\">\n                  <Link href=\"#\" onClick={(evt) => this.props.handleNavigate(this.props.fileItem.basename)} borderBottom=\"none\">                  \n                  {this.props.fileItem.basename}\n                  </Link>\n                </Table.TextCell>\n                <Table.TextCell textAlign=\"left\">\n                    Folder\n                </Table.TextCell>\n                <Table.TextCell textAlign=\"left\">\n                    &nbsp;                    \n                </Table.TextCell>\n                <Table.TextCell textAlign=\"left\">\n                      {this.renderHttpDate(this.props.fileItem.lastmod)}\n                </Table.TextCell>\n                <Table.TextCell textAlign=\"center\">\n                    &nbsp;\n                </Table.TextCell>\n            </Table.Row>\n    }\n}","\nimport { Card, Icon, Link, Pane, Text, InfoSignIcon, DownloadIcon, Table } from 'evergreen-ui';\n\nimport RegularFile from './RegularFile';\n\nimport { DavConfigurationContext } from '../AppSettings';\n\nexport default class Image extends RegularFile {\n    static contextType = DavConfigurationContext;\n\n    constructor() {\n        super();\n        this.state = {\n            thumb: null\n        }\n    }\n\n    componentDidMount = () => {\n        this.setState({\n            thumb: null\n        }, () => this.generateThumb());\n    }\n\n    generateThumb = () => {\n        const req = {\n            \"filename\": this.props.fileItem.filename\n        }\n\n        const that = this;\n        fetch(this.context.getThumbApiUrl(), { \n            method: 'POST',\n            body: JSON.stringify(req),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n        .then(res => res.blob())\n        .then(res => {\n            var reader = new FileReader();\n            reader.readAsDataURL(res);\n            reader.onloadend = function() {\n                var base64data = reader.result;\n\n                // put that into state\n                that.setState(prev => {\n                    return {\n                        thumb: base64data\n                    }\n                });   \n            }                   \n        })\n        .catch(err => console.log(`Could not generate thumb for file ${this.props.fileItem.filename}\\nReason: ${err}`));\n    }\n\n    renderGrid = () => {\n        let styleThumb = {};\n        if (this.state.thumb !== null) {\n            const imgUrl = 'url(' + this.state.thumb + ')';\n            styleThumb = {\n                backgroundImage: imgUrl,\n                backgroundPosition: 'center',\n                backgroundSize: 'cover',\n                width: '200px',\n                height: '200px',\n                marginTop: '-15px'\n            }        \n        }        \n\n        return (\n            <Card\n                elevation={2}\n                backgroundColor=\"white\"\n                width={200}\n                height={240}\n                margin={24}\n                display=\"flex\"\n                justifyContent=\"center\"\n                alignItems=\"center\"\n                flexDirection=\"column\"\n            > \n                <div style={styleThumb}>&nbsp;</div>\n                <Pane display=\"inline-flex\" alignItems=\"center\" justifyContent=\"space-between\" width={190} height={18} margin={5}>\n                    <Link href=\"#\" borderBottom=\"none\" onClick={(evt) => {this.props.handleShowDetails(this.props.fileItem)}}><Icon icon={InfoSignIcon} color=\"info\"/></Link>\n                    <Text overflow=\"hidden\" maxWidth={155} maxHeigh={24}>{this.props.fileItem.basename}</Text>\n                    <Link href={this.context.davClient.getFileDownloadLink(this.props.fileItem.filename)} target=\"_blank\" borderBottom=\"none\"><DownloadIcon color=\"success\"/></Link>\n                </Pane>\n            </Card>\n        );\n    }\n\n    renderTable = () => {\n\n        let styleThumb = {};\n        if (this.state.thumb !== null) {\n            const imgUrl = 'url(' + this.state.thumb + ')';\n            styleThumb = {\n                backgroundImage: imgUrl,\n                backgroundPosition: 'center',\n                backgroundSize: 'cover',\n                width: '24px',\n                height: '20px',\n                margin: '0px'\n            }        \n        } \n\n        return <Table.Row key={this.props.fileItem.basename} isSelectable justifyContent=\"space-between\" height={32}>\n              <Table.TextCell textAlign=\"center\" maxWidth={48}>\n                <div style={styleThumb}></div>\n              </Table.TextCell>\n              <Table.TextCell textAlign=\"left\">\n                  <Link href={this.context.davClient.getFileDownloadLink(this.props.fileItem.filename)} target=\"_blank\" borderBottom=\"none\">\n                      {this.props.fileItem.basename}\n                  </Link>                \n                </Table.TextCell>\n                <Table.TextCell textAlign=\"left\">\n                    {this.renderMimeType(this.props.fileItem.mimeType)}\n                </Table.TextCell>\n                <Table.TextCell textAlign=\"left\">\n                    {this.renderFileItemSize()}\n                </Table.TextCell>\n                <Table.TextCell textAlign=\"left\">\n                    {this.renderHttpDate(this.props.fileItem.lastmod)}\n                </Table.TextCell>\n              <Table.TextCell textAlign=\"center\">\n                  <Link href=\"#\" onClick={(evt) => {this.props.handleShowDetails(this.props.fileItem)}} marginRight={5}><Icon icon={InfoSignIcon} color=\"info\"/></Link>&nbsp;\n                  <Link href={this.context.davClient.getFileDownloadLink(this.props.fileItem.filename)} target=\"_blank\"><DownloadIcon color=\"success\"/></Link>\n              </Table.TextCell>\n            </Table.Row>\n    }\n}","import { Component } from \"react\"\nimport { Pane, Table } from \"evergreen-ui\";\n\nimport Folder from './Folder';\nimport Image from './Image';\nimport RegularFile from \"./RegularFile\";\n\nimport { DavConfigurationContext } from '../AppSettings';\n\n/**\n * Component to display the directory content (based on two props : folders and files) either by displaying a list of files \n * or a grid with thumbnails. The user choose how to display directory contents using the displayMode property.\n */\nexport default class DavDirectoryPane extends Component {\n    static contextType = DavConfigurationContext;\n\n    /**\n     * Ensure filter is cleared out before navigating to a new folder\n     */\n    navigate = (folderName) => {\n        this.setState({\n            filter: '',\n            filterRegExp: new RegExp('.*', 'i')\n        }, () => { this.props.handleNavigate(folderName) }\n        );\n    }\n\n    renderFolders = () => {\n        let folders = this.props.folders\n            .filter(folder => folder.basename.search(this.context.filterRegExp) !== -1)\n            .map((directory, index) => {\n            return <Folder key={'dir_' + index} \n                           fileItem={directory} \n                           displayMode={this.props.displayMode}\n                           handleNavigate={this.navigate} \n                           handleShowDetails={this.props.handleShowDetails} />\n        });\n        return folders;\n    }\n\n    renderFiles = () => {\n        let images = this.props.files\n            .filter(file => file.basename.search(this.context.filterRegExp) !== -1)\n            .map((file, index) => {\n            if (this.context.isImageFile(file.basename)) {\n                return <Image key={'file_' + index} \n                              fileItem={file}\n                              displayMode={this.props.displayMode}\n                              handleShowDetails={this.props.handleShowDetails} />\n            } else {\n                return <RegularFile key={'file_' + index} \n                                    fileItem={file}\n                                    displayMode={this.props.displayMode} \n                                    handleShowDetails={this.props.handleShowDetails} />\n            }\n        });\n        return images;\n    }  \n\n    renderDirectoryContentsGrid = () => {\n        return <Pane display=\"flex\" flexWrap=\"wrap\" justifyContent=\"space-evenly\" background=\"overlay\">\n                {this.renderFolders()}\n                {this.renderFiles()}\n            </Pane>\n    }\n\n    renderDirectoryContentsTable = () => {\n        return <Table>\n            <Table.Head height={32}>\n                <Table.TextHeaderCell textAlign=\"center\" maxWidth={48}>&nbsp;</Table.TextHeaderCell>\n                <Table.TextHeaderCell textAlign=\"left\">Name</Table.TextHeaderCell>\n                <Table.TextHeaderCell textAlign=\"left\">Type</Table.TextHeaderCell>\n                <Table.TextHeaderCell textAlign=\"left\">Size</Table.TextHeaderCell>\n                <Table.TextHeaderCell textAlign=\"left\">Modified</Table.TextHeaderCell>\n                <Table.TextHeaderCell textAlign=\"center\">Actions</Table.TextHeaderCell>\n            </Table.Head>\n        <Table.Body>\n            {this.renderFolders()}\n            {this.renderFiles()}\n        </Table.Body>\n      </Table>\n    }\n\n    render = () => {\n        let directoryContents;\n        switch (this.props.displayMode) {\n            case 'grid': \n                directoryContents = this.renderDirectoryContentsGrid();\n                break;\n\n            case 'table':\n                directoryContents = this.renderDirectoryContentsTable();\n                break;\n\n            default:\n                console.log(`Invalid display mode ${this.props.displayMode}. Using grid as a default.`);\n                directoryContents = this.renderDirectoryContentsGrid();\n                break;\n        }\n\n        return directoryContents;\n    }\n}","import { Component } from \"react\";\nimport { ChevronRightIcon, HomeIcon } from 'evergreen-ui';\nimport { Pane, Link } from 'evergreen-ui';\n\nexport default class DavBreadCrumb extends Component {\n\n    render = () => {\n        let path = this.props.currentDirectory;\n\n        const chevronIcon = <ChevronRightIcon size={18} marginLeft={5} marginRight={5} />\n        const homeIcon = <HomeIcon size={18} marginLeft={5} marginRight={5} />\n\n        let currentDirs = path === '/' ? [''] : path.split('/');\n        let navDirs = [];\n        let breadCrumb = currentDirs.map((dir, index) => {\n            const icon = index === 0 ? homeIcon : chevronIcon;\n            navDirs.push(dir);\n            const fullPath = navDirs.join('/');\n            return <Link href=\"#\" display=\"flex\" alignItems=\"center\" borderBottom=\"none\" key={index + 1} onClick={() => {                \n                this.props.handleNavigate(dir === '' ? '/' : fullPath);\n            }}>{icon}{dir}</Link>\n        });\n\n        return <Pane display=\"flex\" padding={8} background=\"tint2\">\n            {breadCrumb}\n        </Pane>\n    }\n}","import { Component, Fragment } from \"react\";\n\nimport { Pane, Link } from \"evergreen-ui\";\nimport { GridViewIcon, ListIcon } from \"evergreen-ui\";\n\nimport { DavConfigurationContext } from '../AppSettings';\n\nimport DavBreadCrumb from \"./DavBreadCrumb\";\nimport React from \"react\";\n\nexport default class DavToolBar extends Component {\n    static contextType = DavConfigurationContext;\n\n    renderDisplayTools = () => {\n        return <Fragment>\n            <Link href=\"#\" style={{ display: 'flex', alignItems: 'center' }} onClick={(evt) => this.props.handleDisplayMode('grid')}>\n                <GridViewIcon size={18} style={{ marginLeft: '5px', marginRight: '5px' }} />\n            </Link>\n            &nbsp;\n            <Link href=\"#\" style={{ display: 'flex', alignItems: 'center' }} onClick={(evt) => this.props.handleDisplayMode('table')}>\n                <ListIcon size={18} style={{ marginLeft: '5px', marginRight: '5px' }} />\n            </Link>            \n        </Fragment>\n    }\n\n    render = () => {\n        return <Pane zIndex={1} flexShrink={0} background=\"tint2\" display=\"grid\" gridTemplateColumns=\"auto 1fr\">                                \n                <DavBreadCrumb handleNavigate={this.props.handleNavigate} currentDirectory={this.props.currentDirectory} />\n                <Pane justifySelf=\"end\" display=\"inline-flex\" alignItems=\"center\">\n                   {this.renderDisplayTools()}\n                </Pane>\n            </Pane>\n    }\n}","const Tree = ({children}) => {\n    return (\n    <div style={{paddingTop: '10px'}}>{children}</div>\n    );\n} \n\nexport default Tree;","\nimport React, {Component} from 'react';\n\nimport { Text, ChevronDownIcon, ChevronRightIcon, FolderCloseIcon } from 'evergreen-ui';\nimport { Icon, FolderOpenIcon } from 'evergreen-ui';\nimport { DavConfigurationContext } from '../../AppSettings';\n\nconst styles = {\n    folderLabel: {\n        display: 'grid',\n        justifyItems: 'start',\n        gridTemplateColumns: 'auto auto 1fr',\n        span: {\n          marginLeft: '5px'\n        },\n        fontFamily: 'Lato'\n    },\n    collapsibleOpen: {\n        height: 'auto',\n        overflow: 'hidden',\n        paddingLeft: '20px'\n    },\n    collapsibleClosed: {\n        height: '0px',\n        overflow: 'hidden',\n        paddingLeft: '20px'\n    }\n  }\n\nclass TreeFolder extends Component {\n  static contextType = DavConfigurationContext;\n\n  constructor() {\n    super();\n    this.state = {\n      isOpen: false,\n      subDirs: []\n    }\n  }\n\n  getDirectoryContents = async () => {\n    let dirs = [];\n\n    if (this.context.connectionValid) {\n        const directoryItems = await this.context.davClient.getDirectoryContents(this.props.absolutePath);\n        dirs = directoryItems.filter(item => { return item.type === 'directory' });\n\n        this.setState({\n          subDirs: dirs\n        });\n    }\n  }\n\n  handleToggle = (evt) => {\n    this.setState({\n      isOpen: !this.state.isOpen\n    }, () => {\n      if (this.state.isOpen && this.state.subDirs.length === 0) {\n        this.getDirectoryContents();\n      }\n    });\n  }\n\n  handleClick = (evt) => {\n    if (this.state.subDirs.length === 0) {\n      this.getDirectoryContents();\n      this.setState({\n        isOpen: true\n      });\n    }\n\n    this.props.handleNavigate(this.props.absolutePath);\n  }\n\n  renderSubDirectories = () => {\n    return this.state.subDirs.map((dir, index) => {\n      return <TreeFolder key={`${this.props.id}-${index}`} basename={dir.basename} absolutePath={`${this.props.absolutePath}/${dir.basename}`} handleNavigate={this.props.handleNavigate} />\n    });\n  }\n\n  render = () => {\n    \n    const plusIcon = this.state.isOpen ? ChevronDownIcon : ChevronRightIcon;\n    const folderIcon = this.state.isOpen ? FolderOpenIcon : FolderCloseIcon;\n\n    return <div>\n              <div style={styles.folderLabel}>\n                <Icon onClick={this.handleToggle} icon={plusIcon} size={16} marginRight=\"10\" cursor=\"pointer\"/>\n                <div style={styles.folderLabel} onClick={this.handleClick}>\n                  <Icon icon={folderIcon} size={16} color=\"#F7D154\" cursor=\"pointer\"/>\n                  <Text style={styles.folderLabel.span} cursor=\"pointer\">{this.props.basename}</Text>\n                </div>\n              </div>\n              <div style={this.state.isOpen ? styles.collapsibleOpen : styles.collapsibleClosed}>\n                {this.renderSubDirectories()}\n              </div>\n            </div>\n  }\n}\n\nexport default TreeFolder;","\nimport { Component} from 'react';\n\nimport { Pane, SideSheet, Heading, SearchInput, Position, Popover, Avatar, Menu, Badge, Spinner } from 'evergreen-ui';\nimport { InfoSignIcon, LogOutIcon } from 'evergreen-ui';\n\nimport { DavConfigurationContext } from '../AppSettings';\n\nimport WelcomePage from './welcome-page/WelcomePage';\nimport FileDetailsPane from './FileDetailsPane';\nimport DavDirectoryPane from './DavDirectoryPane';\nimport DavToolBar from './DavToolBar';\n\nimport Tree from './tree/Tree';\nimport TreeFolder from './tree/TreeFolder';\n\n/**\n * The DAV Explorer Pane is the main component. It composes the page and has functions to interect with\n * the DAV Client. It uses sub components such as DavToolBar and DavDirectoryPane to render things returned \n * by the DavClient.\n */\nexport default class DavExplorerPane extends Component {\n    static contextType = DavConfigurationContext;\n\n    constructor() {\n        super();\n\n        this.state = {\n            currentDirectory: null,\n            directories: [],\n            files: [],\n            rootDirs: [],\n            showDetails: false,            \n            displayMode: 'table'\n        }\n    }\n\n    componentDidUpdate = () => {\n        if (this.context.connectionValid && this.context.davClient !== null && this.state.currentDirectory === null) {\n            this.setState({\n                currentDirectory: '/'\n            }, () => {\n                this.getDirectoryContents();\n            });\n        }\n    }\n    \n    getDirectoryContents = async () => {\n\n        let dirs = [];\n        let files = [];\n\n        if (this.context.connectionValid) {\n            const directoryItems = await this.context.davClient.getDirectoryContents(this.state.currentDirectory);\n            dirs = directoryItems.filter(item => { return item.type === 'directory' });\n            files = directoryItems.filter(item => { return item.type === 'file' });\n\n            if ('/' === this.state.currentDirectory) {\n                this.setState({\n                    rootDirs: dirs\n                });\n            }\n        }\n\n        this.setState({\n            directories: dirs,\n            files: files\n        }, () => {\n            console.log(`${dirs.length} directories and ${files.length} files from ${this.state.currentDirectory}`);\n        });\n    }\n\n    navigate = (folderName) => {\n        const separator = this.state.currentDirectory.endsWith('/') || folderName.startsWith('/') ? '' : '/';\n        let newDir = this.state.currentDirectory + separator + folderName;\n        this.setState((prev) => {\n            return {\n                currentDirectory: newDir,\n                files: [],\n                directories: []\n            }\n        }, () => {\n            console.log(`Navigated to ${newDir}, now get directory contents...`);\n            this.getDirectoryContents();\n        });\n    }\n\n    navigateAbsolute = (absolutePath) => {\n        this.setState((prev) => {\n            return {\n                currentDirectory: absolutePath,\n                files: [],\n                directories: []\n            }\n        }, () => {\n            console.log(`Absolute navigated to ${absolutePath}, now get directory contents...`);\n            this.getDirectoryContents();\n        });\n    }\n\n    toggleFileDetails = (fileItem) => {\n        let modified = fileItem;\n        if (modified.filename.startsWith(this.context.homeDirectory)) {\n            modified.filename = modified.filename.substring(this.context.homeDirectory.length);\n        }\n\n        this.setState({\n            showDetails: true,\n            detailedFileItem: modified\n        });\n    }\n\n    disconnect = () => {\n        this.context.disconnect();\n    }\n\n    changeDisplayMode = (displayMode) => {\n        this.setState({\n            displayMode: displayMode\n        });\n    }\n\n    renderAvatarMenu = () => {\n        return <Popover \n                    justifySelf=\"end\"\n                    position={Position.BOTTOM_RIGHT}\n                    content={\n                    <Menu>\n                        <Menu.Group>\n                        <Menu.Item icon={InfoSignIcon} intent=\"success\"><Badge color=\"green\">{this.context.username}</Badge></Menu.Item>              \n                        <Menu.Item>{this.context.getClientUrl()}</Menu.Item>\n                        </Menu.Group>\n                        <Menu.Divider />\n                        <Menu.Group>\n                        <Menu.Item icon={LogOutIcon} intent=\"danger\" onClick={() => {this.disconnect()}}>\n                            Disconnect\n                        </Menu.Item>\n                        </Menu.Group>\n                    </Menu>\n                    }\n                >\n                <Avatar name={this.context.username} size={32} marginLeft={15} marginRight={15} style={{cursor: 'pointer'}} justifySelf=\"end\"/>\n            </Popover>\n    }\n\n    render = () => {\n\n        if (!this.context.connectionValid) {\n            return <WelcomePage />\n        }\n\n        if (!this.state.currentDirectory) {\n            return <Pane gridTemplateColumns=\"auto\">\n                <Spinner marginX=\"auto\" marginTop={120} />\n                <Heading size={600} marginX=\"auto\" marginTop={15}>Nico's Drive is loading...</Heading>\n          </Pane>\n        }\n\n        return <Pane display=\"grid\" gridTemplateColumns=\"1fr 4fr\" height=\"100%\">\n            <Pane background=\"blueTint\" elevation={0} padding={15} display=\"grid\" gridTemplateRows=\"auto auto 1fr\" gridTemplateColumns=\"auto\" overflowX=\"scroll\">  \n                <Pane background=\"blueTint\">\n                    <Heading size={900} color=\"neutral\" textAlign=\"left\">My files</Heading>\n                </Pane>\n                <Pane background=\"blueTint\" marginTop={15}>\n                    <Heading size={600} color=\"neutral\" textAlign=\"left\">File manager</Heading>\n                </Pane>\n                <Tree>\n                    {this.state.rootDirs.map((dir, index) => {\n                        return <TreeFolder key={`treefolder-${index}`} id={`treefolder-${index}`} absolutePath={`/${dir.basename}`} basename={dir.basename} handleNavigate={this.navigateAbsolute} />\n                    })}\n                </Tree>\n            </Pane>\n\n            <Pane display=\"grid\" gridTemplateRows=\"auto auto 1fr\">\n                <Pane background=\"tint2\" display=\"grid\" gridTemplateColumns=\"1fr auto\" paddingTop={15} paddingBottom={15} paddingLeft={15} justifyItems=\"stretch\">\n                    <SearchInput placeholder=\"Search something...\" width=\"75%\" justifySelf=\"center\" onChange={(e) => this.context.filterFileItems(e.target.value)} value={this.context.filter}/>       \n                    {this.renderAvatarMenu()}\n                </Pane>\n                <DavToolBar currentDirectory={this.state.currentDirectory} \n                            handleDisplayMode={this.changeDisplayMode}\n                            handleNavigate={this.navigateAbsolute} />\n\n                <DavDirectoryPane displayMode={this.state.displayMode} \n                                folders={this.state.directories} \n                                files={this.state.files}\n                                handleNavigate={this.navigate} \n                                handleShowDetails={this.toggleFileDetails} />\n                \n            </Pane>\n\n            <SideSheet id=\"side-details\"\n                isShown={this.state.showDetails}\n                onCloseComplete={() => this.setState({ showDetails: false })}\n            >\n                <FileDetailsPane fileItem={this.state.detailedFileItem} davClient={this.state.davClient} />\n            </SideSheet>\n        </Pane>\n    }\n}","import { Component } from 'react';\nimport { Dialog, Pane, TextInputField, Paragraph, Button } from 'evergreen-ui';\nimport { DavConfigurationContext } from '../AppSettings';\n\nimport { createClient, AuthType } from \"webdav\";\n\nexport default class LoginDialog extends Component {\n    static contextType = DavConfigurationContext;\n    \n    constructor() {\n        super();\n        this.state = {\n            isLoading: false,\n            username: '',\n            password: '',\n            url: '',\n            errorMessage: '',\n            davContext: 'dav'\n        }\n    }\n\n    componentDidUpdate = () => {\n        if (this.state.url === '') {\n            this.buildUrl();\n        }\n    }\n\n    buildUrl = () => {\n        const protocol = 'localhost' === window.location.hostname ? 'http' : 'https';\n        const port = 'localhost' === window.location.hostname ? '8080' : window.location.port;\n        const newUrl = `${protocol}://${window.location.hostname}:${port}/${this.state.davContext}/${this.state.username}/`;\n        this.setState({\n            url: newUrl\n        });\n    }\n\n    testConnection = async () => {\n        try {\n\n            const clientOptions = {\n                authType: AuthType.Basic,\n                username: this.state.username,\n                password: this.state.password\n            }\n\n            const client = createClient(this.state.url, clientOptions);\n\n            this.context.setDavClient(client, this.state.url);\n\n            // reset form in order not to have credentials after clicking logout\n            this.setState({\n                url: '',\n                username: '',\n                password: '',\n                errorMessage: ''\n            });\n\n        } catch (error) {\n            console.error('Could not connect to webdav: ' + JSON.stringify(error));\n            this.context.setDavClient(null);\n            this.context.setConnectionValid(false);\n            this.setState({\n                errorMessage: 'Something went wrong while connecting. Check your credentiuals and try again.'\n            });\n        } finally {\n            this.setState({\n                isLoading: false\n            });\n        }\n    }\n\n    componentDidMount = () => {\n        this.setState({\n            username: this.context.username,\n            password: this.context.password,\n            url: this.context.getClientUrl() + this.context.homeDirectory,\n            errorMessage: ''\n        });\n    }\n\n    onConfirm = () => {\n        this.setState({ \n            isLoading: true            \n        }, () => this.testConnection());\n    }\n\n    onCloseComplete = () => {\n        this.context.setShowConnectionDialog(false);\n        this.setState({ isLoading: false, errorMessage: '' });\n    }\n\n    onTxtLoginChange = (evt) => {\n        this.setState({ \n            username: evt.target.value \n        }, () => { \n            this.buildUrl() \n        });\n    }\n\n    renderDialog = () => {\n        return <Dialog\n            isShown={this.context.showConnectionDialog}\n            title=\"WebDAV Connection setup...\"\n            onCloseComplete={() => this.onCloseComplete()}\n            isConfirmLoading={this.state.isLoading}\n            onConfirm={(close) => this.onConfirm(close)}           \n            hasFooter={false}\n        >\n            <Pane display=\"grid\" gridTemplateColumns=\"auto\">\n                    <TextInputField id=\"txt-login\" \n                                    value={this.state.username} \n                                    onChange={this.onTxtLoginChange}\n                                    placeholder=\"Login name...\" \n                                    label=\"Login:\"/>\n\n                    <TextInputField id=\"txt-password\" \n                                    type=\"password\" \n                                    value={this.state.password} \n                                    onChange={e => this.setState({ password: e.target.value })}\n                                    placeholder=\"Password...\" \n                                    label=\"Password:\"/>\n\n                    <TextInputField id=\"txt-url\" \n                                    value={this.state.url} \n                                    onChange={e => this.setState({ url: e.target.value })}\n                                    placeholder=\"WebDAV URL...\"\n                                    label=\"WebDAV base URL:\"/>\n                    <Pane>\n                        <Paragraph>{this.state.errorMessage}</Paragraph>\n                        <Button is=\"div\" marginTop={16} onClick={() => this.onConfirm()} disabled={this.state.isLoading} appearance=\"primary\" intent=\"success\">\n                        {this.state.isLoading ? 'Please wait...' : 'Connect'}\n                        </Button>\n                    </Pane>\n            </Pane>          \n        </Dialog>\n    }\n\n    render = () => {\n        return this.renderDialog();\n    }\n}","\nimport { React, Component } from 'react';\nimport { Pane } from 'evergreen-ui';\n\n// import logo from './logo.svg';\nimport './App.css';\n\nimport {DavConfigurationProvider} from './AppSettings';\n\nimport DavExplorerPane from './components/DavExplorerPane';\nimport LoginDialog from './components/LoginDialog';\n\nclass App extends Component {\n\n  render = () => {\n    return (      \n        <div className=\"App\" height=\"100%\">\n          <Pane clearfix width=\"100%\" height=\"100%\">\n              <DavConfigurationProvider>\n                <LoginDialog />\n                <DavExplorerPane />\n              </DavConfigurationProvider>\n          </Pane>\n        </div>      \n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { defaultTheme } from 'evergreen-ui'\nimport { merge } from 'lodash'\n\nconst appTheme = merge({}, defaultTheme, {\n  typography: {\n    fontFamilies: {\n      display: 'Lato, sans-serif',\n      ui: 'Lato, sans-serif',      \n      mono: '\"SF Mono\", monospace'\n    }\n  },\n  components: {\n    Text: {\n      baseStyle: {\n        fontFamily: 'Lato, sans-serif'\n      }\n    },\n    Heading: {\n      baseStyle: {\n        fontFamily: 'Lato, sans-serif'\n      }\n    },\n    Link: {\n      baseStyle: {\n        fontFamily: 'Lato, sans-serif'\n      }\n    }\n  }\n})\n\nexport default appTheme","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// theming provided by this page: https://github.com/segmentio/evergreen/issues/542\n// see also: https://evergreen.segment.com/introduction/theming\nimport { ThemeProvider } from 'evergreen-ui';\nimport appTheme from './AppTheme';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider value={appTheme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}