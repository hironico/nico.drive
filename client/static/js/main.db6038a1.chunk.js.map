{"version":3,"sources":["logo.svg","AppSettings.js","components/welcome-page/WelcomePage.js","components/RatingPane.js","components/FileDetailsPane.js","components/RegularFile.js","components/Folder.js","components/Image.js","components/DavDirectoryPane.js","components/DavBreadCrumb.js","components/DavToolBar.js","components/tree/Tree.js","components/tree/TreeFolder.js","components/DavExplorerPane.js","components/LoginDialog.js","App.js","reportWebVitals.js","index.js"],"names":["DavConfigurationContext","AuthType","Basic","RegExp","React","createContext","connectionValid","DavConfigurationProvider","filterFileItems","value","valueStr","setState","filter","filterRegExp","setDavClient","client","url","uri","URL","davBaseUrl","protocol","host","pathTab","pathname","split","davWebContext","splice","homeDir","join","davClient","homeDirectory","showConnectionDialog","setConnectionValid","disconnect","setShowConnectionDialog","showConDialog","console","log","getBasePath","state","getClientUrl","getThumbApiUrl","getExifApiUrl","getMetadataApiUrl","isImageFile","filename","startsWith","index","lastIndexOf","extention","toUpperCase","substring","supportedFormats","indexOf","render","Provider","props","children","authType","username","password","Component","WelcomePage","showLoginDialog","context","id","className","href","Button","is","onClick","window","location","assign","appearance","height","padding","iconBefore","InfoSignIcon","fontSize","intent","LogInIcon","src","alt","contextType","RatingPane","stars","rating","maxRating","size","lightedStar","StarIcon","color","push","unlightedStar","StarEmptyIcon","Pane","display","alignItems","FileDetailsPane","componentDidMount","loadImageInformation","loadMetaDataInformation","getDownloadLink","getFileDownloadLink","fileItem","metaUrl","exifRequest","fetch","method","body","JSON","stringify","headers","then","res","json","imageData","catch","err","metadata","tags","metadataRequest","renderFileItemSize","unite","taille","toFixed","renderImageTabs","isImage","basename","Tablist","marginBottom","flexBasis","marginRight","tabs","tab","map","Tab","onSelect","selectedIndex","isSelected","aria-controls","panelTab","renderFileDetails","renderImageDetails","renderMetadataDetails","role","aria-labelledby","aria-hidden","Table","marginTop","Head","TextHeaderCell","Body","Row","TextCell","lastmod","image","rows","Object","keys","key","renderTags","placeholder","length","TagInput","inputProps","values","flexGrow","margin","disabled","getRating","Number","parseInt","downloadIcon","DownloadIcon","zIndex","flexShrink","elevation","backgroundColor","borderBottom","Heading","target","marginLeft","gridTemplateColumns","RegularFile","renderGrid","Card","width","justifyContent","flexDirection","style","background","icon","DocumentIcon","Link","evt","handleShowDetails","Text","overflow","maxWidth","maxHeight","renderTable","isSelectable","textAlign","displayMode","Folder","handleNavigate","FolderOpenIcon","Image","thumb","generateThumb","req","that","blob","reader","FileReader","readAsDataURL","onloadend","base64data","result","prev","styleThumb","backgroundImage","backgroundPosition","backgroundSize","DavDirectoryPane","navigate","folderName","renderFolders","folders","folder","search","directory","renderFiles","files","file","renderDirectoryContentsGrid","flexWrap","renderDirectoryContentsTable","directoryContents","DavBreadCrumb","path","currentDirectory","chevronIcon","ChevronRightIcon","homeIcon","HomeIcon","currentDirs","navDirs","breadCrumb","dir","fullPath","DavToolBar","renderDisplayTools","handleDisplayMode","GridViewIcon","ListIcon","justifySelf","Tree","paddingTop","styles","folderLabel","justifyItems","span","collapsibleOpen","paddingLeft","collapsibleClosed","TreeFolder","getDirectoryContents","a","dirs","absolutePath","directoryItems","item","type","subDirs","handleToggle","isOpen","handleClick","renderSubDirectories","plusIcon","ChevronDownIcon","folderIcon","FolderCloseIcon","cursor","DavExplorerPane","componentDidUpdate","rootDirs","directories","separator","endsWith","newDir","navigateAbsolute","toggleFileDetails","modified","showDetails","detailedFileItem","changeDisplayMode","renderAvatarMenu","Popover","position","Position","BOTTOM_RIGHT","content","Menu","Group","Item","Badge","Divider","LogOutIcon","Avatar","name","gridTemplateRows","overflowX","paddingBottom","SearchInput","onChange","e","SideSheet","isShown","onCloseComplete","Spinner","marginX","LoginDialog","buildUrl","hostname","port","newUrl","davContext","testConnection","clientOptions","createClient","errorMessage","error","isLoading","onConfirm","onTxtLoginChange","renderDialog","Dialog","title","isConfirmLoading","close","hasFooter","TextInputField","label","Paragraph","App","clearfix","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.db6038a1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from \"react\";\nimport { AuthType } from \"webdav\";\n\nconst defaultValue = {\n    davBaseUrl: 'http://localhost:8080',\n    davWebContext: '/dav',\n    authType: AuthType.Basic,\n    username: 'hironico',\n    password: 'changeme',\n    davClient: null,\n    connectionValid: false,\n    showConnectionDialog: false,\n    homeDirectory: '/hironico',\n    currentDirectory: '/',\n    supportedFormats: ['JPEG', 'JPG', 'PNG', 'WEBP', 'AVIF', 'TIFF', 'TIF', 'GIF', 'SVG', 'CR2'],\n    filter: '',\n    filterRegExp: new RegExp('.*', 'i'),\n    filterFileItems: (filter) => { },\n    setDavClient: (client) => { },\n    setConnectionValid: () => { },\n    setShowConnectionDialog: (showConDlg) => { },\n    getClientUrl: () => { },\n    getThumbApiUrl: () => { },\n    getExifApiUrl: () => { },\n    getMetadataApiUrl: () => { },\n    isImageFile: () => { },\n    setCurrentDirectory: () => { },\n    disconnect: () => { }\n}\n\nconst DavConfigurationContext = React.createContext({ connectionValid: false });\n\nclass DavConfigurationProvider extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            davBaseUrl: 'http://localhost:8080',\n            davWebContext: '/dav',\n            authType: AuthType.Basic,\n            username: 'hironico',\n            password: 'hironico',\n            davClient: null,\n            connectionValid: false,\n            showConnectionDialog: false,\n            homeDirectory: '/hironico',\n            supportedFormats: ['JPEG', 'JPG', 'PNG', 'WEBP', 'AVIF', 'TIFF', 'GIF', 'SVG', 'CR2'],\n            filter: '',\n            filterRegExp: new RegExp('.*', 'i'),\n            filterFileItems: this.filterFileItems,\n            setDavClient: this.setDavClient,\n            setConnectionValid: this.setConnectionValid,\n            setShowConnectionDialog: this.setShowConnectionDialog,\n            getClientUrl: this.getClientUrl,\n            getThumbApiUrl: this.getThumbApiUrl,\n            getExifApiUrl: this.getExifApiUrl,\n            getMetadataApiUrl: this.getMetadataApiUrl,\n            isImageFile: this.isImageFile,\n            getBasePath: this.getBasePath,\n            disconnect: this.disconnect\n        }\n    }\n\n    filterFileItems = (value) => {\n        let valueStr = value === null || value === '' ? '.*' : value;\n        this.setState({\n            filter: value,\n            filterRegExp: new RegExp(valueStr, 'i')\n        });\n    }\n\n    setDavClient = (client, url) => {\n        const urlValid = (typeof url !== 'undefined' && url !== null);\n        const uri = urlValid ? new URL(url) : null;\n        const davBaseUrl = uri ? `${uri.protocol}//${uri.host}` : '';\n        let pathTab = uri ? uri.pathname.split('/') : '';\n        const davWebContext = uri ? `/${pathTab[0]}` : '';\n        pathTab = uri ? pathTab.splice(0, 1) : [];\n        const homeDir = uri ? pathTab.join('/') : '';\n\n        this.setState({\n            davClient: client,\n            davBaseUrl: client ? davBaseUrl : '',\n            davWebContext: client ? davWebContext : '',\n            homeDirectory: client ? homeDir : '',\n            connectionValid: client ? true : false,\n            showConnectionDialog: client ? false : true\n        });\n    }\n\n    setConnectionValid = (connectionValid) => {\n        this.setState({\n            connectionValid: connectionValid\n        });\n    }\n\n    disconnect = () => {\n        this.setDavClient(null, null);\n    }\n\n    setShowConnectionDialog = (showConDialog) => {\n        console.log('Must set showConnectionDialog to : ' + showConDialog);\n        this.setState({\n            showConnectionDialog: showConDialog\n        });\n    }\n\n    getBasePath = () => {\n        return `${this.state.davWebContext}${this.state.homeDirectory}`;\n    }\n\n    getClientUrl = () => {\n        return `${this.state.davBaseUrl}${this.state.davWebContext}`;\n    }\n\n    getThumbApiUrl = () => {\n        return `${this.state.davBaseUrl}/thumb`;\n    }\n\n    getExifApiUrl = () => {\n        return `${this.state.davBaseUrl}/meta/exif`;\n    }\n\n    getMetadataApiUrl = () => {\n        return `${this.state.davBaseUrl}/meta/xmp`;\n    }\n\n    isImageFile = (filename) => {\n        if (typeof filename === 'undefined' || filename === null) {\n            return false;\n        }\n\n        if (filename.startsWith('.')) {\n            return false;\n        }\n\n        const index = filename.lastIndexOf('.');\n        if (index < 0) {\n            return false;\n        }\n\n        const extention = filename.toUpperCase().substring(index + 1);\n\n        const formatIndex = this.state.supportedFormats.indexOf(extention);\n        return formatIndex !== -1;\n    }\n\n    render = () => {\n        return <DavConfigurationContext.Provider value={this.state}>{this.props.children}</DavConfigurationContext.Provider>\n    }\n}\n\nexport { DavConfigurationContext, DavConfigurationProvider }\n","import { Component } from 'react';\n\nimport { Button, InfoSignIcon, LogInIcon } from 'evergreen-ui';\n\nimport { DavConfigurationContext } from '../../AppSettings';\n\nimport './WelcomePage.css';\n\nexport default class WelcomePage extends Component {\n    static contextType = DavConfigurationContext;\n    constructor() {\n        super();\n    }\n\n    showLoginDialog = () => {\n        this.context.setShowConnectionDialog(true);\n    }\n\n    render = () => {\n        return <header id=\"header\">\n\t\t\t\t<div className=\"content\">\n\t\t\t\t\t<h1><a href=\"#\">Nico's Drive</a></h1>\n\t\t\t\t\t<p>The private online storage solution.<br />\n\t\t\t\t\tBackup your memories ... <strong>automatically!</strong><br />\n                    Access your files anytime, anywhere, just like a shared drive,<br />\n                    On any computer.</p>\n\t\t\t\t\t<ul className=\"actions\">\n                        <li><Button is=\"div\" onClick={() => window.location.assign('https://github.com/hironico/nico.drive#readme')} appearance=\"default\" height={60} padding={28} iconBefore={InfoSignIcon} fontSize={22}>Learn more</Button></li>\n                        <li><Button is=\"div\" onClick={() => this.showLoginDialog()} appearance=\"primary\" intent=\"success\" height={60} padding={28} iconBefore={LogInIcon} fontSize={22}>Login</Button></li>\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"image phone\"><div className=\"inner\"><img src=\"images/screen.jpg\" alt=\"\" /></div></div>\n\t\t\t</header>\n    }\n}","import { Component } from 'react';\nimport { Pane, StarIcon, StarEmptyIcon } from 'evergreen-ui';\n\nexport default class RatingPane extends Component {\n\n    render = () => {\n        let stars = [];\n\n        let rating = this.props.rating ? this.props.rating : 0;\n        let maxRating = this.props.maxRating ? this.props.maxRating : 5;\n        if (maxRating < rating) {\n            maxRating = rating;\n        }\n\n        let size = this.props.size ? this.props.size : 24;\n        \n        for(let index = 0; index < rating; index++) {\n            const lightedStar = <StarIcon key={index} color=\"#FBE6A2\" size={size}/>\n            stars.push(lightedStar);\n        }\n\n        for(let index = rating; index < maxRating; index++) {\n            const unlightedStar = <StarEmptyIcon key={index} color=\"#C7CED4\" size={size}/>\n            stars.push(unlightedStar);\n        }\n\n        return <Pane display=\"inline-fex\" alignItems=\"center\">\n            {stars}\n        </Pane>\n    }\n}","import { Button, Heading, InfoSignIcon, Pane, Table, DownloadIcon, Tablist, Tab, TagInput } from 'evergreen-ui';\nimport { Fragment, Component } from 'react';\n\nimport RatingPane from './RatingPane';\n\nimport { DavConfigurationContext } from '../AppSettings';\n\nexport default class FileDetailsPane extends Component {\n    static contextType = DavConfigurationContext;\n\n    constructor() {\n        super();\n\n        this.state = {\n            imageData: [],\n            selectedIndex: 0,\n            tabs: ['Information', 'Image', 'Metadata']\n        }\n    }\n\n    componentDidMount = () => {\n        this.loadImageInformation();\n        this.loadMetaDataInformation();\n    }\n\n    getDownloadLink = () => {        \n        if (!this.context.connectionValid) {\n            // console.log('davClient is undefined in context. Cannot download file.');\n            return;\n        }\n\n        return this.context.davClient.getFileDownloadLink(this.props.fileItem.filename);\n    }\n\n    loadImageInformation = () => {\n        const metaUrl = this.context.getExifApiUrl();\n\n        const exifRequest = {\n            \"filename\": this.props.fileItem.filename\n        }\n\n        fetch(metaUrl, {\n            method: 'POST',\n            body: JSON.stringify(exifRequest),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(res => res.json())\n            .then(res => {\n                // console.log('Received exif for this file: ' + JSON.stringify(res));\n                this.setState({\n                    imageData: res\n                });\n            }).catch(err => {\n                console.log('Error while reading exif data: ' + err);\n                this.setState({\n                    metadata: { tags: '' }\n                });\n            });\n    }\n\n\n    loadMetaDataInformation = () => {\n        const metaUrl = this.context.getMetadataApiUrl();\n\n        const metadataRequest = {\n            \"filename\": this.props.fileItem.filename,\n            \"raw\": false\n        }\n\n        fetch(metaUrl, {\n            method: 'POST',\n            body: JSON.stringify(metadataRequest),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(res => res.json())\n            .then(res => {\n                /*\n                console.log('Received metadata for this file: ' + JSON.stringify(res));\n                console.log('Tags are: ' + res.tags);\n                */\n\n                this.setState({\n                    metadata: res\n                });\n            }).catch(err => {\n                console.log('Error while reading metadata: ' + err);\n                this.setState({\n                    metadata: { tags: '' }\n                });\n            });\n    }\n\n    renderFileItemSize = () => {\n        let unite = 'bytes';\n        let taille = this.props.fileItem.size;\n        if (taille > 1024) {\n            taille = (taille / 1024).toFixed(2);\n            unite = 'KB';\n        }\n        if (taille > 1024) {\n            taille = (taille / 1024).toFixed(2);\n            unite = 'MB';\n        }\n        if (taille > 1024) {\n            taille = (taille / 1024).toFixed(2);\n            unite = 'GB';\n        }\n\n        return <span>{taille}&nbsp;{unite}</span>\n    }\n\n    renderImageTabs = () => {\n        const isImage = this.context.isImageFile(this.props.fileItem.basename);\n        return <Pane padding={15}>\n            <Tablist marginBottom={16} flexBasis={240} marginRight={24}>\n                {this.state.tabs.filter((tab, index) => {\n                    return index > 0 ? isImage : true;\n                })\n                    .map((tab, index) => (\n                        <Tab\n                            key={tab}\n                            id={tab}\n                            onSelect={() => this.setState({ selectedIndex: index })}\n                            isSelected={index === this.state.selectedIndex}\n                            aria-controls={`panel-${tab}`}\n                        >\n                            {tab}\n                        </Tab>\n                    ))}\n            </Tablist>\n            {this.state.tabs.map((tab, index) => {\n\n                let panelTab;\n                switch (index) {\n                    case 0:\n                        panelTab = this.renderFileDetails();\n                        break;\n\n                    case 1:\n                        panelTab = this.renderImageDetails();\n                        break;\n\n                    case 2:\n                        panelTab = this.renderMetadataDetails();\n                        break;\n\n                    default:\n                        panelTab = <div />\n                }\n\n                return <Pane\n                    key={tab}\n                    id={`panel-${tab}`}\n                    role=\"tabpanel\"\n                    aria-labelledby={tab}\n                    aria-hidden={index !== this.state.selectedIndex}\n                    display={index === this.state.selectedIndex ? 'block' : 'none'}\n                >\n                    {panelTab}\n                </Pane>\n            })}\n\n        </Pane>\n    }\n\n    renderFileDetails = () => {\n        return <Table marginTop={15}>\n            <Table.Head>\n                <Table.TextHeaderCell>\n                    <Pane display=\"inline-flex\" alignItems=\"center\">\n                        <InfoSignIcon />&nbsp;File information\n                    </Pane>\n                </Table.TextHeaderCell>\n                <Table.TextHeaderCell>\n                    &nbsp;\n                </Table.TextHeaderCell>\n            </Table.Head>\n            <Table.Body>\n                <Table.Row key=\"row_path\">\n                    <Table.TextCell>Path:</Table.TextCell>\n                    <Table.TextCell>{this.props.fileItem.filename}</Table.TextCell>\n                </Table.Row>\n                <Table.Row>\n                    <Table.TextCell key=\"row_modif\">Last modif:</Table.TextCell>\n                    <Table.TextCell>{this.props.fileItem.lastmod}</Table.TextCell>\n                </Table.Row>\n                <Table.Row>\n                    <Table.TextCell key=\"row_size\">Size:</Table.TextCell>\n                    <Table.TextCell>{this.renderFileItemSize()}</Table.TextCell>\n                </Table.Row>\n            </Table.Body>\n        </Table>\n    }\n\n    renderImageDetails = () => {\n        if (typeof this.state.imageData.image === 'undefined') {\n            return <Fragment>&nbsp;</Fragment>\n        }\n\n        let rows = Object.keys(this.state.imageData.image).map((key, index) => {\n            return <Table.Row key={index}>\n                <Table.TextCell>{key}</Table.TextCell>\n                <Table.TextCell>{this.state.imageData.image[key]}</Table.TextCell>\n            </Table.Row>\n        });\n\n        return <Table marginTop={15}>\n            <Table.Head>\n                <Table.TextHeaderCell>\n                    <Pane display=\"inline-flex\" alignItems=\"center\">\n                        <InfoSignIcon />&nbsp;Image information\n                    </Pane>\n                </Table.TextHeaderCell>\n                <Table.TextHeaderCell>\n                    &nbsp;\n                </Table.TextHeaderCell>\n            </Table.Head>\n            <Table.Body>\n                {rows}\n            </Table.Body>\n        </Table>\n    }\n\n    renderMetadataDetails = () => {\n        if (typeof this.state.metadata === 'undefined') {\n            return <Fragment>&nbsp;</Fragment>\n        }\n\n        let rows = Object.keys(this.state.metadata).map((key, index) => {\n            return <Table.Row key={`meta-${index}`}>\n                <Table.TextCell>{key}</Table.TextCell>\n                <Table.TextCell>{this.state.metadata[key]}</Table.TextCell>\n            </Table.Row>\n        });\n\n        return <Table marginTop={15}>\n            <Table.Head>\n                <Table.TextHeaderCell>\n                    <Pane display=\"inline-flex\" alignItems=\"center\">\n                        <InfoSignIcon />&nbsp;Metadata information\n                    </Pane>\n                </Table.TextHeaderCell>\n                <Table.TextHeaderCell>\n                    &nbsp;\n                </Table.TextHeaderCell>\n            </Table.Head>\n            <Table.Body>\n                {rows}\n            </Table.Body>\n        </Table>\n    }\n\n    renderTags = () => {\n        const isImage = this.context.isImageFile(this.props.fileItem.basename);\n        if (!isImage) {\n            return <div>&nbsp;</div>\n        }\n\n        let placeholder = 'Loading tags info...';\n        let tags = [];\n        if (this.state.metadata) {            \n            if (typeof this.state.metadata.tags !== 'undefined') {\n                if ('' !== this.state.metadata.tags) {\n                    tags = this.state.metadata.tags.split(',');\n                } \n            }\n            placeholder = tags.length === 0 ? 'No tags for this image' : '';\n        }\n\n        return <TagInput\n            inputProps={{ placeholder: placeholder }}\n            values={tags}\n            flexGrow={2}\n            margin={15}\n            disabled={true}\n        />\n    }\n\n    getRating = () => {\n        const isImage = this.context.isImageFile(this.props.fileItem.basename);\n        if (!isImage) {\n            return 0;\n        }\n\n        if (!this.state.metadata) {\n            return 0;\n        }\n\n        if (!this.state.metadata['xmp:Rating']) {\n            return 0;\n        }\n        \n        return Number.parseInt(this.state.metadata['xmp:Rating']);\n    }\n\n    render = () => {\n        // console.log('Render file details: \\n' + JSON.stringify(this.props.fileItem));\n\n        const downloadIcon = <DownloadIcon size={24} />\n        const infoIcon = <InfoSignIcon size={24} />\n        \n        return <Pane zIndex={1} flexShrink={0} elevation={0} backgroundColor=\"white\">\n            <Pane padding={16} borderBottom=\"muted\">\n                <Heading size={600}>{this.props.fileItem.basename}</Heading>\n            </Pane>\n            <Pane display=\"inline-flex\" alignItems=\"center\">\n                <Button appearance=\"primary\" intent=\"success\" is=\"a\" margin={20} iconBefore={downloadIcon} href={this.getDownloadLink()} target=\"_blank\" disabled={!this.context.connectionValid}>Download</Button>                \n                <RatingPane rating={this.getRating()} maxRating={5} marginRight={10} marginLeft={10}/>\n            </Pane>\n            <Pane display=\"flex\" gridTemplateColumns=\"auto\">\n                {this.renderTags()}\n            </Pane>\n            <Pane>\n                {this.renderImageTabs()}\n            </Pane>\n        </Pane>\n    }\n}","\nimport { Card, Icon, Pane, DocumentIcon, Link, Text, InfoSignIcon, DownloadIcon, Table } from 'evergreen-ui';\nimport { Component } from 'react';\nimport { DavConfigurationContext } from '../AppSettings';\n\nexport default class RegularFile extends Component {\n    static contextType = DavConfigurationContext;\n\n    renderFileItemSize = () => {\n        let unite = 'bytes';\n        let taille = this.props.fileItem.size;\n        if (taille > 1024) {\n            taille = (taille / 1024).toFixed(2);\n            unite = 'KB';\n        }\n        if (taille > 1024) {\n            taille = (taille / 1024).toFixed(2);\n            unite = 'MB';\n        }\n        if (taille > 1024) {\n            taille = (taille / 1024).toFixed(2);\n            unite = 'GB';\n        }\n\n        return `${taille} ${unite}`;\n    }\n\n    renderGrid = () => {\n        let styleThumb = {\n            width: '200px',\n            height: '200px',\n            marginTop: '-15px',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center'\n        }\n\n        return (\n            <Card\n                elevation={2}\n                backgroundColor=\"white\"\n                width={200}\n                height={240}\n                margin={24}\n                display=\"flex\"\n                justifyContent=\"center\"\n                alignItems=\"center\"\n                flexDirection=\"column\"\n            >                \n                <Pane style={styleThumb} background=\"tint2\">\n                    <Icon icon={DocumentIcon} size={48} color=\"success\" />\n                </Pane>  \n\n                <Pane display=\"inline-flex\" alignItems=\"center\" justifyContent=\"space-between\" style={{width: '190px', height: '18px', margin: '5px'}}>\n                    <Link href=\"#\" onClick={(evt) => {this.props.handleShowDetails(this.props.fileItem)}}><Icon icon={InfoSignIcon} color=\"info\"/></Link>\n                    <Text style={{overflow: 'hidden', maxWidth: '155px', maxHeight: '24px'}}>{this.props.fileItem.basename}</Text>\n                    <Link href={this.context.davClient.getFileDownloadLink(this.props.fileItem.filename)} target=\"_blank\"><DownloadIcon color=\"success\"/></Link>\n                </Pane>\n            </Card>\n        );\n    }\n\n    renderTable = () => {\n        return <Table.Row key={this.props.fileItem.basename} isSelectable height={32}>\n              <Table.TextCell flexGrow={3} textAlign=\"left\">\n                  <Link href={this.context.davClient.getFileDownloadLink(this.props.fileItem.filename)} target=\"_blank\" borderBottom=\"none\">\n                    <DocumentIcon />&nbsp;\n                    {this.props.fileItem.basename}\n                  </Link>\n              </Table.TextCell>\n              <Table.TextCell textAlign=\"left\">\n                  {this.renderFileItemSize()}\n              </Table.TextCell>\n              <Table.TextCell textAlign=\"left\">\n                  {this.props.fileItem.lastmod}\n              </Table.TextCell>\n              <Table.TextCell flexGrow={1} textAlign=\"right\">\n                <Link href=\"#\" onClick={(evt) => {this.props.handleShowDetails(this.props.fileItem)}}><Icon icon={InfoSignIcon} color=\"info\"/></Link>&nbsp;\n                <Link href={this.context.davClient.getFileDownloadLink(this.props.fileItem.filename)} target=\"_blank\"><DownloadIcon color=\"success\"/></Link>\n              </Table.TextCell>\n            </Table.Row>\n    }\n\n    render = () => {\n        switch (this.props.displayMode) {\n            case 'grid':\n                return this.renderGrid();\n\n            case 'table':\n                return this.renderTable();\n\n            default:\n                console.log(`Invalid display mode: ${this.props.displayMode}. Using grid as a default.`);\n                return this.renderGrid();\n        }\n    }\n}","\nimport { Card, Icon, Text, Pane, FolderOpenIcon, Link, Table } from 'evergreen-ui';\nimport { Component } from 'react';\n\nimport RegularFile from './RegularFile';\n\nexport default class Folder extends RegularFile {\n\n    renderGrid = () => {\n        let styleThumb = {\n            width: '200px',\n            height: '200px',\n            marginTop: '-15px',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center'\n        }\n\n        return (\n            <Card\n                elevation={2}\n                backgroundColor=\"white\"\n                width={200}\n                height={240}\n                margin={24}\n                display=\"flex\"\n                justifyContent=\"center\"\n                alignItems=\"center\"\n                flexDirection=\"column\"\n            >   \n                <Link href=\"#\" onClick={(evt) => this.props.handleNavigate(this.props.fileItem.basename)}>             \n                    <Pane style={styleThumb} background=\"tint2\">\n                        <Icon icon={FolderOpenIcon} size={48} color=\"#F7D154\" />\n                    </Pane>\n                    <Pane display=\"inline-flex\" alignItems=\"center\" justifyContent=\"center\" style={{width: '190px', height: '18px', margin: '5px'}}>\n                        <FolderOpenIcon color=\"#F7D154\"/>\n                        <Text style={{overflow: 'hidden', maxWidth: '155px', maxHeight: '24px'}}>{this.props.fileItem.basename}</Text>                        \n                    </Pane>                    \n                </Link>\n            </Card>\n        );\n    }\n\n    renderTable = () => {\n        return <Table.Row key={this.props.fileItem.basename} isSelectable justifyContent=\"space-between\" height={32}>\n              <Table.TextCell flexGrow={3} textAlign=\"left\">\n                  <Link href=\"#\" onClick={(evt) => this.props.handleNavigate(this.props.fileItem.basename)} borderBottom=\"none\">\n                  <FolderOpenIcon color=\"#F7D154\"/>&nbsp;\n                  {this.props.fileItem.basename}\n                  </Link>\n                </Table.TextCell>\n                <Table.TextCell textAlign=\"left\">\n                    &nbsp;                    \n                </Table.TextCell>\n                <Table.TextCell textAlign=\"left\">\n                    {this.props.fileItem.lastmod}\n                </Table.TextCell>\n              <Table.TextCell flexGrow={1}>&nbsp;</Table.TextCell>\n            </Table.Row>\n    }\n}","\nimport { Card, Icon, Link, Pane, Text, InfoSignIcon, DownloadIcon, Table } from 'evergreen-ui';\nimport { Component } from 'react';\n\nimport RegularFile from './RegularFile';\n\nimport { DavConfigurationContext } from '../AppSettings';\n\nexport default class Image extends RegularFile {\n    static contextType = DavConfigurationContext;\n\n    constructor() {\n        super();\n        this.state = {\n            thumb: null\n        }\n    }\n\n    componentDidMount = () => {\n        this.setState({\n            thumb: null\n        }, () => this.generateThumb());\n    }\n\n    generateThumb = () => {\n        const req = {\n            \"filename\": this.props.fileItem.filename\n        }\n\n        const that = this;\n        fetch(this.context.getThumbApiUrl(), { \n            method: 'POST',\n            body: JSON.stringify(req),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n        .then(res => res.blob())\n        .then(res => {\n            var reader = new FileReader();\n            reader.readAsDataURL(res);\n            reader.onloadend = function() {\n                var base64data = reader.result;\n\n                // put that into state\n                that.setState(prev => {\n                    return {\n                        thumb: base64data\n                    }\n                });   \n            }                   \n        })\n        .catch(err => console.log(`Could not generate thumb for file ${this.props.fileItem.filename}\\nReason: ${err}`));\n    }\n\n    renderGrid = () => {\n        let styleThumb = {};\n        if (this.state.thumb !== null) {\n            const imgUrl = 'url(' + this.state.thumb + ')';\n            styleThumb = {\n                backgroundImage: imgUrl,\n                backgroundPosition: 'center',\n                backgroundSize: 'cover',\n                width: '200px',\n                height: '200px',\n                marginTop: '-15px'\n            }        \n        }        \n\n        return (\n            <Card\n                elevation={2}\n                backgroundColor=\"white\"\n                width={200}\n                height={240}\n                margin={24}\n                display=\"flex\"\n                justifyContent=\"center\"\n                alignItems=\"center\"\n                flexDirection=\"column\"\n            > \n                <div style={styleThumb}>&nbsp;</div>\n                <Pane display=\"inline-flex\" alignItems=\"center\" justifyContent=\"space-between\" style={{width: '190px', height: '18px', margin: '5px'}}>\n                    <Link href=\"#\" onClick={(evt) => {this.props.handleShowDetails(this.props.fileItem)}}><Icon icon={InfoSignIcon} color=\"info\"/></Link>\n                    <Text style={{overflow: 'hidden', maxWidth: '155px', maxHeight: '24px'}}>{this.props.fileItem.basename}</Text>\n                    <Link href={this.context.davClient.getFileDownloadLink(this.props.fileItem.filename)} target=\"_blank\"><DownloadIcon color=\"success\"/></Link>\n                </Pane>\n            </Card>\n        );\n    }\n\n    renderTable = () => {\n\n        let styleThumb = {};\n        if (this.state.thumb !== null) {\n            const imgUrl = 'url(' + this.state.thumb + ')';\n            styleThumb = {\n                backgroundImage: imgUrl,\n                backgroundPosition: 'center',\n                backgroundSize: 'cover',\n                width: '16px',\n                height: '16px',\n                marginRight: '5px'\n            }        \n        } \n\n        return <Table.Row key={this.props.fileItem.basename} isSelectable justifyContent=\"space-between\" height={32}>\n              <Table.TextCell flexGrow={3} textAlign=\"left\">\n                  <Link href={this.context.davClient.getFileDownloadLink(this.props.fileItem.filename)} target=\"_blank\" borderBottom=\"none\">\n                      <div style={{display: 'inline-flex'}}>\n                      <div style={styleThumb}>&nbsp;</div>\n                      <div>{this.props.fileItem.basename}</div>\n                      </div>                  \n                  </Link>\n                </Table.TextCell>\n                <Table.TextCell textAlign=\"left\">\n                    {this.renderFileItemSize()}\n                </Table.TextCell>\n                <Table.TextCell textAlign=\"left\">\n                    {this.props.fileItem.lastmod}\n                </Table.TextCell>\n              <Table.TextCell flexGrow={1} textAlign=\"right\">\n                  <Link href=\"#\" onClick={(evt) => {this.props.handleShowDetails(this.props.fileItem)}}><Icon icon={InfoSignIcon} color=\"info\"/></Link>&nbsp;\n                  <Link href={this.context.davClient.getFileDownloadLink(this.props.fileItem.filename)} target=\"_blank\"><DownloadIcon color=\"success\"/></Link>\n              </Table.TextCell>\n            </Table.Row>\n    }\n}","import { Component, useDebugValue } from \"react\"\nimport { Pane, Table } from \"evergreen-ui\";\n\nimport Folder from './Folder';\nimport Image from './Image';\nimport RegularFile from \"./RegularFile\";\n\nimport { DavConfigurationContext } from '../AppSettings';\n\n/**\n * Component to display the directory content (based on two props : folders and files) either by displaying a list of files \n * or a grid with thumbnails. The user choose how to display directory contents using the displayMode property.\n */\nexport default class DavDirectoryPane extends Component {\n    static contextType = DavConfigurationContext;\n\n    /**\n     * Ensure filter is cleared out before navigating to a new folder\n     */\n    navigate = (folderName) => {\n        this.setState({\n            filter: '',\n            filterRegExp: new RegExp('.*', 'i')\n        }, () => { this.props.handleNavigate(folderName) }\n        );\n    }\n\n    renderFolders = () => {\n        let folders = this.props.folders\n            .filter(folder => folder.basename.search(this.context.filterRegExp) !== -1)\n            .map((directory, index) => {\n            return <Folder key={'dir_' + index} \n                           fileItem={directory} \n                           displayMode={this.props.displayMode}\n                           handleNavigate={this.navigate} \n                           handleShowDetails={this.props.handleShowDetails} />\n        });\n        return folders;\n    }\n\n    renderFiles = () => {\n        let images = this.props.files\n            .filter(file => file.basename.search(this.context.filterRegExp) !== -1)\n            .map((file, index) => {\n            if (this.context.isImageFile(file.basename)) {\n                return <Image key={'file_' + index} \n                              fileItem={file}\n                              displayMode={this.props.displayMode}\n                              handleShowDetails={this.props.handleShowDetails} />\n            } else {\n                return <RegularFile key={'file_' + index} \n                                    fileItem={file}\n                                    displayMode={this.props.displayMode} \n                                    handleShowDetails={this.props.handleShowDetails} />\n            }\n        });\n        return images;\n    }  \n\n    renderDirectoryContentsGrid = () => {\n        return <Pane display=\"flex\" flexWrap=\"wrap\" justifyContent=\"space-evenly\" background=\"overlay\">\n                {this.renderFolders()}\n                {this.renderFiles()}\n            </Pane>\n    }\n\n    renderDirectoryContentsTable = () => {\n        return <Table>\n            <Table.Head height={32}>\n                <Table.TextHeaderCell textAlign=\"left\" flexGrow={3}>Name</Table.TextHeaderCell>\n                <Table.TextHeaderCell textAlign=\"left\">Size</Table.TextHeaderCell>\n                <Table.TextHeaderCell textAlign=\"left\">Modified</Table.TextHeaderCell>\n                <Table.TextHeaderCell textAlign=\"right\">Actions</Table.TextHeaderCell>\n            </Table.Head>\n        <Table.Body>\n            {this.renderFolders()}\n            {this.renderFiles()}\n        </Table.Body>\n      </Table>\n    }\n\n    render = () => {\n        let directoryContents;\n        switch (this.props.displayMode) {\n            case 'grid': \n                directoryContents = this.renderDirectoryContentsGrid();\n                break;\n\n            case 'table':\n                directoryContents = this.renderDirectoryContentsTable();\n                break;\n\n            default:\n                console.log(`Invalid display mode ${this.props.displayMode}. Using grid as a default.`);\n                directoryContents = this.renderDirectoryContentsGrid();\n                break;\n        }\n\n        return directoryContents;\n    }\n}","import { Component } from \"react\";\nimport { ChevronRightIcon, HomeIcon } from 'evergreen-ui';\nimport { Pane, Link } from 'evergreen-ui';\n\nexport default class DavBreadCrumb extends Component {\n\n    render = () => {\n        let path = this.props.currentDirectory;\n\n        const chevronIcon = <ChevronRightIcon size={18} style={{ marginLeft: '5px', marginRight: '5px' }} />\n        const homeIcon = <HomeIcon size={18} style={{ marginLeft: '5px', marginRight: '5px' }} />\n\n        let currentDirs = path === '/' ? [''] : path.split('/');\n        let navDirs = [];\n        let breadCrumb = currentDirs.map((dir, index) => {\n            const icon = index === 0 ? homeIcon : chevronIcon;\n            navDirs.push(dir);\n            const fullPath = navDirs.join('/');\n            return <Link href=\"#\" style={{ display: 'flex', alignItems: 'center' }} key={index + 1} onClick={() => {                \n                this.props.handleNavigate(dir === '' ? '/' : fullPath);\n            }}>{icon}{dir}</Link>\n        });\n\n        return <Pane display=\"flex\" padding={8} background=\"blueTint\">\n            {breadCrumb}\n        </Pane>\n    }\n}","import { Component, Fragment } from \"react\";\n\nimport { Pane, Link, Menu, Popover, Badge, Avatar, Position, SearchInput } from \"evergreen-ui\";\nimport { GridViewIcon, ListIcon, InfoSignIcon, LogOutIcon, MenuIcon } from \"evergreen-ui\";\n\nimport { DavConfigurationContext } from '../AppSettings';\n\nimport DavBreadCrumb from \"./DavBreadCrumb\";\nimport React from \"react\";\n\nexport default class DavToolBar extends Component {\n    static contextType = DavConfigurationContext;\n\n    renderDisplayTools = () => {\n        return <Fragment>\n            <Link href=\"#\" style={{ display: 'flex', alignItems: 'center' }} onClick={(evt) => this.props.handleDisplayMode('grid')}>\n                <GridViewIcon size={18} style={{ marginLeft: '5px', marginRight: '5px' }} />\n            </Link>\n            &nbsp;\n            <Link href=\"#\" style={{ display: 'flex', alignItems: 'center' }} onClick={(evt) => this.props.handleDisplayMode('table')}>\n                <ListIcon size={18} style={{ marginLeft: '5px', marginRight: '5px' }} />\n            </Link>            \n        </Fragment>\n    }\n\n    render = () => {\n        return <Pane zIndex={1} flexShrink={0} elevation={0} background=\"tint2\" display=\"grid\" gridTemplateColumns=\"auto 1fr\">                                \n                <DavBreadCrumb handleNavigate={this.props.handleNavigate} currentDirectory={this.props.currentDirectory} />\n                <Pane justifySelf=\"end\" display=\"inline-flex\" alignItems=\"center\">\n                   {this.renderDisplayTools()}\n                </Pane>\n            </Pane>\n    }\n}","const Tree = ({children}) => {\n    return (\n    <div style={{paddingTop: '10px'}}>{children}</div>\n    );\n} \n\nexport default Tree;","\nimport React, {Component, useState} from 'react';\n\nimport { Text, Link, PlusIcon, ChevronDownIcon, ChevronRightIcon, FolderCloseIcon } from 'evergreen-ui';\nimport { Icon, FolderOpenIcon } from 'evergreen-ui';\nimport { DavConfigurationContext } from '../../AppSettings';\n\nconst styles = {\n    folderLabel: {\n        display: 'grid',\n        justifyItems: 'start',\n        gridTemplateColumns: 'auto auto 1fr',\n        span: {\n          marginLeft: '5px'\n        }\n    },\n    collapsibleOpen: {\n        height: 'auto',\n        overflow: 'hidden',\n        paddingLeft: '20px'\n    },\n    collapsibleClosed: {\n        height: '0px',\n        overflow: 'hidden',\n        paddingLeft: '20px'\n    }\n  }\n\nclass TreeFolder extends Component {\n  static contextType = DavConfigurationContext;\n\n  constructor() {\n    super();\n    this.state = {\n      isOpen: false,\n      subDirs: []\n    }\n  }\n\n  getDirectoryContents = async () => {\n    let dirs = [];\n\n    if (this.context.connectionValid) {\n        const directoryItems = await this.context.davClient.getDirectoryContents(this.props.absolutePath);\n        dirs = directoryItems.filter(item => { return item.type === 'directory' });\n\n        this.setState({\n          subDirs: dirs\n        });\n    }\n  }\n\n  handleToggle = (evt) => {\n    this.setState({\n      isOpen: !this.state.isOpen\n    }, () => {\n      if (this.state.isOpen && this.state.subDirs.length === 0) {\n        this.getDirectoryContents();\n      }\n    });\n  }\n\n  handleClick = (evt) => {\n    if (this.state.subDirs.length === 0) {\n      this.getDirectoryContents();\n      this.setState({\n        isOpen: true\n      });\n    }\n\n    this.props.handleNavigate(this.props.absolutePath);\n  }\n\n  renderSubDirectories = () => {\n    return this.state.subDirs.map((dir, index) => {\n      return <TreeFolder key={`${this.props.key}-${index}`} basename={dir.basename} absolutePath={`${this.props.absolutePath}/${dir.basename}`} handleNavigate={this.props.handleNavigate} />\n    });\n  }\n\n  render = () => {\n    \n    const plusIcon = this.state.isOpen ? ChevronDownIcon : ChevronRightIcon;\n    const folderIcon = this.state.isOpen ? FolderOpenIcon : FolderCloseIcon;\n\n    return <div>\n              <div style={styles.folderLabel}>\n                <Icon onClick={this.handleToggle} icon={plusIcon} size={16} marginRight=\"10\" cursor=\"pointer\"/>\n                <div style={styles.folderLabel} onClick={this.handleClick}>\n                  <Icon icon={folderIcon} size={16} color=\"#F7D154\" cursor=\"pointer\"/>\n                  <Text style={styles.folderLabel.span} cursor=\"pointer\">{this.props.basename}</Text>\n                </div>\n              </div>\n              <div style={this.state.isOpen ? styles.collapsibleOpen : styles.collapsibleClosed}>\n                {this.renderSubDirectories()}\n              </div>\n            </div>\n  }\n}\n\nexport default TreeFolder;","\nimport { Component} from 'react';\n\nimport { Pane, SideSheet, Heading, SearchInput, Position, Popover, Avatar, Menu, Badge, Spinner } from 'evergreen-ui';\nimport { InfoSignIcon, LogOutIcon } from 'evergreen-ui';\n\nimport { DavConfigurationContext } from '../AppSettings';\n\nimport WelcomePage from './welcome-page/WelcomePage';\nimport FileDetailsPane from './FileDetailsPane';\nimport DavDirectoryPane from './DavDirectoryPane';\nimport DavToolBar from './DavToolBar';\n\nimport Tree from './tree/Tree';\nimport TreeFolder from './tree/TreeFolder';\nimport TreeFile from './tree/TreeFile';\n\nconst structure = [\n    {\n      type: \"folder\",\n      name: \"src\",\n      childrens: [\n        {\n          type: \"folder\",\n          name: \"Components\",\n          childrens: [\n            { type: \"file\", name: \"Modal.js\" },\n            { type: \"file\", name: \"Modal.css\" }\n          ]\n        },\n        { type: \"file\", name: \"index.js\" },\n        { type: \"file\", name: \"index.html\" }\n      ]\n    },\n    { type: \"file\", name: \"package.json\" }\n  ];\n\n/**\n * The DAV Explorer Pane is the main component. It composes the page and has functions to interect with\n * the DAV Client. It uses sub components such as DavToolBar and DavDirectoryPane to render things returned \n * by the DavClient.\n */\nexport default class DavExplorerPane extends Component {\n    static contextType = DavConfigurationContext;\n\n    constructor() {\n        super();\n\n        this.state = {\n            currentDirectory: null,\n            directories: [],\n            files: [],\n            rootDirs: [],\n            showDetails: false,            \n            displayMode: 'table'\n        }\n    }\n\n    componentDidUpdate = () => {\n        if (this.context.connectionValid && this.context.davClient !== null && this.state.currentDirectory === null) {\n            this.setState({\n                currentDirectory: '/'\n            }, () => {\n                this.getDirectoryContents();\n            });\n        }\n    }\n    \n    getDirectoryContents = async () => {\n\n        let dirs = [];\n        let files = [];\n\n        if (this.context.connectionValid) {\n            const directoryItems = await this.context.davClient.getDirectoryContents(this.state.currentDirectory);\n            dirs = directoryItems.filter(item => { return item.type === 'directory' });\n            files = directoryItems.filter(item => { return item.type === 'file' });\n\n            if ('/' === this.state.currentDirectory) {\n                this.setState({\n                    rootDirs: dirs\n                });\n            }\n        }\n\n        this.setState({\n            directories: dirs,\n            files: files\n        }, () => {\n            console.log(`${dirs.length} directories and ${files.length} files from ${this.state.currentDirectory}`);\n        });\n    }\n\n    navigate = (folderName) => {\n        const separator = this.state.currentDirectory.endsWith('/') || folderName.startsWith('/') ? '' : '/';\n        let newDir = this.state.currentDirectory + separator + folderName;\n        this.setState((prev) => {\n            return {\n                currentDirectory: newDir,\n                files: [],\n                directories: []\n            }\n        }, () => {\n            console.log(`Navigated to ${newDir}, now get directory contents...`);\n            this.getDirectoryContents();\n        });\n    }\n\n    navigateAbsolute = (absolutePath) => {\n        this.setState((prev) => {\n            return {\n                currentDirectory: absolutePath,\n                files: [],\n                directories: []\n            }\n        }, () => {\n            console.log(`Absolute navigated to ${absolutePath}, now get directory contents...`);\n            this.getDirectoryContents();\n        });\n    }\n\n    toggleFileDetails = (fileItem) => {\n        let modified = fileItem;\n        if (modified.filename.startsWith(this.context.homeDirectory)) {\n            modified.filename = modified.filename.substring(this.context.homeDirectory.length);\n        }\n\n        this.setState({\n            showDetails: true,\n            detailedFileItem: modified\n        });\n    }\n\n    disconnect = () => {\n        this.context.disconnect();\n    }\n\n    changeDisplayMode = (displayMode) => {\n        this.setState({\n            displayMode: displayMode\n        });\n    }\n\n    renderAvatarMenu = () => {\n        return <Popover \n                    justifySelf=\"end\"\n                    position={Position.BOTTOM_RIGHT}\n                    content={\n                    <Menu>\n                        <Menu.Group>\n                        <Menu.Item icon={InfoSignIcon} intent=\"success\"><Badge color=\"green\">{this.context.username}</Badge></Menu.Item>              \n                        <Menu.Item>{this.context.getClientUrl()}</Menu.Item>\n                        </Menu.Group>\n                        <Menu.Divider />\n                        <Menu.Group>\n                        <Menu.Item icon={LogOutIcon} intent=\"danger\" onClick={() => {this.disconnect()}}>\n                            Disconnect\n                        </Menu.Item>\n                        </Menu.Group>\n                    </Menu>\n                    }\n                >\n                <Avatar name={this.context.username} size={32} marginLeft={15} marginRight={15} style={{cursor: 'pointer'}} justifySelf=\"end\"/>\n            </Popover>\n    }\n\n    render = () => {\n\n        if (!this.context.connectionValid) {\n            return <WelcomePage />\n        }\n\n        if (!this.state.currentDirectory) {\n            return <Pane gridTemplateColumns=\"auto\" gridTemplateColumns=\"auto\">\n                <Spinner marginX=\"auto\" marginTop={120} />\n                <Heading size={600} marginX=\"auto\" marginTop={15}>Nico's Drive is loading...</Heading>\n          </Pane>\n        }\n\n        return <Pane display=\"grid\" gridTemplateColumns=\"1fr 4fr\" height=\"100%\">\n            <Pane background=\"blueTint\" elevation={0} padding={15} display=\"grid\" gridTemplateRows=\"auto auto 1fr\" gridTemplateColumns=\"auto\" overflowX=\"scroll\">  \n                <Pane background=\"blueTint\">\n                    <Heading size={900} color=\"neutral\">My files</Heading>\n                </Pane>\n                <Pane background=\"blueTint\" elevation={0} marginTop={15}>\n                    <Heading size={600} color=\"neutral\">File manager</Heading>\n                </Pane>\n                <Tree>\n                    {this.state.rootDirs.map((dir, index) => {\n                        return <TreeFolder key={`treefolder-${index}`} absolutePath={`/${dir.basename}`} basename={dir.basename} handleNavigate={this.navigateAbsolute} />\n                    })}\n                </Tree>\n            </Pane>\n\n            <Pane display=\"grid\" gridTemplateRows=\"auto auto 1fr\">\n                <Pane background=\"tint2\" display=\"grid\" gridTemplateColumns=\"1fr auto\" paddingTop={15} paddingBottom={15} paddingLeft={15} justifySelf=\"stretch\">\n                    <SearchInput placeholder=\"Search in your files...\" justifySelf=\"stretch\" onChange={(e) => this.context.filterFileItems(e.target.value)} value={this.context.filter}/>       \n                    {this.renderAvatarMenu()}\n                </Pane>\n                <DavToolBar currentDirectory={this.state.currentDirectory} \n                            handleDisplayMode={this.changeDisplayMode}\n                            handleNavigate={this.navigateAbsolute} />\n\n                <DavDirectoryPane displayMode={this.state.displayMode} \n                                folders={this.state.directories} \n                                files={this.state.files}\n                                handleNavigate={this.navigate} \n                                handleShowDetails={this.toggleFileDetails} />\n                \n            </Pane>\n\n            <SideSheet id=\"side-details\"\n                isShown={this.state.showDetails}\n                onCloseComplete={() => this.setState({ showDetails: false })}\n            >\n                <FileDetailsPane fileItem={this.state.detailedFileItem} davClient={this.state.davClient} />\n            </SideSheet>\n        </Pane>\n    }\n}","import { Component } from 'react';\nimport { Dialog, Pane, TextInputField, Text, Paragraph, Button } from 'evergreen-ui';\nimport { DavConfigurationContext } from '../AppSettings';\n\nimport { createClient, AuthType } from \"webdav\";\n\nexport default class LoginDialog extends Component {\n    static contextType = DavConfigurationContext;\n    \n    constructor() {\n        super();\n        this.state = {\n            isLoading: false,\n            username: '',\n            password: '',\n            url: '',\n            errorMessage: '',\n            davContext: 'dav'\n        }\n    }\n\n    componentDidUpdate = () => {\n        if (this.state.url === '') {\n            this.buildUrl();\n        }\n    }\n\n    buildUrl = () => {\n        const protocol = 'localhost' === window.location.hostname ? 'http' : 'https';\n        const port = 'localhost' === window.location.hostname ? '8080' : window.location.port;\n        const newUrl = `${protocol}://${window.location.hostname}:${port}/${this.state.davContext}/${this.state.username}/`;\n        this.setState({\n            url: newUrl\n        });\n    }\n\n    testConnection = async () => {\n        try {\n\n            const clientOptions = {\n                authType: AuthType.Basic,\n                username: this.state.username,\n                password: this.state.password\n            }\n\n            const client = createClient(this.state.url, clientOptions);\n\n            const directoryItems = await client.getDirectoryContents('./');\n\n            this.context.setDavClient(client, this.state.url);\n\n            // reset form in order not to have credentials after clicking logout\n            this.setState({\n                url: '',\n                username: '',\n                password: '',\n                errorMessage: ''\n            });\n\n        } catch (error) {\n            console.error('Could not connect to webdav: ' + JSON.stringify(error));\n            this.context.setDavClient(null);\n            this.context.setConnectionValid(false);\n            this.setState({\n                errorMessage: 'Something went wrong while connecting. Check your credentiuals and try again.'\n            });\n        } finally {\n            this.setState({\n                isLoading: false\n            });\n        }\n    }\n\n    componentDidMount = () => {\n        this.setState({\n            username: this.context.username,\n            password: this.context.password,\n            url: this.context.getClientUrl() + this.context.homeDirectory,\n            errorMessage: ''\n        });\n    }\n\n    onConfirm = () => {\n        this.setState({ \n            isLoading: true            \n        }, () => this.testConnection());\n    }\n\n    onCloseComplete = () => {\n        this.context.setShowConnectionDialog(false);\n        this.setState({ isLoading: false, errorMessage: '' });\n    }\n\n    onTxtLoginChange = (evt) => {\n        this.setState({ \n            username: evt.target.value \n        }, () => { \n            this.buildUrl() \n        });\n    }\n\n    renderDialog = () => {\n        return <Dialog\n            isShown={this.context.showConnectionDialog}\n            title=\"WebDAV Connection setup...\"\n            onCloseComplete={() => this.onCloseComplete()}\n            isConfirmLoading={this.state.isLoading}\n            onConfirm={(close) => this.onConfirm(close)}           \n            hasFooter={false}\n        >\n            <Pane display=\"grid\" gridTemplateColumns=\"auto\">\n                    <TextInputField id=\"txt-login\" \n                                    value={this.state.username} \n                                    onChange={this.onTxtLoginChange}\n                                    placeholder=\"Login name...\" \n                                    label=\"Login:\"/>\n\n                    <TextInputField id=\"txt-password\" \n                                    type=\"password\" \n                                    value={this.state.password} \n                                    onChange={e => this.setState({ password: e.target.value })}\n                                    placeholder=\"Password...\" \n                                    label=\"Password:\"/>\n\n                    <TextInputField id=\"txt-url\" \n                                    value={this.state.url} \n                                    onChange={e => this.setState({ url: e.target.value })}\n                                    placeholder=\"WebDAV URL...\"\n                                    label=\"WebDAV base URL:\"/>\n                    <Pane>\n                        <Paragraph>{this.state.errorMessage}</Paragraph>\n                        <Button is=\"div\" marginTop={16} onClick={() => this.onConfirm()} disabled={this.state.isLoading} appearance=\"primary\" intent=\"success\">\n                        {this.state.isLoading ? 'Please wait...' : 'Connect'}\n                        </Button>\n                    </Pane>\n            </Pane>          \n        </Dialog>\n    }\n\n    render = () => {\n        return this.renderDialog();\n    }\n}","\nimport { React, Component } from 'react';\nimport { Heading, Pane } from 'evergreen-ui';\n\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {DavConfigurationProvider} from './AppSettings';\n\nimport DavExplorerPane from './components/DavExplorerPane';\nimport LoginDialog from './components/LoginDialog';\n\nclass App extends Component {\n\n  render = () => {\n    return (      \n        <div className=\"App\" height=\"100%\">\n          <Pane clearfix width=\"100%\" height=\"100%\">\n              <DavConfigurationProvider>\n                <LoginDialog />\n                <DavExplorerPane />\n              </DavConfigurationProvider>\n          </Pane>\n        </div>      \n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}