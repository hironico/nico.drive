{"version":3,"sources":["AppTheme.js","AppSettings.js","views/LoginView.js","components/DavHeader.js","components/RatingPane.js","components/FileDetailsPane.js","components/RegularFile.js","components/Folder.js","components/Image.js","components/DavDirectoryPane.js","components/DavBreadCrumb.js","components/DavToolBar.js","components/tree/Tree.js","components/tree/TreeFolder.js","components/DavSideBar.js","views/DavExplorerView.js","components/welcome-page/WelcomePage.js","App.js","reportWebVitals.js","index.js"],"names":["appTheme","merge","defaultTheme","typography","fontFamilies","display","ui","mono","components","Text","baseStyle","fontFamily","Heading","Link","defaultValue","davBaseUrl","davWebContext","authType","AuthType","Basic","username","password","davClient","connectionValid","homeDirectory","supportedFormats","filter","filterRegExp","RegExp","filterFileItems","setDavClient","client","url","getClientUrl","getThumbApiUrl","getExifApiUrl","getMetadataApiUrl","isImageFile","disconnect","DavConfigurationContext","React","createContext","DavConfigurationProvider","value","valueStr","setState","uri","URL","protocol","host","pathTab","pathname","split","splice","homeDir","join","getBasePath","state","filename","startsWith","index","lastIndexOf","extention","toUpperCase","substring","indexOf","render","Provider","props","children","showConnectionDialog","Component","LoginView","componentDidUpdate","a","buildUrl","context","connectionSuccess","window","location","hostname","port","newUrl","davContext","testConnection","console","info","clientOptions","createClient","getDirectoryContents","then","contents","catch","error","errorMessage","isLoading","componentDidMount","onConfirm","onTxtLoginChange","evt","target","renderErrorMessage","Alert","intent","renderLoginForm","Pane","gridTemplateColumns","margin","padding","elevation","marginTop","marginLeft","marginRight","marginBottom","background","is","textAlign","textShadow","TextInputField","id","disabled","onChange","placeholder","label","type","e","Button","onClick","appearance","Paragraph","to","contextType","DavHeader","paddingTop","paddingBottom","paddingLeft","justifyItems","SearchInput","width","justifySelf","Popover","position","Position","BOTTOM_RIGHT","content","Menu","Group","Item","icon","InfoSignIcon","Badge","color","Divider","LogOutIcon","Avatar","name","size","style","cursor","RatingPane","stars","rating","maxRating","lightedStar","StarIcon","push","unlightedStar","StarEmptyIcon","alignItems","FileDetailsPane","loadImageInformation","loadMetaDataInformation","getDownloadLink","getFileDownloadLink","fileItem","metaUrl","exifRequest","fetch","method","body","JSON","stringify","headers","res","json","imageData","err","log","metadata","tags","metadataRequest","renderFileItemSize","unite","taille","toFixed","renderImageTabs","isImage","basename","Tablist","flexBasis","tabs","tab","map","Tab","onSelect","selectedIndex","isSelected","panelTab","renderFileDetails","renderImageDetails","renderMetadataDetails","role","Table","Head","height","TextHeaderCell","Body","Row","TextCell","lastmod","image","rows","Object","keys","key","renderTags","length","TagInput","inputProps","values","flexGrow","getRating","Number","parseInt","downloadIcon","DownloadIcon","zIndex","flexShrink","backgroundColor","borderBottom","iconBefore","href","RegularFile","_capitalize","str","lower","toLowerCase","charAt","slice","download","dlLink","open","renderMimeType","mimeType","endsWith","renderHttpDate","httpDate","DateTime","fromHTTP","toLocaleString","DATETIME_SHORT_WITH_SECONDS","renderGrid","Card","justifyContent","flexDirection","DocumentIcon","handleShowDetails","overflow","maxWidth","maxHeight","renderActionMenu","boxShadow","border","MoreIcon","renderTable","isSelectable","mime","displayMode","Folder","handleNavigate","FolderCloseIcon","Image","thumb","generateThumb","req","that","blob","reader","FileReader","readAsDataURL","onloadend","base64data","result","prev","styleThumb","backgroundImage","backgroundPosition","backgroundSize","maxHeigh","DavDirectoryPane","navigate","folderName","renderFolders","folders","folder","search","directory","renderFiles","files","file","renderLoadingState","EmptyState","title","orientation","Spinner","iconBgColor","description","renderFoldersAndFiles","renderDirectoryContentsGrid","flexWrap","loading","renderDirectoryContentsTable","directoryContents","DavBreadCrumb","path","currentDirectory","chevronIcon","ChevronRightIcon","homeIcon","HomeIcon","currentDirs","navDirs","breadCrumb","dir","fullPath","DavToolBar","renderDisplayTools","handleDisplayMode","GridViewIcon","ListIcon","Tree","styles","folderLabel","span","collapsibleOpen","collapsibleClosed","TreeFolder","dirs","absolutePath","directoryItems","item","subDirs","handleToggle","isOpen","handleClick","renderSubDirectories","plusIcon","ChevronDownIcon","folderIcon","FolderOpenIcon","DavSideBar","gridTemplateRows","overflowX","rootDirs","DavExplorerView","doGetDirectoryContents","directories","separator","newDir","navigateAbsolute","toggleFileDetails","modified","showDetails","detailedFileItem","changeDisplayMode","overflowY","SideSheet","isShown","onCloseComplete","marginX","WelcomePage","showLoginDialog","setShowConnectionDialog","className","assign","fontSize","LogInIcon","ReactRouterLink","src","alt","App","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6885f1cd.chunk.js","sourcesContent":["import { defaultTheme } from 'evergreen-ui'\nimport { merge } from 'lodash'\n\nconst appTheme = merge({}, defaultTheme, {\n  typography: {\n    fontFamilies: {\n      display: 'Lato, sans-serif',\n      ui: 'Lato, sans-serif',      \n      mono: '\"SF Mono\", monospace'\n    }\n  },\n  components: {\n    Text: {\n      baseStyle: {\n        fontFamily: 'Lato, sans-serif'\n      }\n    },\n    Heading: {\n      baseStyle: {\n        fontFamily: 'Lato, sans-serif'\n      }\n    },\n    Link: {\n      baseStyle: {\n        fontFamily: 'Lato, sans-serif'\n      }\n    }\n  }\n})\n\nexport default appTheme","import React, { Component } from \"react\";\nimport { AuthType } from \"webdav\";\n\nconst defaultValue = {\n    davBaseUrl: 'http://localhost:8080',\n    davWebContext: '/dav',\n    authType: AuthType.Basic,\n    username: 'hironico',\n    password: 'changeme',\n    davClient: null,\n    connectionValid: false,\n    homeDirectory: '/hironico',\n    supportedFormats: ['JPEG', 'JPG', 'PNG', 'WEBP', 'AVIF', 'TIFF', 'TIF', 'GIF', 'SVG', 'CR2', 'DNG'],\n    filter: '',\n    filterRegExp: new RegExp('.*', 'i'),\n    filterFileItems: (filter) => { },\n    setDavClient: (client, url) => { },\n    getClientUrl: () => { },\n    getThumbApiUrl: () => { },\n    getExifApiUrl: () => { },\n    getMetadataApiUrl: () => { },\n    isImageFile: () => { },\n    disconnect: () => { }\n}\n\nconst DavConfigurationContext = React.createContext(defaultValue);\n\nclass DavConfigurationProvider extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            davBaseUrl: 'http://localhost:8080',\n            davWebContext: '/dav',\n            authType: AuthType.Basic,\n            username: 'hironico',\n            password: 'hironico',\n            davClient: null,\n            connectionValid: false,\n            showConnectionDialog: false,\n            homeDirectory: '/hironico',\n            supportedFormats: ['JPEG', 'JPG', 'PNG', 'WEBP', 'AVIF', 'TIFF', 'GIF', 'SVG', 'CR2', 'DNG'],\n            filter: '',\n            filterRegExp: new RegExp('.*', 'i'),\n            filterFileItems: this.filterFileItems,\n            setDavClient: this.setDavClient,\n            getClientUrl: this.getClientUrl,\n            getThumbApiUrl: this.getThumbApiUrl,\n            getExifApiUrl: this.getExifApiUrl,\n            getMetadataApiUrl: this.getMetadataApiUrl,\n            isImageFile: this.isImageFile,\n            getBasePath: this.getBasePath,\n            disconnect: this.disconnect\n        }\n    }\n\n    filterFileItems = (value) => {\n        let valueStr = value === null || value === '' ? '.*' : value;\n        this.setState({\n            filter: value,\n            filterRegExp: new RegExp(valueStr, 'i')\n        });\n    }\n\n    setDavClient = (client, url) => {\n        const urlValid = (typeof url !== 'undefined' && url !== null && '' !== url);\n        const uri = urlValid ? new URL(url) : null;\n        const davBaseUrl = uri ? `${uri.protocol}//${uri.host}` : '';\n        let pathTab = uri ? uri.pathname.split('/') : '';\n        const davWebContext = uri ? `/${pathTab[0]}` : '';\n        pathTab = uri ? pathTab.splice(0, 1) : [];\n        const homeDir = uri ? pathTab.join('/') : '';\n\n        this.setState({\n            davClient: client,\n            davBaseUrl: client ? davBaseUrl : '',\n            davWebContext: client ? davWebContext : '',\n            homeDirectory: client ? homeDir : '',\n            connectionValid: client ? true : false\n        });\n    }\n\n    disconnect = () => {\n        this.setDavClient(null, null);\n    }\n\n    getBasePath = () => {\n        return `${this.state.davWebContext}${this.state.homeDirectory}`;\n    }\n\n    getClientUrl = () => {\n        return `${this.state.davBaseUrl}${this.state.davWebContext}`;\n    }\n\n    getThumbApiUrl = () => {\n        return `${this.state.davBaseUrl}/thumb`;\n    }\n\n    getExifApiUrl = () => {\n        return `${this.state.davBaseUrl}/meta/exif`;\n    }\n\n    getMetadataApiUrl = () => {\n        return `${this.state.davBaseUrl}/meta/xmp`;\n    }\n\n    isImageFile = (filename) => {\n        if (typeof filename === 'undefined' || filename === null) {\n            return false;\n        }\n\n        if (filename.startsWith('.')) {\n            return false;\n        }\n\n        const index = filename.lastIndexOf('.');\n        if (index < 0) {\n            return false;\n        }\n\n        const extention = filename.toUpperCase().substring(index + 1);\n\n        const formatIndex = this.state.supportedFormats.indexOf(extention);\n        return formatIndex !== -1;\n    }\n\n    render = () => {\n        return <DavConfigurationContext.Provider value={this.state}>{this.props.children}</DavConfigurationContext.Provider>\n    }\n}\n\nexport { DavConfigurationContext, DavConfigurationProvider }\n","import { Component } from 'react';\nimport { Navigate } from 'react-router';\nimport { Pane, TextInputField, Paragraph, Button, Heading, Text, Alert } from 'evergreen-ui';\nimport { DavConfigurationContext } from '../AppSettings';\n\nimport { createClient, AuthType } from \"webdav\";\n\n/**\n * The login view displays the credentials input controls and authenticate the user against \n * the server credentials.\n */\nexport default class LoginView extends Component {\n    static contextType = DavConfigurationContext;\n\n    constructor() {\n        super();\n        this.state = {\n            isLoading: false,\n            username: '',\n            password: '',\n            url: '',\n            errorMessage: '',\n            davContext: 'dav',\n            connectionSuccess: false\n        }\n    }\n\n    componentDidUpdate = async () => {\n        if (this.state.url === '') {\n            this.buildUrl();\n        }\n\n        if (this.context.davClient !== null && this.context.connectionValid) {\n            this.setState({\n                connectionSuccess: true\n            });\n        }\n    }\n\n    buildUrl = () => {\n        const protocol = 'localhost' === window.location.hostname ? 'http' : 'https';\n        const port = 'localhost' === window.location.hostname ? '8080' : window.location.port;\n        const newUrl = `${protocol}://${window.location.hostname}:${port}/${this.state.davContext}/${this.state.username}/`;\n        this.setState({\n            url: newUrl\n        });\n    }\n\n    testConnection = async () => {\n        console.info('Testing connection ...');\n        const clientOptions = {\n            authType: AuthType.Basic,\n            username: this.state.username,\n            password: this.state.password\n        }\n\n        const client = createClient(this.state.url, clientOptions);\n        client.getDirectoryContents('/')\n            .then(contents => {\n                this.context.setDavClient(client, this.state.url);\n            }).catch(error => {\n                console.info(`Could not connect to webdav: ${error}`);\n                this.context.setDavClient(null, '');\n                this.setState({\n                    errorMessage: 'Something went wrong while connecting. Check your credentials and try again.',\n                    isLoading: false,\n                    connectionSuccess: false\n                });\n            });\n    }\n\n    componentDidMount = () => {\n        this.setState({\n            username: this.context.username,\n            password: this.context.password,\n            url: this.context.getClientUrl() + this.context.homeDirectory,\n            errorMessage: ''\n        });\n    }\n\n    onConfirm = () => {\n        this.setState({\n            isLoading: true,\n            connectionSuccess: false\n        }, () => this.testConnection());\n    }\n\n    onTxtLoginChange = (evt) => {\n        this.setState({\n            username: evt.target.value\n        }, () => {\n            this.buildUrl()\n        });\n    }\n\n    renderErrorMessage = () => {\n        return (this.state.errorMessage !== '') ? <Alert intent=\"danger\">{this.state.errorMessage}</Alert> : <></>;\n    }\n\n    renderLoginForm = () => {\n        return <Pane display=\"grid\" gridTemplateColumns=\"auto\" margin={160} padding={20} elevation={1}>\n            <Pane marginTop={-20} marginLeft={-20} marginRight={-20} marginBottom={40} padding={10} background=\"tint2\" elevation={1}>\n                <Heading is=\"h2\" textAlign=\"center\" textShadow=\"initial\">Welcome to Nico's Drive</Heading>\n            </Pane>\n\n            <TextInputField id=\"txt-login\"\n                disabled={this.state.isLoading}\n                value={this.state.username}\n                onChange={this.onTxtLoginChange}\n                placeholder=\"Login name...\"\n                label=\"Login:\" />\n\n            <TextInputField id=\"txt-password\"\n                disabled={this.state.isLoading}\n                type=\"password\"\n                value={this.state.password}\n                onChange={e => this.setState({ password: e.target.value })}\n                placeholder=\"Password...\"\n                label=\"Password:\" />\n\n            <TextInputField id=\"txt-url\"\n                disabled={this.state.isLoading}\n                value={this.state.url}\n                onChange={e => this.setState({ url: e.target.value })}\n                placeholder=\"WebDAV URL...\"\n                label=\"WebDAV base URL:\" />\n            <Pane>\n                {this.renderErrorMessage()}\n                <Button is=\"div\" marginTop={16} onClick={() => this.onConfirm()} disabled={this.state.isLoading} appearance=\"primary\" intent=\"success\">\n                    {this.state.isLoading ? 'Please wait...' : 'Connect'}\n                </Button>\n                <Paragraph textAlign=\"right\">\n                    <Text>Not a member ? Just kindly ask... :)</Text>\n                </Paragraph>\n\n            </Pane>\n        </Pane>\n    }\n\n    render = () => {\n        // if we have a dav client properly configured then must go to the explorer;\n        // to login again we éust log out first !\n        return (this.state.connectionSuccess) ? <Navigate to='/explorer' /> : this.renderLoginForm();\n    }\n}","import { Component } from \"react\";\n\nimport { Pane, SearchInput, Position, Popover, Avatar, Menu, Badge } from 'evergreen-ui';\nimport { InfoSignIcon, LogOutIcon } from 'evergreen-ui';\n\nimport { DavConfigurationContext } from \"../AppSettings\";\n\n/**\n * The DavHeader contains the search bar for filtering currently displayed file items and the avatar menu for user information\n * It uses the context to operate on file items filtering and login information.\n */\nclass DavHeader extends Component {\n    static contextType = DavConfigurationContext;\n\n    render = () => {\n        return <Pane background=\"tint2\" display=\"grid\" gridTemplateColumns=\"1fr auto\" paddingTop={15} paddingBottom={15} paddingLeft={15} justifyItems=\"stretch\">\n            <SearchInput placeholder=\"Search something...\" width=\"75%\" justifySelf=\"center\" onChange={(e) => this.context.filterFileItems(e.target.value)} value={this.context.filter} />\n            <Popover\n                justifySelf=\"end\"\n                position={Position.BOTTOM_RIGHT}\n                content={\n                    <Menu>\n                        <Menu.Group>\n                            <Menu.Item icon={InfoSignIcon} intent=\"success\"><Badge color=\"green\">{this.context.username}</Badge></Menu.Item>\n                            <Menu.Item>{this.context.getClientUrl()}</Menu.Item>\n                        </Menu.Group>\n                        <Menu.Divider />\n                        <Menu.Group>\n                            <Menu.Item icon={LogOutIcon} intent=\"danger\" onClick={() => { this.context.disconnect() }}>\n                                Disconnect\n                            </Menu.Item>\n                        </Menu.Group>\n                    </Menu>\n                }\n            >\n                <Avatar name={this.context.username} size={32} marginLeft={15} marginRight={15} style={{ cursor: 'pointer' }} justifySelf=\"end\" />\n            </Popover>\n        </Pane>\n    }\n}\n\nexport default DavHeader;","import { Component } from 'react';\nimport { Pane, StarIcon, StarEmptyIcon } from 'evergreen-ui';\n\nexport default class RatingPane extends Component {\n\n    render = () => {\n        let stars = [];\n\n        let rating = this.props.rating ? this.props.rating : 0;\n        let maxRating = this.props.maxRating ? this.props.maxRating : 5;\n        if (maxRating < rating) {\n            maxRating = rating;\n        }\n\n        let size = this.props.size ? this.props.size : 24;\n        \n        for(let index = 0; index < rating; index++) {\n            const lightedStar = <StarIcon key={index} color=\"#FBE6A2\" size={size}/>\n            stars.push(lightedStar);\n        }\n\n        for(let index = rating; index < maxRating; index++) {\n            const unlightedStar = <StarEmptyIcon key={index} color=\"#C7CED4\" size={size}/>\n            stars.push(unlightedStar);\n        }\n\n        return <Pane display=\"inline-fex\" alignItems=\"center\">\n            {stars}\n        </Pane>\n    }\n}","import { Button, Heading, InfoSignIcon, Pane, Table, DownloadIcon, Tablist, Tab, TagInput } from 'evergreen-ui';\nimport { Fragment, Component } from 'react';\n\nimport RatingPane from './RatingPane';\n\nimport { DavConfigurationContext } from '../AppSettings';\n\nexport default class FileDetailsPane extends Component {\n    static contextType = DavConfigurationContext;\n\n    constructor() {\n        super();\n\n        this.state = {\n            imageData: [],\n            selectedIndex: 0,\n            tabs: ['Information', 'Image', 'Metadata']\n        }\n    }\n\n    componentDidMount = () => {\n        this.loadImageInformation();\n        this.loadMetaDataInformation();\n    }\n\n    getDownloadLink = () => {        \n        if (!this.context.connectionValid) {\n            // console.log('davClient is undefined in context. Cannot download file.');\n            return;\n        }\n\n        return this.context.davClient.getFileDownloadLink(this.props.fileItem.filename);\n    }\n\n    loadImageInformation = () => {\n        const metaUrl = this.context.getExifApiUrl();\n\n        const exifRequest = {\n            \"filename\": this.props.fileItem.filename\n        }\n\n        fetch(metaUrl, {\n            method: 'POST',\n            body: JSON.stringify(exifRequest),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(res => res.json())\n            .then(res => {\n                // console.log('Received exif for this file: ' + JSON.stringify(res));\n                this.setState({\n                    imageData: res\n                });\n            }).catch(err => {\n                console.log('Error while reading exif data: ' + err);\n                this.setState({\n                    metadata: { tags: '' }\n                });\n            });\n    }\n\n\n    loadMetaDataInformation = () => {\n        const metaUrl = this.context.getMetadataApiUrl();\n\n        const metadataRequest = {\n            \"filename\": this.props.fileItem.filename,\n            \"raw\": false\n        }\n\n        fetch(metaUrl, {\n            method: 'POST',\n            body: JSON.stringify(metadataRequest),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(res => res.json())\n            .then(res => {\n                /*\n                console.log('Received metadata for this file: ' + JSON.stringify(res));\n                console.log('Tags are: ' + res.tags);\n                */\n\n                this.setState({\n                    metadata: res\n                });\n            }).catch(err => {\n                console.log('Error while reading metadata: ' + err);\n                this.setState({\n                    metadata: { tags: '' }\n                });\n            });\n    }\n\n    renderFileItemSize = () => {\n        let unite = 'bytes';\n        let taille = this.props.fileItem.size;\n        if (taille > 1024) {\n            taille = (taille / 1024).toFixed(2);\n            unite = 'KB';\n        }\n        if (taille > 1024) {\n            taille = (taille / 1024).toFixed(2);\n            unite = 'MB';\n        }\n        if (taille > 1024) {\n            taille = (taille / 1024).toFixed(2);\n            unite = 'GB';\n        }\n\n        return <span>{taille}&nbsp;{unite}</span>\n    }\n\n    renderImageTabs = () => {\n        const isImage = this.context.isImageFile(this.props.fileItem.basename);\n        return <Pane padding={15}>\n            <Tablist marginBottom={16} flexBasis={240} marginRight={24}>\n                {this.state.tabs.filter((tab, index) => {\n                    return index > 0 ? isImage : true;\n                })\n                    .map((tab, index) => (\n                        <Tab\n                            key={tab}\n                            id={tab}\n                            onSelect={() => this.setState({ selectedIndex: index })}\n                            isSelected={index === this.state.selectedIndex}\n                            aria-controls={`panel-${tab}`}\n                        >\n                            {tab}\n                        </Tab>\n                    ))}\n            </Tablist>\n            {this.state.tabs.map((tab, index) => {\n\n                let panelTab;\n                switch (index) {\n                    case 0:\n                        panelTab = this.renderFileDetails();\n                        break;\n\n                    case 1:\n                        panelTab = this.renderImageDetails();\n                        break;\n\n                    case 2:\n                        panelTab = this.renderMetadataDetails();\n                        break;\n\n                    default:\n                        panelTab = <div />\n                }\n\n                return <Pane\n                    key={tab}\n                    id={`panel-${tab}`}\n                    role=\"tabpanel\"\n                    aria-labelledby={tab}\n                    aria-hidden={index !== this.state.selectedIndex}\n                    display={index === this.state.selectedIndex ? 'block' : 'none'}\n                >\n                    {panelTab}\n                </Pane>\n            })}\n\n        </Pane>\n    }\n\n    renderFileDetails = () => {\n        return <Table marginTop={15}>\n            <Table.Head height={32}>\n                <Table.TextHeaderCell>\n                    <Pane display=\"inline-flex\" alignItems=\"center\">\n                        <InfoSignIcon />&nbsp;File information\n                    </Pane>\n                </Table.TextHeaderCell>\n                <Table.TextHeaderCell>\n                    &nbsp;\n                </Table.TextHeaderCell>\n            </Table.Head>\n            <Table.Body>\n                <Table.Row key=\"row_path\" height={32}>\n                    <Table.TextCell>Path:</Table.TextCell>\n                    <Table.TextCell>{this.props.fileItem.filename}</Table.TextCell>\n                </Table.Row>\n                <Table.Row height={32}>\n                    <Table.TextCell key=\"row_modif\">Last modif:</Table.TextCell>\n                    <Table.TextCell>{this.props.fileItem.lastmod}</Table.TextCell>\n                </Table.Row>\n                <Table.Row height={32}>\n                    <Table.TextCell key=\"row_size\">Size:</Table.TextCell>\n                    <Table.TextCell>{this.renderFileItemSize()}</Table.TextCell>\n                </Table.Row>\n            </Table.Body>\n        </Table>\n    }\n\n    renderImageDetails = () => {\n        if (typeof this.state.imageData.image === 'undefined') {\n            return <Fragment>&nbsp;</Fragment>\n        }\n\n        let rows = Object.keys(this.state.imageData.image).map((key, index) => {\n            return <Table.Row key={index}>\n                <Table.TextCell>{key}</Table.TextCell>\n                <Table.TextCell>{this.state.imageData.image[key]}</Table.TextCell>\n            </Table.Row>\n        });\n\n        return <Table marginTop={15}>\n            <Table.Head>\n                <Table.TextHeaderCell>\n                    <Pane display=\"inline-flex\" alignItems=\"center\">\n                        <InfoSignIcon />&nbsp;Image information\n                    </Pane>\n                </Table.TextHeaderCell>\n                <Table.TextHeaderCell>\n                    &nbsp;\n                </Table.TextHeaderCell>\n            </Table.Head>\n            <Table.Body>\n                {rows}\n            </Table.Body>\n        </Table>\n    }\n\n    renderMetadataDetails = () => {\n        if (typeof this.state.metadata === 'undefined') {\n            return <Fragment>&nbsp;</Fragment>\n        }\n\n        let rows = Object.keys(this.state.metadata).map((key, index) => {\n            return <Table.Row key={`meta-${index}`}>\n                <Table.TextCell>{key}</Table.TextCell>\n                <Table.TextCell>{this.state.metadata[key]}</Table.TextCell>\n            </Table.Row>\n        });\n\n        return <Table marginTop={15}>\n            <Table.Head>\n                <Table.TextHeaderCell>\n                    <Pane display=\"inline-flex\" alignItems=\"center\">\n                        <InfoSignIcon />&nbsp;Metadata information\n                    </Pane>\n                </Table.TextHeaderCell>\n                <Table.TextHeaderCell>\n                    &nbsp;\n                </Table.TextHeaderCell>\n            </Table.Head>\n            <Table.Body>\n                {rows}\n            </Table.Body>\n        </Table>\n    }\n\n    renderTags = () => {\n        const isImage = this.context.isImageFile(this.props.fileItem.basename);\n        if (!isImage) {\n            return <div>&nbsp;</div>\n        }\n\n        let placeholder = 'Loading tags info...';\n        let tags = [];\n        if (this.state.metadata) {            \n            if (typeof this.state.metadata.tags !== 'undefined') {\n                if ('' !== this.state.metadata.tags) {\n                    tags = this.state.metadata.tags.split(',');\n                } \n            }\n            placeholder = tags.length === 0 ? 'No tags for this image' : '';\n        }\n\n        return <TagInput\n            inputProps={{ placeholder: placeholder }}\n            values={tags}\n            flexGrow={2}\n            margin={15}\n            disabled={true}\n        />\n    }\n\n    getRating = () => {\n        const isImage = this.context.isImageFile(this.props.fileItem.basename);\n        if (!isImage) {\n            return 0;\n        }\n\n        if (!this.state.metadata) {\n            return 0;\n        }\n\n        if (!this.state.metadata['xmp:Rating']) {\n            return 0;\n        }\n        \n        return Number.parseInt(this.state.metadata['xmp:Rating']);\n    }\n\n    render = () => {\n        // console.log('Render file details: \\n' + JSON.stringify(this.props.fileItem));\n\n        const downloadIcon = <DownloadIcon size={24} marginRight={5}/>\n        \n        return <Pane zIndex={1} flexShrink={0} elevation={0} backgroundColor=\"white\">\n            <Pane padding={16} borderBottom=\"muted\">\n                <Heading size={600}>{this.props.fileItem.basename}</Heading>\n            </Pane>\n            <Pane display=\"inline-flex\" alignItems=\"center\">\n                <Button appearance=\"primary\" intent=\"success\" is=\"a\" margin={20} iconBefore={downloadIcon} href={this.getDownloadLink()} target=\"_blank\" disabled={!this.context.connectionValid}>Download</Button>                \n                <RatingPane rating={this.getRating()} maxRating={5} marginRight={10} marginLeft={10}/>\n            </Pane>\n            <Pane display=\"flex\" gridTemplateColumns=\"auto\">\n                {this.renderTags()}\n            </Pane>\n            <Pane>\n                {this.renderImageTabs()}\n            </Pane>\n        </Pane>\n    }\n}","\nimport { Card, Icon, Pane, DocumentIcon, Link, Text, InfoSignIcon, DownloadIcon, MoreIcon, Table, Button, Position, Popover, Menu } from 'evergreen-ui';\nimport { Component } from 'react';\nimport { DateTime } from 'luxon';\nimport { DavConfigurationContext } from '../AppSettings';\n\n\nexport default class RegularFile extends Component {\n    static contextType = DavConfigurationContext;\n\n    _capitalize = (str) => {\n        const lower = str.toLowerCase();\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\n    }\n\n    download = (fileItem) => {\n        const dlLink = this.context.davClient.getFileDownloadLink(fileItem.filename);\n        window.open(dlLink, '_blank');\n    }\n\n    renderMimeType = (mimeType) => {\n        if (typeof mimeType === 'undefined') {\n            return 'File';\n        }\n\n        if (mimeType.endsWith('json')) {\n            return 'JSON';\n        }\n\n        if (mimeType.endsWith('xml')) {\n            return 'XML';\n        }\n\n        if (mimeType.startsWith('application/')) {\n            return 'File';\n        }\n\n        if (mimeType.startsWith('image/')) {\n            return this._capitalize(mimeType.substring(6));\n        }\n\n        if (mimeType.startsWith('text/')) {\n            return this._capitalize(mimeType.substring(5)) + ' Text';\n        }\n\n        return mimeType;\n    }\n\n    renderHttpDate = (httpDate) => {\n        return DateTime.fromHTTP(httpDate).toLocaleString(DateTime.DATETIME_SHORT_WITH_SECONDS);\n    }\n\n    renderFileItemSize = () => {\n        let unite = 'bytes';\n        let taille = this.props.fileItem.size;\n        if (taille > 1024) {\n            taille = (taille / 1024).toFixed(2);\n            unite = 'KB';\n        }\n        if (taille > 1024) {\n            taille = (taille / 1024).toFixed(2);\n            unite = 'MB';\n        }\n        if (taille > 1024) {\n            taille = (taille / 1024).toFixed(2);\n            unite = 'GB';\n        }\n\n        return `${taille} ${unite}`;\n    }\n\n    renderGrid = () => {\n        let styleThumb = {\n            width: '200px',\n            height: '200px',\n            marginTop: '-15px',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center'\n        }\n\n        return (\n            <Card\n                elevation={2}\n                backgroundColor=\"white\"\n                width={200}\n                height={240}\n                margin={24}\n                display=\"flex\"\n                justifyContent=\"center\"\n                alignItems=\"center\"\n                flexDirection=\"column\"\n            >\n                <Pane style={styleThumb} background=\"tint2\">\n                    <Icon icon={DocumentIcon} size={48} color=\"success\" />\n                </Pane>\n\n                <Pane display=\"inline-flex\" alignItems=\"center\" justifyContent=\"space-between\" style={{ width: '190px', height: '18px', margin: '5px' }}>\n                    <Link href=\"#\" onClick={(evt) => { this.props.handleShowDetails(this.props.fileItem) }} borderBottom=\"none\"><Icon icon={InfoSignIcon} color=\"info\" /></Link>\n                    <Text style={{ overflow: 'hidden', maxWidth: '155px', maxHeight: '24px' }}>{this.props.fileItem.basename}</Text>\n                    <Link href={this.context.davClient.getFileDownloadLink(this.props.fileItem.filename)} target=\"_blank\" borderBottom=\"none\"><DownloadIcon color=\"success\" /></Link>\n                </Pane>\n            </Card>\n        );\n    }\n\n    renderActionMenu = () => {\n        return <Popover\n            position={Position.BOTTOM_RIGHT}\n            content={\n                <Menu>\n                    <Menu.Group>\n                        <Menu.Item icon={InfoSignIcon} intent=\"info\" onSelect={() => { this.props.handleShowDetails(this.props.fileItem) }}>Details...</Menu.Item>\n                        <Menu.Item icon={DownloadIcon} intent=\"success\" onSelect={() => { this.download(this.props.fileItem)} }>Download...</Menu.Item>\n                    </Menu.Group>\n                </Menu>\n            }            \n        >\n            <Button appearance=\"minimal\" intent=\"none\" boxShadow=\"none\" border=\"none\"><MoreIcon/></Button>\n        </Popover>\n    }\n\n    renderTable = () => {\n        return <Table.Row key={this.props.fileItem.basename} isSelectable height={32}>\n            <Table.TextCell textAlign=\"center\" maxWidth={48}>\n                <DocumentIcon size={16} />\n            </Table.TextCell>\n            <Table.TextCell textAlign=\"left\">\n                <Link href={this.context.davClient.getFileDownloadLink(this.props.fileItem.filename)} target=\"_blank\" borderBottom=\"none\">\n                    {this.props.fileItem.basename}\n                </Link>\n            </Table.TextCell>\n            <Table.TextCell textAlign=\"left\">\n                {this.renderMimeType(this.props.fileItem.mime)}\n            </Table.TextCell>\n            <Table.TextCell textAlign=\"left\">\n                {this.renderFileItemSize()}\n            </Table.TextCell>\n            <Table.TextCell textAlign=\"left\">\n                {this.renderHttpDate(this.props.fileItem.lastmod)}\n            </Table.TextCell>\n            <Table.TextCell textAlign=\"center\">\n                {this.renderActionMenu()}\n            </Table.TextCell>\n        </Table.Row>\n    }\n\n    render = () => {\n        switch (this.props.displayMode) {\n            case 'grid':\n                return this.renderGrid();\n\n            case 'table':\n                return this.renderTable();\n\n            default:\n                console.log(`Invalid display mode: ${this.props.displayMode}. Using grid as a default.`);\n                return this.renderGrid();\n        }\n    }\n}","\nimport { Card, Icon, Text, Pane, FolderCloseIcon, Link, Table } from 'evergreen-ui';\n\nimport RegularFile from './RegularFile';\n\nexport default class Folder extends RegularFile {\n\n    renderGrid = () => {\n        let styleThumb = {\n            width: '200px',\n            height: '200px',\n            marginTop: '-15px',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center'\n        }\n\n        return (\n            <Card\n                elevation={2}\n                backgroundColor=\"white\"\n                width={200}\n                height={240}\n                margin={24}\n                display=\"flex\"\n                justifyContent=\"center\"\n                alignItems=\"center\"\n                flexDirection=\"column\"\n            >   \n                <Link href=\"#\" onClick={(evt) => this.props.handleNavigate(this.props.fileItem.basename)} borderBottom=\"none\">             \n                    <Pane style={styleThumb} background=\"tint2\">\n                        <Icon icon={FolderCloseIcon} size={48} color=\"#F7D154\" />\n                    </Pane>\n                    <Pane display=\"inline-flex\" alignItems=\"center\" justifyContent=\"center\" width={190} height={18} margin={5}>\n                        <FolderCloseIcon color=\"#F7D154\"/>\n                        <Text overflow=\"hidden\" maxWidth={155} maxHeight={24}>{this.props.fileItem.basename}</Text>                        \n                    </Pane>                    \n                </Link>\n            </Card>\n        );\n    }\n\n    renderTable = () => {\n        return <Table.Row key={this.props.fileItem.basename} isSelectable justifyContent=\"space-between\" height={32}>\n              <Table.TextCell textAlign=\"center\" maxWidth={48}>\n                <FolderCloseIcon color=\"#F7D154\" size={16}/>\n              </Table.TextCell>\n              <Table.TextCell textAlign=\"left\">\n                  <Link href=\"#\" onClick={(evt) => this.props.handleNavigate(this.props.fileItem.basename)} borderBottom=\"none\">                  \n                  {this.props.fileItem.basename}\n                  </Link>\n                </Table.TextCell>\n                <Table.TextCell textAlign=\"left\">\n                    Folder\n                </Table.TextCell>\n                <Table.TextCell textAlign=\"left\">\n                    &nbsp;                    \n                </Table.TextCell>\n                <Table.TextCell textAlign=\"left\">\n                      {this.renderHttpDate(this.props.fileItem.lastmod)}\n                </Table.TextCell>\n                <Table.TextCell textAlign=\"center\">\n                    &nbsp;\n                </Table.TextCell>\n            </Table.Row>\n    }\n}","\nimport { Card, Icon, Link, Pane, Text, InfoSignIcon, DownloadIcon, Table } from 'evergreen-ui';\n\nimport RegularFile from './RegularFile';\n\nimport { DavConfigurationContext } from '../AppSettings';\n\nexport default class Image extends RegularFile {\n    static contextType = DavConfigurationContext;\n\n    constructor() {\n        super();\n        this.state = {\n            thumb: null\n        }\n    }\n\n    componentDidMount = () => {\n        this.setState({\n            thumb: null\n        }, () => this.generateThumb());\n    }\n\n    generateThumb = () => {\n        const req = {\n            \"filename\": this.props.fileItem.filename\n        }\n\n        const that = this;\n        fetch(this.context.getThumbApiUrl(), { \n            method: 'POST',\n            body: JSON.stringify(req),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n        .then(res => res.blob())\n        .then(res => {\n            var reader = new FileReader();\n            reader.readAsDataURL(res);\n            reader.onloadend = function() {\n                var base64data = reader.result;\n\n                // put that into state\n                that.setState(prev => {\n                    return {\n                        thumb: base64data\n                    }\n                });   \n            }                   \n        })\n        .catch(err => console.log(`Could not generate thumb for file ${this.props.fileItem.filename}\\nReason: ${err}`));\n    }\n\n    renderGrid = () => {\n        let styleThumb = {};\n        if (this.state.thumb !== null) {\n            const imgUrl = 'url(' + this.state.thumb + ')';\n            styleThumb = {\n                backgroundImage: imgUrl,\n                backgroundPosition: 'center',\n                backgroundSize: 'cover',\n                width: '200px',\n                height: '200px',\n                marginTop: '-15px'\n            }        \n        }        \n\n        return (\n            <Card\n                elevation={2}\n                backgroundColor=\"white\"\n                width={200}\n                height={240}\n                margin={24}\n                display=\"flex\"\n                justifyContent=\"center\"\n                alignItems=\"center\"\n                flexDirection=\"column\"\n            > \n                <div style={styleThumb}>&nbsp;</div>\n                <Pane display=\"inline-flex\" alignItems=\"center\" justifyContent=\"space-between\" width={190} height={18} margin={5}>\n                    <Link href=\"#\" borderBottom=\"none\" onClick={(evt) => {this.props.handleShowDetails(this.props.fileItem)}}><Icon icon={InfoSignIcon} color=\"info\"/></Link>\n                    <Text overflow=\"hidden\" maxWidth={155} maxHeigh={24}>{this.props.fileItem.basename}</Text>\n                    <Link href={this.context.davClient.getFileDownloadLink(this.props.fileItem.filename)} target=\"_blank\" borderBottom=\"none\"><DownloadIcon color=\"success\"/></Link>\n                </Pane>\n            </Card>\n        );\n    }\n\n    renderTable = () => {\n\n        let styleThumb = {};\n        if (this.state.thumb !== null) {\n            const imgUrl = 'url(' + this.state.thumb + ')';\n            styleThumb = {\n                backgroundImage: imgUrl,\n                backgroundPosition: 'center',\n                backgroundSize: 'cover',\n                width: '24px',\n                height: '20px',\n                margin: '0px'\n            }        \n        } \n\n        return <Table.Row key={this.props.fileItem.basename} isSelectable justifyContent=\"space-between\" height={32}>\n              <Table.TextCell textAlign=\"center\" maxWidth={48}>\n                <div style={styleThumb}></div>\n              </Table.TextCell>\n              <Table.TextCell textAlign=\"left\">\n                  <Link href={this.context.davClient.getFileDownloadLink(this.props.fileItem.filename)} target=\"_blank\" borderBottom=\"none\">\n                      {this.props.fileItem.basename}\n                  </Link>                \n                </Table.TextCell>\n                <Table.TextCell textAlign=\"left\">\n                    {this.renderMimeType(this.props.fileItem.mimeType)}\n                </Table.TextCell>\n                <Table.TextCell textAlign=\"left\">\n                    {this.renderFileItemSize()}\n                </Table.TextCell>\n                <Table.TextCell textAlign=\"left\">\n                    {this.renderHttpDate(this.props.fileItem.lastmod)}\n                </Table.TextCell>\n              <Table.TextCell textAlign=\"center\">\n                  {this.renderActionMenu()}\n              </Table.TextCell>\n            </Table.Row>\n    }\n}","import { Component } from \"react\"\nimport { EmptyState, Pane, Spinner, Table } from \"evergreen-ui\";\n\nimport Folder from './Folder';\nimport Image from './Image';\nimport RegularFile from \"./RegularFile\";\n\nimport { DavConfigurationContext } from '../AppSettings';\n\n/**\n * Component to display the directory content (based on two props : folders and files) either by displaying a list of files \n * or a grid with thumbnails. The user choose how to display directory contents using the displayMode property.\n */\nexport default class DavDirectoryPane extends Component {\n    static contextType = DavConfigurationContext;\n\n    /**\n     * Ensure filter is cleared out before navigating to a new folder\n     */\n    navigate = (folderName) => {\n        this.setState({\n            filter: '',\n            filterRegExp: new RegExp('.*', 'i')\n        }, () => { this.props.handleNavigate(folderName) }\n        );\n    }\n\n    renderFolders = () => {\n        let folders = this.props.folders\n            .filter(folder => folder.basename.search(this.context.filterRegExp) !== -1)\n            .map((directory, index) => {\n            return <Folder key={'dir_' + index} \n                           fileItem={directory} \n                           displayMode={this.props.displayMode}\n                           handleNavigate={this.navigate} \n                           handleShowDetails={this.props.handleShowDetails} />\n        });\n        return folders;\n    }\n\n    renderFiles = () => {\n        let images = this.props.files\n            .filter(file => file.basename.search(this.context.filterRegExp) !== -1)\n            .map((file, index) => {\n            if (this.context.isImageFile(file.basename)) {\n                return <Image key={'file_' + index} \n                              fileItem={file}\n                              displayMode={this.props.displayMode}\n                              handleShowDetails={this.props.handleShowDetails} />\n            } else {\n                return <RegularFile key={'file_' + index} \n                                    fileItem={file}\n                                    displayMode={this.props.displayMode} \n                                    handleShowDetails={this.props.handleShowDetails} />\n            }\n        });\n        return images;\n    }  \n\n    renderLoadingState = () => {\n        return <EmptyState\n            background=\"light\"\n            title=\"Loading...\"\n            orientation=\"horizontal\"\n            icon={<Spinner color=\"#C1C4D6\" />}\n            iconBgColor=\"#EDEFF5\"\n            description=\"This can take some time depending of the number of folders and files contained in this directory.\"\n        />\n    }\n\n    renderFoldersAndFiles = () => {\n        return <>\n            {this.renderFolders()}\n            {this.renderFiles()}\n        </>\n    }\n\n    renderDirectoryContentsGrid = () => {\n        return <Pane display=\"flex\" flexWrap=\"wrap\" justifyContent=\"space-evenly\" background=\"overlay\">\n                 { this.props.loading ? this.renderLoadingState() : this.renderFoldersAndFiles() }\n            </Pane>\n    }\n\n    renderDirectoryContentsTable = () => {\n        return <Table>\n            <Table.Head height={32}>\n                <Table.TextHeaderCell textAlign=\"center\" maxWidth={48}>&nbsp;</Table.TextHeaderCell>\n                <Table.TextHeaderCell textAlign=\"left\">Name</Table.TextHeaderCell>\n                <Table.TextHeaderCell textAlign=\"left\">Type</Table.TextHeaderCell>\n                <Table.TextHeaderCell textAlign=\"left\">Size</Table.TextHeaderCell>\n                <Table.TextHeaderCell textAlign=\"left\">Modified</Table.TextHeaderCell>\n                <Table.TextHeaderCell textAlign=\"center\">Actions</Table.TextHeaderCell>\n            </Table.Head>\n        <Table.Body>\n            { this.props.loading ? this.renderLoadingState() : this.renderFoldersAndFiles() }\n        </Table.Body>\n      </Table>\n    }\n\n    render = () => {\n        let directoryContents;\n        switch (this.props.displayMode) {\n            case 'grid': \n                directoryContents = this.renderDirectoryContentsGrid();\n                break;\n\n            case 'table':\n                directoryContents = this.renderDirectoryContentsTable();\n                break;\n\n            default:\n                console.log(`Invalid display mode ${this.props.displayMode}. Using grid as a default.`);\n                directoryContents = this.renderDirectoryContentsGrid();\n                break;\n        }\n\n        return directoryContents;\n    }\n}","import { Component } from \"react\";\nimport { ChevronRightIcon, HomeIcon } from 'evergreen-ui';\nimport { Pane, Link } from 'evergreen-ui';\n\nexport default class DavBreadCrumb extends Component {\n\n    render = () => {\n        let path = this.props.currentDirectory;\n\n        const chevronIcon = <ChevronRightIcon size={18} marginLeft={5} marginRight={5} />\n        const homeIcon = <HomeIcon size={18} marginLeft={5} marginRight={5} />\n\n        let currentDirs = path === '/' ? [''] : path.split('/');\n        let navDirs = [];\n        let breadCrumb = currentDirs.map((dir, index) => {\n            const icon = index === 0 ? homeIcon : chevronIcon;\n            navDirs.push(dir);\n            const fullPath = navDirs.join('/');\n            return <Link href=\"#\" display=\"flex\" alignItems=\"center\" borderBottom=\"none\" key={index + 1} onClick={() => {                \n                this.props.handleNavigate(dir === '' ? '/' : fullPath);\n            }}>{icon}{dir}</Link>\n        });\n\n        return <Pane display=\"flex\" padding={8} background=\"tint2\">\n            {breadCrumb}\n        </Pane>\n    }\n}","import { Component, Fragment } from \"react\";\n\nimport { Pane, Link } from \"evergreen-ui\";\nimport { GridViewIcon, ListIcon } from \"evergreen-ui\";\n\nimport { DavConfigurationContext } from '../AppSettings';\n\nimport DavBreadCrumb from \"./DavBreadCrumb\";\nimport React from \"react\";\n\nexport default class DavToolBar extends Component {\n    static contextType = DavConfigurationContext;\n\n    renderDisplayTools = () => {\n        return <Fragment>\n            <Link href=\"#\" style={{ display: 'flex', alignItems: 'center' }} onClick={(evt) => this.props.handleDisplayMode('grid')}>\n                <GridViewIcon size={18} style={{ marginLeft: '5px', marginRight: '5px' }} />\n            </Link>\n            &nbsp;\n            <Link href=\"#\" style={{ display: 'flex', alignItems: 'center' }} onClick={(evt) => this.props.handleDisplayMode('table')}>\n                <ListIcon size={18} style={{ marginLeft: '5px', marginRight: '5px' }} />\n            </Link>            \n        </Fragment>\n    }\n\n    render = () => {\n        return <Pane zIndex={1} flexShrink={0} background=\"tint2\" display=\"grid\" gridTemplateColumns=\"auto 1fr\">                                \n                <DavBreadCrumb handleNavigate={this.props.handleNavigate} currentDirectory={this.props.currentDirectory} />\n                <Pane justifySelf=\"end\" display=\"inline-flex\" alignItems=\"center\">\n                   {this.renderDisplayTools()}\n                </Pane>\n            </Pane>\n    }\n}","const Tree = ({children}) => {\n    return (\n    <div style={{paddingTop: '10px'}}>{children}</div>\n    );\n} \n\nexport default Tree;","\nimport React, {Component} from 'react';\n\nimport { Text, ChevronDownIcon, ChevronRightIcon, FolderCloseIcon } from 'evergreen-ui';\nimport { Icon, FolderOpenIcon } from 'evergreen-ui';\nimport { DavConfigurationContext } from '../../AppSettings';\n\nconst styles = {\n    folderLabel: {\n        display: 'grid',\n        justifyItems: 'start',\n        gridTemplateColumns: 'auto auto 1fr',\n        span: {\n          marginLeft: '5px'\n        },\n        fontFamily: 'Lato'\n    },\n    collapsibleOpen: {\n        height: 'auto',\n        overflow: 'hidden',\n        paddingLeft: '20px'\n    },\n    collapsibleClosed: {\n        height: '0px',\n        overflow: 'hidden',\n        paddingLeft: '20px'\n    }\n  }\n\nclass TreeFolder extends Component {\n  static contextType = DavConfigurationContext;\n\n  constructor() {\n    super();\n    this.state = {\n      isOpen: false,\n      subDirs: []\n    }\n  }\n\n  getDirectoryContents = async () => {\n    let dirs = [];\n\n    if (this.context.connectionValid) {\n        const directoryItems = await this.context.davClient.getDirectoryContents(this.props.absolutePath);\n        dirs = directoryItems.filter(item => { return item.type === 'directory' });\n\n        this.setState({\n          subDirs: dirs\n        });\n    }\n  }\n\n  handleToggle = (evt) => {\n    this.setState({\n      isOpen: !this.state.isOpen\n    }, () => {\n      if (this.state.isOpen && this.state.subDirs.length === 0) {\n        this.getDirectoryContents();\n      }\n    });\n  }\n\n  handleClick = (evt) => {\n    if (this.state.subDirs.length === 0) {\n      this.getDirectoryContents();\n      this.setState({\n        isOpen: true\n      });\n    }\n\n    this.props.handleNavigate(this.props.absolutePath);\n  }\n\n  renderSubDirectories = () => {\n    return this.state.subDirs.map((dir, index) => {\n      return <TreeFolder key={`${this.props.id}-${index}`} basename={dir.basename} absolutePath={`${this.props.absolutePath}/${dir.basename}`} handleNavigate={this.props.handleNavigate} />\n    });\n  }\n\n  render = () => {\n    \n    const plusIcon = this.state.isOpen ? ChevronDownIcon : ChevronRightIcon;\n    const folderIcon = this.state.isOpen ? FolderOpenIcon : FolderCloseIcon;\n\n    return <div>\n              <div style={styles.folderLabel}>\n                <Icon onClick={this.handleToggle} icon={plusIcon} size={16} marginRight=\"10\" cursor=\"pointer\"/>\n                <div style={styles.folderLabel} onClick={this.handleClick}>\n                  <Icon icon={folderIcon} size={16} color=\"#F7D154\" cursor=\"pointer\"/>\n                  <Text style={styles.folderLabel.span} cursor=\"pointer\">{this.props.basename}</Text>\n                </div>\n              </div>\n              <div style={this.state.isOpen ? styles.collapsibleOpen : styles.collapsibleClosed}>\n                {this.renderSubDirectories()}\n              </div>\n            </div>\n  }\n}\n\nexport default TreeFolder;","\nimport { Component } from \"react\";\nimport { Pane, Heading } from 'evergreen-ui';\n\nimport Tree from './tree/Tree';\nimport TreeFolder from './tree/TreeFolder';\n\nclass DavSideBar extends Component {\n    render = () => {\n        return <Pane background=\"blueTint\" elevation={0} padding={15} display=\"grid\" gridTemplateRows=\"auto auto 1fr\" gridTemplateColumns=\"auto\" overflowX=\"scroll\" height=\"100%\">  \n            <Pane background=\"blueTint\">\n                <Heading size={900} color=\"neutral\" textAlign=\"left\">My files</Heading>\n            </Pane>\n            <Pane background=\"blueTint\" marginTop={15}>\n                <Heading size={600} color=\"neutral\" textAlign=\"left\">File manager</Heading>\n            </Pane>\n            <Tree>\n                {this.props.rootDirs.map((dir, index) => {\n                    return <TreeFolder key={`treefolder-${index}`} id={`treefolder-${index}`} absolutePath={`/${dir.basename}`} basename={dir.basename} handleNavigate={this.props.handleNavigate} />\n                })}\n            </Tree>\n        </Pane>\n    }\n}\n\nexport default DavSideBar;","\nimport { Component } from 'react';\n\nimport { Pane, SideSheet, Heading, Spinner } from 'evergreen-ui';\n\nimport { DavConfigurationContext } from '../AppSettings';\n\nimport DavHeader from '../components/DavHeader';\nimport FileDetailsPane from '../components/FileDetailsPane';\nimport DavDirectoryPane from '../components/DavDirectoryPane';\nimport DavToolBar from '../components/DavToolBar';\n\nimport { Navigate } from 'react-router';\nimport DavSideBar from '../components/DavSideBar';\n\n/**\n * The DAV Explorer Pane is the main view component. It composes the page and has functions to interact with\n * the DAV Client. It uses sub components such as DavToolBar and DavDirectoryPane to render things returned \n * by the DavClient.\n */\nexport default class DavExplorerView extends Component {\n    static contextType = DavConfigurationContext;\n\n    constructor() {\n        super();\n\n        console.log('DavExplorerPane constrcutor...');\n\n        this.state = {\n            currentDirectory: null,\n            directories: [],\n            files: [],\n            rootDirs: [],\n            showDetails: false,\n            displayMode: 'table',\n            loading: false\n        }\n    }\n\n    componentDidMount = () => {\n        console.info('Dav Explorer Component did mount. setting current directory to /...');\n        if (this.state.currentDirectory === null) {\n            this.setState({\n                currentDirectory: '/',\n                loading: true\n            }, () => this.doGetDirectoryContents());\n        }\n    }\n\n    getDirectoryContents = () => {\n        this.setState({\n            loading: true\n        }, () => this.doGetDirectoryContents());\n    }\n\n    doGetDirectoryContents = async () => {\n        let dirs = [];\n        let files = [];\n\n        if (this.context.connectionValid) {\n            const directoryItems = await this.context.davClient.getDirectoryContents(this.state.currentDirectory);\n\n            dirs = directoryItems.filter(item => { return item.type === 'directory' });\n            files = directoryItems.filter(item => { return item.type === 'file' });\n\n            if ('/' === this.state.currentDirectory) {\n                this.setState({\n                    rootDirs: dirs\n                });\n            }\n        } else {\n            console.error('Cannot get directory contents since connectin is not valid.');\n        }\n\n        this.setState({\n            directories: dirs,\n            files: files,\n            loading: false\n        });\n    }\n\n    navigate = (folderName) => {\n        const separator = this.state.currentDirectory.endsWith('/') || folderName.startsWith('/') ? '' : '/';\n        let newDir = this.state.currentDirectory + separator + folderName;\n        this.setState((prev) => {\n            return {\n                currentDirectory: newDir,\n                files: [],\n                directories: []\n            }\n        }, () => {\n            console.log(`Navigated to ${newDir}, now get directory contents...`);\n            this.getDirectoryContents();\n        });\n    }\n\n    navigateAbsolute = (absolutePath) => {\n        this.setState((prev) => {\n            return {\n                currentDirectory: absolutePath,\n                files: [],\n                directories: []\n            }\n        }, () => {\n            console.log(`Absolute navigated to ${absolutePath}, now get directory contents...`);\n            this.getDirectoryContents();\n        });\n    }\n\n    toggleFileDetails = (fileItem) => {\n        let modified = fileItem;\n        if (modified.filename.startsWith(this.context.homeDirectory)) {\n            modified.filename = modified.filename.substring(this.context.homeDirectory.length);\n        }\n\n        this.setState({\n            showDetails: true,\n            detailedFileItem: modified\n        });\n    }\n\n    changeDisplayMode = (displayMode) => {\n        this.setState({\n            displayMode: displayMode\n        });\n    }\n\n    render = () => {\n\n        if (!this.context || !this.context.connectionValid) {\n            return <Navigate to=\"/login\" />\n        }\n\n        if (!this.state.currentDirectory) {\n            return <Pane gridTemplateColumns=\"auto\">\n                <Spinner marginX=\"auto\" marginTop={120} />\n                <Heading size={600} marginX=\"auto\" marginTop={15} textAlign=\"center\">Nico's Drive is loading...</Heading>\n            </Pane>\n        }\n\n        return <Pane display=\"grid\" gridTemplateColumns=\"1fr 4fr\" height=\"100vh\" maxHeight=\"100vh\" overflow=\"hidden\">\n            <DavSideBar rootDirs={this.state.rootDirs} handleNavigate={this.navigateAbsolute} />\n\n            <Pane display=\"grid\" gridTemplateRows=\"auto auto 1fr\" height=\"100%\" overflowY=\"scroll\">\n                <DavHeader />\n\n                <DavToolBar currentDirectory={this.state.currentDirectory}\n                    handleDisplayMode={this.changeDisplayMode}\n                    handleNavigate={this.navigateAbsolute} />\n\n                <DavDirectoryPane displayMode={this.state.displayMode}\n                    folders={this.state.directories}\n                    files={this.state.files}\n                    loading={this.state.loading}\n                    handleNavigate={this.navigate}\n                    handleShowDetails={this.toggleFileDetails} />\n\n            </Pane>\n\n            <SideSheet id=\"side-details\"\n                isShown={this.state.showDetails}\n                onCloseComplete={() => this.setState({ showDetails: false })}\n            >\n                <FileDetailsPane fileItem={this.state.detailedFileItem} davClient={this.state.davClient} />\n            </SideSheet>\n        </Pane>\n    }\n}","import { Component } from 'react';\n\nimport { Button, InfoSignIcon, Link, LogInIcon } from 'evergreen-ui';\nimport { Link as ReactRouterLink } from 'react-router-dom';\n\nimport { DavConfigurationContext } from '../../AppSettings';\n\nimport './WelcomePage.css';\n\nexport default class WelcomePage extends Component {\n    static contextType = DavConfigurationContext;\n\n    showLoginDialog = () => {\n        this.context.setShowConnectionDialog(true);\n    }\n\n    render = () => {\n        return <header id=\"header\">\n\t\t\t\t<div className=\"content\">\n\t\t\t\t\t<h1><a href=\"/\">Nico's Drive</a></h1>\n\t\t\t\t\t<p>The private online storage solution.<br />\n\t\t\t\t\tBackup your memories ... <strong>automatically!</strong><br />\n                    Access your files anytime, anywhere, just like a shared drive,<br />\n                    On any computer.</p>\n\t\t\t\t\t<ul className=\"actions\">\n                        <li><Button is=\"div\" onClick={() => window.location.assign('https://github.com/hironico/nico.drive#readme')} appearance=\"default\" height={60} padding={28} iconBefore={InfoSignIcon} fontSize={22}>Learn more</Button></li>\n                        <li><Button is=\"div\" appearance=\"primary\" intent=\"success\" height={60} padding={28} iconBefore={LogInIcon} fontSize={22}>\n                            <Link is={ReactRouterLink} to=\"/login\">Login</Link>\n                            </Button></li>\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"image phone\"><div className=\"inner\"><img src=\"images/screen.jpg\" alt=\"\" /></div></div>\n\t\t\t</header>\n    }\n}","\nimport { React, Component } from 'react';\n\nimport appTheme from './AppTheme';\nimport {DavConfigurationProvider} from './AppSettings';\n\nimport { ThemeProvider } from 'evergreen-ui';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Routes, Route, Navigate } from 'react-router';\n\nimport LoginView from './views/LoginView';\nimport DavExplorerView from './views/DavExplorerView';\nimport WelcomePage from './components/welcome-page/WelcomePage';\n\n// theming provided by this page: https://github.com/segmentio/evergreen/issues/542\n// see also: https://evergreen.segment.com/introduction/theming\n\nclass App extends Component {\n  render = () => {\n    return <ThemeProvider value={appTheme}>      \n      <DavConfigurationProvider>\n        <BrowserRouter>\n        <Routes>\n          <Route path=\"/\" element={<WelcomePage />} />\n          <Route path=\"login\" element={<LoginView />} />\n          <Route path=\"explorer\" element={<DavExplorerView />} />\n          <Route path=\"*\" element={<Navigate to=\"/\" />} />\n        </Routes>\n        </BrowserRouter>\n        </DavConfigurationProvider>\n    </ThemeProvider>\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}