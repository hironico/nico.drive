{"version":3,"sources":["AppTheme.js","AppSettings.js","views/LoginView.js","components/DavHeader.js","components/RatingPane.js","components/FileDetailsPane.js","components/RegularFile.js","components/Folder.js","components/Image.js","components/DavDirectoryPane.js","components/DavBreadCrumb.js","components/DavUploadButton.js","components/DavNewFolderButton.js","components/DavToolBar.js","components/tree/Tree.js","components/tree/TreeFolder.js","components/DavSideBar.js","views/DavExplorerView.js","components/welcome-page/WelcomePage.js","App.js","reportWebVitals.js","index.js"],"names":["appTheme","merge","defaultTheme","typography","fontFamilies","display","ui","mono","components","Text","baseStyle","fontFamily","Heading","Link","defaultValue","authType","AuthType","Basic","username","davClient","davBaseUrl","davApiBaseUrl","davHomeDirectory","connectionValid","supportedFormats","filter","filterRegExp","RegExp","filterFileItems","setDavClient","client","getThumbApiUrl","getExifApiUrl","getMetadataApiUrl","getAuthUrl","isImageFile","disconnect","getUserRootDirectories","DavConfigurationContext","React","createContext","DavConfigurationProvider","value","valueStr","setState","davBaseUri","URL","proto","protocol","host","hostname","port","state","filename","startsWith","index","lastIndexOf","extention","toUpperCase","substring","indexOf","render","Provider","props","children","showConnectionDialog","Component","LoginView","componentDidMount","errorMessage","componentDidUpdate","prevProps","prevState","fetchUserRootDirectories","url","context","connectionSuccess","fetchUrl","fetch","method","headers","then","res","json","userInfo","userRootDirs","rootDirs","catch","error","console","log","testConnection","a","info","clientOptions","password","clientUrl","davContext","selectedRootDir","createClient","getDirectoryContents","contents","isLoading","onConfirm","onTxtLoginChange","evt","target","isLoginButtonDisabled","renderErrorMessage","Alert","intent","renderLoginForm","Pane","gridTemplateColumns","margin","padding","elevation","marginTop","marginLeft","marginRight","marginBottom","background","is","textAlign","textShadow","TextInputField","id","disabled","onChange","placeholder","label","autoComplete","type","e","Label","Combobox","items","selected","description","Button","iconBefore","LogInIcon","appearance","onClick","Paragraph","to","window","location","contextType","DavHeader","paddingTop","paddingBottom","paddingLeft","justifyItems","SearchInput","width","justifySelf","Popover","position","Position","BOTTOM_RIGHT","content","Menu","Group","Item","icon","InfoSignIcon","Badge","color","Divider","LogOutIcon","Avatar","name","size","style","cursor","RatingPane","stars","rating","maxRating","lightedStar","StarIcon","push","unlightedStar","StarEmptyIcon","alignItems","FileDetailsPane","loadImageInformation","loadMetaDataInformation","getDownloadLink","getFileDownloadLink","fileItem","metaUrl","paths","split","homeDir","length","exifRequest","body","JSON","stringify","imageData","err","metadata","tags","metadataRequest","renderFileItemSize","unite","taille","toFixed","renderImageTabs","isImage","basename","Tablist","flexBasis","tabs","tab","map","Tab","onSelect","selectedIndex","isSelected","panelTab","renderFileDetails","renderImageDetails","renderMetadataDetails","role","Table","Head","height","TextHeaderCell","Body","Row","TextCell","lastmod","rows","image","renderEmptyDetails","Object","keys","key","message","EmptyState","title","orientation","SearchIcon","iconBgColor","renderTags","TagInput","inputProps","values","flexGrow","getRating","Number","parseInt","downloadIcon","DownloadIcon","zIndex","flexShrink","backgroundColor","borderBottom","href","RegularFile","_capitalize","str","lower","toLowerCase","charAt","slice","download","dlLink","open","renderMimeType","mimeType","endsWith","renderHttpDate","httpDate","DateTime","fromHTTP","toLocaleString","DATETIME_SHORT_WITH_SECONDS","renderGrid","Card","justifyContent","flexDirection","DocumentIcon","handleShowDetails","overflow","maxWidth","maxHeight","renderActionMenu","DeleteIcon","handleDelete","boxShadow","border","MoreIcon","renderTable","isSelectable","mime","displayMode","Folder","handleNavigate","FolderCloseIcon","Image","thumb","generateThumb","req","that","blob","reader","FileReader","readAsDataURL","onloadend","base64data","result","prev","styleThumb","backgroundImage","backgroundPosition","backgroundSize","maxHeigh","DavDirectoryPane","shouldUpdateState","folders","currentRegExp","folder","search","files","file","navigate","folderName","delete","isDeleteDialogShown","fileItemToDelete","doDelete","handleDeleteFileItem","renderFolders","directory","renderFiles","renderLoadingState","Spinner","renderNothingFound","renderEmptyState","renderFoldersAndFiles","renderDirectoryContentsGrid","flexWrap","loading","renderDirectoryContentsTable","renderDeleteConfirmDialog","Dialog","isShown","onCloseComplete","hasFooter","directoryContents","DavBreadCrumb","path","currentDirectory","chevronIcon","ChevronRightIcon","homeIcon","HomeIcon","currentDirs","navDirs","breadCrumb","dir","fullPath","join","DavUploadButton","uploadFile","showOpenFilePicker","multiple","handles","currentUploads","doUploadFiles","handle","getFile","targetFileName","uploadOption","contentLength","putFileContents","toaster","danger","finally","splice","status","UploadIcon","DavNewFolderButton","createFolder","newDir","newFolderName","createDirectory","popoverShown","destDir","moveToFolder","close","gridTemplateRows","gridColumnStart","gridColumnEnd","TextInput","Checkbox","checked","alignSelf","FolderNewIcon","DavToolBar","renderFolderTools","renderDisplayTools","handleDisplayMode","GridViewIcon","ListIcon","Tree","styles","folderLabel","span","collapsibleOpen","collapsibleClosed","TreeFolder","snapshot","absolutePath","isOpen","lastIndex","parentFolder","dirs","directoryItems","item","subDirs","handleToggle","handleClick","renderSubDirectories","plusIcon","ChevronDownIcon","folderIcon","FolderOpenIcon","DavSideBar","overflowX","DavExplorerView","doGetDirectoryContents","directories","separator","navigateAbsolute","toggleFileDetails","modified","homeDirectory","showDetails","detailedFileItem","changeDisplayMode","deleteFileItem","deleteFile","overflowY","SideSheet","marginX","WelcomePage","showLoginDialog","setShowConnectionDialog","className","assign","fontSize","ReactRouterLink","src","alt","App","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.05efa543.chunk.js","sourcesContent":["import { defaultTheme } from 'evergreen-ui'\nimport { merge } from 'lodash'\n\nconst appTheme = merge({}, defaultTheme, {\n  typography: {\n    fontFamilies: {\n      display: 'Lato, sans-serif',\n      ui: 'Lato, sans-serif',      \n      mono: '\"SF Mono\", monospace'\n    }\n  },\n  components: {\n    Text: {\n      baseStyle: {\n        fontFamily: 'Lato, sans-serif'\n      }\n    },\n    Heading: {\n      baseStyle: {\n        fontFamily: 'Lato, sans-serif'\n      }\n    },\n    Link: {\n      baseStyle: {\n        fontFamily: 'Lato, sans-serif'\n      }\n    }\n  }\n})\n\nexport default appTheme","import React, { Component } from \"react\";\nimport { AuthType } from \"webdav\";\n\nconst defaultValue = {\n    authType: AuthType.Basic,\n    username: '',\n    davClient: null,\n    davBaseUrl: null,\n    davApiBaseUrl: null,\n    davHomeDirectory: null, \n    connectionValid: false,\n    supportedFormats: ['JPEG', 'JPG', 'PNG', 'WEBP', 'AVIF', 'TIFF', 'TIF', 'GIF', 'SVG', 'CR2', 'DNG'],\n    filter: '',\n    filterRegExp: new RegExp('.*', 'i'),\n    filterFileItems: (filter) => { },\n    setDavClient: (client, davBaseUrl) => { },\n    getThumbApiUrl: () => { },\n    getExifApiUrl: () => { },\n    getMetadataApiUrl: () => { },\n    getAuthUrl: () => { },\n    isImageFile: () => { },\n    disconnect: () => { },\n    getUserRootDirectories: () => { }\n}\n\nconst DavConfigurationContext = React.createContext(defaultValue);\n\nclass DavConfigurationProvider extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            authType: AuthType.Basic,\n            username: '',\n            davClient: null,\n            davBaseUrl: null,\n            davApiBaseUrl: null,\n            davHomeDirectory: null,            \n            connectionValid: false,\n            showConnectionDialog: false,\n            supportedFormats: ['JPEG', 'JPG', 'PNG', 'WEBP', 'AVIF', 'TIFF', 'GIF', 'SVG', 'CR2', 'DNG'],\n            filter: '',\n            filterRegExp: new RegExp('.*', 'i'),\n            filterFileItems: this.filterFileItems,\n            setDavClient: this.setDavClient,\n            getThumbApiUrl: this.getThumbApiUrl,\n            getExifApiUrl: this.getExifApiUrl,\n            getMetadataApiUrl: this.getMetadataApiUrl,\n            getAuthUrl: this.getAuthUrl,\n            isImageFile: this.isImageFile,\n            disconnect: this.disconnect\n        }\n    }\n\n    filterFileItems = (value) => {\n        let valueStr = value === null || value === '' ? '.*' : value;\n        this.setState({\n            filter: value,\n            filterRegExp: new RegExp(valueStr, 'i')\n        });\n    }\n\n    setDavClient = (client, davBaseUrl, username) => {\n\n        const davBaseUri = client ? new URL(davBaseUrl) : null;\n        const proto = client ? davBaseUri.protocol : null;\n        const host = client ? davBaseUri.hostname : null;\n        const port = client ? davBaseUri.port : null;\n\n        const davApiBaseUrl = `${proto}//${host}:${port}`;\n\n        this.setState({\n            davClient: client,\n            davBaseUrl: davBaseUrl,\n            davApiBaseUrl: davApiBaseUrl,\n            connectionValid: client ? true : false,\n            username: client ? username : ''\n        });\n    }\n\n    disconnect = () => {\n        this.setDavClient(null);\n    }\n\n    getThumbApiUrl = () => {\n        return `${this.state.davApiBaseUrl}/thumb`;\n    }\n\n    getExifApiUrl = () => {\n        return `${this.state.davApiBaseUrl}/meta/exif`;\n    }\n\n    getMetadataApiUrl = () => {\n        return `${this.state.davApiBaseUrl}/meta/xmp`;\n    }\n\n    getAuthUrl = () => {\n        return `${this.state.davApiBaseUrl}/auth`;\n    }\n\n    isImageFile = (filename) => {\n        if (typeof filename === 'undefined' || filename === null) {\n            return false;\n        }\n\n        if (filename.startsWith('.')) {\n            return false;\n        }\n\n        const index = filename.lastIndexOf('.');\n        if (index < 0) {\n            return false;\n        }\n\n        const extention = filename.toUpperCase().substring(index + 1);\n\n        const formatIndex = this.state.supportedFormats.indexOf(extention);\n        return formatIndex !== -1;\n    }\n\n    render = () => {\n        return <DavConfigurationContext.Provider value={this.state}>{this.props.children}</DavConfigurationContext.Provider>\n    }\n}\n\nexport { DavConfigurationContext, DavConfigurationProvider }\n","import { Component } from 'react';\nimport { Navigate } from 'react-router';\nimport { Pane, TextInputField, Paragraph, Button, Heading, Text, Alert, LogInIcon, Combobox, Label } from 'evergreen-ui';\nimport { DavConfigurationContext } from '../AppSettings';\n\nimport { createClient, AuthType } from \"webdav\";\n\n/**\n * The login view displays the credentials input controls and authenticate the user against \n * the server credentials.\n */\nexport default class LoginView extends Component {\n    static contextType = DavConfigurationContext;\n\n    constructor() {\n        super();\n        const url = `${window.location.protocol}//${window.location.hostname}:${window.location.port}/`;\n\n        this.state = {\n            isLoading: false,\n            username: '',\n            password: '',\n            url: url,\n            userRootDirs: [],\n            selectedRootDir: '',\n            errorMessage: '',\n            davContext: 'dav',\n            connectionSuccess: false\n        }\n    }\n\n    componentDidMount = () => { \n        this.setState({\n            errorMessage: '', \n        });\n    }\n\n    componentDidUpdate = (prevProps, prevState) => {\n\n        if (prevState.username !== this.state.username) {\n            this.fetchUserRootDirectories();\n        }\n\n        if (prevState.url !== this.state.url) {\n            this.fetchUserRootDirectories();\n        }\n\n        if (this.context.davClient !== null && this.context.connectionValid) {\n            this.setState({\n                connectionSuccess: true\n            });\n        }\n    }\n\n    fetchUserRootDirectories = () => {\n\n        if ('' === this.state.username) {\n            return;\n        }\n\n        // console.log(`Fetching user root directories for user: ${this.state.username}`);\n\n        const fetchOptions = { \n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        };\n\n        const fetchUrl = `${this.state.url}auth/whois/${this.state.username}`;\n        // console.log(`Fetching from: ${fetchUrl}`);\n\n        return fetch(fetchUrl, fetchOptions)\n        .then(res => {            \n            // console.log(`Received user root dirs : ${JSON.stringify(res)}`);\n            return res.json()\n        })\n        .then(userInfo => {\n            // console.log(`Found user info for: ${this.state.username}`);            \n            this.setState({\n                userRootDirs: userInfo.rootDirs,\n                errorMessage: ''\n            });\n            return userInfo.rootDirs;\n        })\n        .catch(error => {\n            console.log(`Error while fetching user's root directories: ${error}`)\n            this.setState({\n                userRootDirs: [],\n                errorMessage: 'Error while fetching your directories: check your username or the server URL.'\n            });\n        })\n    }\n\n    testConnection = async () => {\n        console.info('Testing connection ...');\n        const clientOptions = {\n            authType: AuthType.Basic,\n            username: this.state.username,\n            password: this.state.password\n        }\n\n        const clientUrl = `${this.state.url}${this.state.davContext}/${this.state.username}${this.state.selectedRootDir}`;\n\n        const client = createClient(clientUrl, clientOptions);\n        client.getDirectoryContents('/')\n            .then(contents => {\n                this.context.setDavClient(client, clientUrl, this.state.username);\n            }).catch(error => {\n                console.info(`Could not connect to webdav: ${error}`);\n                this.context.setDavClient(null, '');\n                this.setState({\n                    errorMessage: 'Something went wrong while connecting. Check your credentials and try again.',\n                    isLoading: false,\n                    connectionSuccess: false\n                });\n            });        \n    }\n\n    onConfirm = () => {\n        this.setState({\n            isLoading: true,\n            connectionSuccess: false\n        }, () => this.testConnection());\n    }\n\n    onTxtLoginChange = (evt) => {\n        this.setState({\n            username: evt.target.value\n        });\n    }\n\n    isLoginButtonDisabled = () => {\n        return null === this.state.username || '' === this.state.username\n                || null === this.state.password || '' === this.state.password\n                || '' === this.state.selectedRootDir \n                || '' !== this.state.errorMessage \n                || '' === this.state.url\n                || this.state.isLoading;\n    }\n\n    renderErrorMessage = () => {\n        return (this.state.errorMessage !== '') ? <Alert intent=\"danger\">{this.state.errorMessage}</Alert> : <></>;\n    }\n\n    renderLoginForm = () => {\n        return <Pane display=\"grid\" gridTemplateColumns=\"auto\" margin={160} padding={20} elevation={1}>\n            <Pane marginTop={-20} marginLeft={-20} marginRight={-20} marginBottom={40} padding={10} background=\"tint2\" elevation={1}>\n                <Heading is=\"h2\" textAlign=\"center\" textShadow=\"initial\">Welcome to Nico's Drive</Heading>\n            </Pane>\n\n            <form>\n            <TextInputField id=\"txt-login\"\n                disabled={this.state.isLoading}\n                value={this.state.username}\n                onChange={this.onTxtLoginChange}\n                placeholder=\"Login name...\"\n                label=\"Login:\"\n                autoComplete='username' />\n\n            <TextInputField id=\"txt-password\"\n                disabled={this.state.isLoading}\n                type=\"password\"\n                value={this.state.password}\n                onChange={e => this.setState({ password: e.target.value })}\n                placeholder=\"Password...\"\n                label=\"Password:\"\n                autoComplete='current-password' />\n\n            <Label>Online drive to connect to:</Label>\n            <Combobox\n                items={this.state.userRootDirs}\n                onChange={selected => this.setState({selectedRootDir: selected})}\n                placeholder=\"Select one online drive...\"\n                marginBottom={20}\n                label=\"Online drive to connect to:\"\n            />\n\n            <TextInputField id=\"txt-url\"\n                disabled={this.state.isLoading}\n                value={this.state.url}\n                onChange={e => this.setState({ url: e.target.value })}\n                placeholder=\"Server url...\"\n                label=\"Base server URL:\"\n                description=\"Advanced users only.\" />\n\n            <Pane>\n                {this.renderErrorMessage()}\n                <Button is=\"div\" marginTop={16} iconBefore={LogInIcon} appearance=\"primary\" intent=\"success\" onClick={() => this.onConfirm()} disabled={this.isLoginButtonDisabled()}>\n                    {this.state.isLoading ? 'Please wait...' : 'Connect'}\n                </Button>\n                <Paragraph textAlign=\"right\">\n                    <Text>Not a member ? Just kindly ask... :)</Text>\n                </Paragraph>\n            </Pane>\n            </form>\n        </Pane>\n    }\n\n    render = () => {\n        // if we have a dav client properly configured then must go to the explorer;\n        // to login again we must log out first !\n        return (this.state.connectionSuccess) ? <Navigate to='/explorer' /> : this.renderLoginForm();\n    }\n}","import { Component } from \"react\";\n\nimport { Pane, SearchInput, Position, Popover, Avatar, Menu, Badge } from 'evergreen-ui';\nimport { InfoSignIcon, LogOutIcon } from 'evergreen-ui';\n\nimport { DavConfigurationContext } from \"../AppSettings\";\n\n/**\n * The DavHeader contains the search bar for filtering currently displayed file items and the avatar menu for user information\n * It uses the context to operate on file items filtering and login information.\n */\nclass DavHeader extends Component {\n    static contextType = DavConfigurationContext;\n\n    render = () => {\n        return <Pane background=\"tint2\" display=\"grid\" gridTemplateColumns=\"1fr auto\" paddingTop={15} paddingBottom={15} paddingLeft={15} justifyItems=\"stretch\">\n            <SearchInput placeholder=\"Search something...\" width=\"75%\" justifySelf=\"center\" onChange={(e) => this.context.filterFileItems(e.target.value)} value={this.context.filter} />\n            <Popover\n                justifySelf=\"end\"\n                position={Position.BOTTOM_RIGHT}\n                content={\n                    <Menu>\n                        <Menu.Group>\n                            <Menu.Item icon={InfoSignIcon} intent=\"success\"><Badge color=\"green\">{this.context.username}</Badge></Menu.Item>\n                            <Menu.Item>{this.context.davBaseUrl}</Menu.Item>\n                        </Menu.Group>\n                        <Menu.Divider />\n                        <Menu.Group>\n                            <Menu.Item icon={LogOutIcon} intent=\"danger\" onClick={() => { this.context.disconnect() }}>\n                                Disconnect\n                            </Menu.Item>\n                        </Menu.Group>\n                    </Menu>\n                }\n            >\n                <Avatar name={this.context.username} size={32} marginLeft={15} marginRight={15} style={{ cursor: 'pointer' }} justifySelf=\"end\" />\n            </Popover>\n        </Pane>\n    }\n}\n\nexport default DavHeader;","import { Component } from 'react';\nimport { Pane, StarIcon, StarEmptyIcon } from 'evergreen-ui';\n\nexport default class RatingPane extends Component {\n\n    render = () => {\n        let stars = [];\n\n        let rating = this.props.rating ? this.props.rating : 0;\n        let maxRating = this.props.maxRating ? this.props.maxRating : 5;\n        if (maxRating < rating) {\n            maxRating = rating;\n        }\n\n        let size = this.props.size ? this.props.size : 24;\n        \n        for(let index = 0; index < rating; index++) {\n            const lightedStar = <StarIcon key={index} color=\"#FBE6A2\" size={size}/>\n            stars.push(lightedStar);\n        }\n\n        for(let index = rating; index < maxRating; index++) {\n            const unlightedStar = <StarEmptyIcon key={index} color=\"#C7CED4\" size={size}/>\n            stars.push(unlightedStar);\n        }\n\n        return <Pane display=\"inline-fex\" alignItems=\"center\">\n            {stars}\n        </Pane>\n    }\n}","import { Button, Heading, InfoSignIcon, Pane, Table, Tablist, Tab, TagInput, EmptyState } from 'evergreen-ui';\nimport { DownloadIcon, SearchIcon } from 'evergreen-ui';\n\nimport { Component } from 'react';\n\nimport RatingPane from './RatingPane';\n\nimport { DavConfigurationContext } from '../AppSettings';\n\nexport default class FileDetailsPane extends Component {\n    static contextType = DavConfigurationContext;\n\n    constructor() {\n        super();\n\n        this.state = {\n            imageData: [],\n            selectedIndex: 0,\n            tabs: ['Information', 'Image', 'Metadata']\n        }\n    }\n\n    componentDidMount = () => {\n        this.loadImageInformation();\n        this.loadMetaDataInformation();\n    }\n\n    getDownloadLink = () => {        \n        if (!this.context.connectionValid) {\n            // console.log('davClient is undefined in context. Cannot download file.');\n            return;\n        }\n\n        return this.context.davClient.getFileDownloadLink(this.props.fileItem.filename);\n    }\n\n    loadImageInformation = () => {\n        const metaUrl = this.context.getExifApiUrl();\n\n        const paths = this.context.davBaseUrl.split('/');\n        const homeDir = `/${paths[paths.length - 1]}`;\n\n        const exifRequest = {\n            \"username\": this.context.username,\n            \"homeDir\": homeDir,\n            \"filename\": this.props.fileItem.filename\n        }\n\n        fetch(metaUrl, {\n            method: 'POST',\n            body: JSON.stringify(exifRequest),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(res => res.json())\n            .then(res => {\n                // console.log('Received exif for this file: ' + JSON.stringify(res));\n                this.setState({\n                    imageData: res\n                });\n            }).catch(err => {\n                console.log('Error while reading exif data: ' + err);\n                this.setState({\n                    metadata: { tags: '' }\n                });\n            });\n    }\n\n\n    loadMetaDataInformation = () => {\n        const metaUrl = this.context.getMetadataApiUrl();\n\n        const paths = this.context.davBaseUrl.split('/');\n        const homeDir = `/${paths[paths.length - 1]}`;\n\n        const metadataRequest = {\n            \"username\": this.context.username,\n            \"homeDir\": homeDir,\n            \"filename\": this.props.fileItem.filename,\n            \"raw\": false\n        }\n\n        fetch(metaUrl, {\n            method: 'POST',\n            body: JSON.stringify(metadataRequest),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(res => res.json())\n            .then(res => {\n                /*\n                console.log('Received metadata for this file: ' + JSON.stringify(res));\n                console.log('Tags are: ' + res.tags);\n                */\n\n                this.setState({\n                    metadata: res\n                });\n            }).catch(err => {\n                console.log('Error while reading metadata: ' + err);\n                this.setState({\n                    metadata: { tags: '' }\n                });\n            });\n    }\n\n    renderFileItemSize = () => {\n        let unite = 'bytes';\n        let taille = this.props.fileItem.size;\n        if (taille > 1024) {\n            taille = (taille / 1024).toFixed(2);\n            unite = 'KB';\n        }\n        if (taille > 1024) {\n            taille = (taille / 1024).toFixed(2);\n            unite = 'MB';\n        }\n        if (taille > 1024) {\n            taille = (taille / 1024).toFixed(2);\n            unite = 'GB';\n        }\n\n        return <span>{taille}&nbsp;{unite}</span>\n    }\n\n    renderImageTabs = () => {\n        const isImage = this.context.isImageFile(this.props.fileItem.basename);\n        return <Pane padding={15}>\n            <Tablist marginBottom={16} flexBasis={240} marginRight={24}>\n                {this.state.tabs.filter((tab, index) => {\n                    return index > 0 ? isImage : true;\n                })\n                    .map((tab, index) => (\n                        <Tab\n                            key={tab}\n                            id={tab}\n                            onSelect={() => this.setState({ selectedIndex: index })}\n                            isSelected={index === this.state.selectedIndex}\n                            aria-controls={`panel-${tab}`}\n                        >\n                            {tab}\n                        </Tab>\n                    ))}\n            </Tablist>\n            {this.state.tabs.map((tab, index) => {\n\n                let panelTab;\n                switch (index) {\n                    case 0:\n                        panelTab = this.renderFileDetails();\n                        break;\n\n                    case 1:\n                        panelTab = this.renderImageDetails();\n                        break;\n\n                    case 2:\n                        panelTab = this.renderMetadataDetails();\n                        break;\n\n                    default:\n                        panelTab = <div />\n                }\n\n                return <Pane\n                    key={tab}\n                    id={`panel-${tab}`}\n                    role=\"tabpanel\"\n                    aria-labelledby={tab}\n                    aria-hidden={index !== this.state.selectedIndex}\n                    display={index === this.state.selectedIndex ? 'block' : 'none'}\n                >\n                    {panelTab}\n                </Pane>\n            })}\n\n        </Pane>\n    }\n\n    renderFileDetails = () => {\n        return <Table marginTop={15}>\n            <Table.Head height={32}>\n                <Table.TextHeaderCell>\n                    <Pane display=\"inline-flex\" alignItems=\"center\">\n                        <InfoSignIcon />&nbsp;File information\n                    </Pane>\n                </Table.TextHeaderCell>\n                <Table.TextHeaderCell>\n                    &nbsp;\n                </Table.TextHeaderCell>\n            </Table.Head>\n            <Table.Body>\n                <Table.Row key=\"row_path\" height={32}>\n                    <Table.TextCell>Path:</Table.TextCell>\n                    <Table.TextCell>{this.props.fileItem.filename}</Table.TextCell>\n                </Table.Row>\n                <Table.Row height={32}>\n                    <Table.TextCell key=\"row_modif\">Last modif:</Table.TextCell>\n                    <Table.TextCell>{this.props.fileItem.lastmod}</Table.TextCell>\n                </Table.Row>\n                <Table.Row height={32}>\n                    <Table.TextCell key=\"row_size\">Size:</Table.TextCell>\n                    <Table.TextCell>{this.renderFileItemSize()}</Table.TextCell>\n                </Table.Row>\n            </Table.Body>\n        </Table>\n    }\n\n    renderImageDetails = () => {\n        let rows;\n        if (typeof this.state.imageData.image === 'undefined') {\n            rows = this.renderEmptyDetails('No image information has been found.');\n        } else {\n                rows = Object.keys(this.state.imageData.image).map((key, index) => {\n                return <Table.Row key={index} height={32}>\n                    <Table.TextCell>{key}</Table.TextCell>\n                    <Table.TextCell>{this.state.imageData.image[key]}</Table.TextCell>\n                </Table.Row>\n            });\n        }\n\n        return <Table marginTop={15}>\n            <Table.Head height={32}>\n                <Table.TextHeaderCell>\n                    <Pane display=\"inline-flex\" alignItems=\"center\">\n                        <InfoSignIcon />&nbsp;Image information\n                    </Pane>\n                </Table.TextHeaderCell>\n                <Table.TextHeaderCell>\n                    &nbsp;\n                </Table.TextHeaderCell>\n            </Table.Head>\n            <Table.Body>\n                {rows}\n            </Table.Body>\n        </Table>\n    }\n\n    renderMetadataDetails = () => {\n        let rows;\n        if (typeof this.state.metadata === 'undefined' || Object.keys(this.state.metadata).length === 0) {\n            rows = this.renderEmptyDetails('Metedata details are not available.')\n        } else {\n            rows = Object.keys(this.state.metadata).map((key, index) => {\n                return <Table.Row key={`meta-${index}`} height={32}>\n                    <Table.TextCell>{key}</Table.TextCell>\n                    <Table.TextCell>{this.state.metadata[key]}</Table.TextCell>\n                </Table.Row>\n            });\n        }\n\n        return <Table marginTop={15}>\n            <Table.Head height={32}>\n                <Table.TextHeaderCell>\n                    <Pane display=\"inline-flex\" alignItems=\"center\">\n                        <InfoSignIcon />&nbsp;Metadata information\n                    </Pane>\n                </Table.TextHeaderCell>\n                <Table.TextHeaderCell>\n                    &nbsp;\n                </Table.TextHeaderCell>\n            </Table.Head>\n            <Table.Body>\n                {rows}\n            </Table.Body>\n        </Table>\n    }\n\n    renderEmptyDetails = (message) => {\n        return <EmptyState\n            background=\"dark\"\n            title=\"Not found!\"\n            orientation=\"horizontal\"\n            icon={<SearchIcon color=\"#C1C4D6\" />}\n            iconBgColor=\"#EDEFF5\"\n            description={message}\n        />\n    }\n\n    renderTags = () => {\n        const isImage = this.context.isImageFile(this.props.fileItem.basename);\n        if (!isImage) {\n            return <div>&nbsp;</div>\n        }\n\n        let placeholder = 'Loading tags info...';\n        let tags = [];\n        if (this.state.metadata) {            \n            if (typeof this.state.metadata.tags !== 'undefined') {\n                if ('' !== this.state.metadata.tags) {\n                    tags = this.state.metadata.tags.split(',');\n                } \n            }\n            placeholder = tags.length === 0 ? 'No tags for this image' : '';\n        }\n\n        return <TagInput\n            inputProps={{ placeholder: placeholder }}\n            values={tags}\n            flexGrow={2}\n            margin={15}\n            disabled={true}\n        />\n    }\n\n    getRating = () => {\n        const isImage = this.context.isImageFile(this.props.fileItem.basename);\n        if (!isImage) {\n            return 0;\n        }\n\n        if (!this.state.metadata) {\n            return 0;\n        }\n\n        if (!this.state.metadata['xmp:Rating']) {\n            return 0;\n        }\n        \n        return Number.parseInt(this.state.metadata['xmp:Rating']);\n    }\n\n    render = () => {\n        // console.log('Render file details: \\n' + JSON.stringify(this.props.fileItem));\n\n        const downloadIcon = <DownloadIcon size={24} marginRight={5}/>\n        \n        return <Pane zIndex={1} flexShrink={0} elevation={0} backgroundColor=\"white\">\n            <Pane padding={16} borderBottom=\"muted\">\n                <Heading size={600}>{this.props.fileItem.basename}</Heading>\n            </Pane>\n            <Pane display=\"inline-flex\" alignItems=\"center\">\n                <Button appearance=\"primary\" intent=\"success\" is=\"a\" margin={20} iconBefore={downloadIcon} href={this.getDownloadLink()} target=\"_blank\" disabled={!this.context.connectionValid}>Download</Button>                \n                <RatingPane rating={this.getRating()} maxRating={5} marginRight={10} marginLeft={10}/>\n            </Pane>\n            <Pane display=\"flex\" gridTemplateColumns=\"auto\">\n                {this.renderTags()}\n            </Pane>\n            <Pane>\n                {this.renderImageTabs()}\n            </Pane>\n        </Pane>\n    }\n}","\nimport { Card, Icon, Pane, DocumentIcon, Link, Text, InfoSignIcon, DownloadIcon, MoreIcon, Table, Button, Position, Popover, Menu, DeleteIcon } from 'evergreen-ui';\nimport { Component } from 'react';\nimport { DateTime } from 'luxon';\nimport { DavConfigurationContext } from '../AppSettings';\n\n\nexport default class RegularFile extends Component {\n    static contextType = DavConfigurationContext;\n\n    _capitalize = (str) => {\n        const lower = str.toLowerCase();\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\n    }\n\n    download = (fileItem) => {\n        const dlLink = this.context.davClient.getFileDownloadLink(fileItem.filename);\n        window.open(dlLink, '_blank');\n    }\n\n    renderMimeType = (mimeType) => {\n        if (typeof mimeType === 'undefined') {\n            return 'File';\n        }\n\n        if (mimeType.endsWith('json')) {\n            return 'JSON';\n        }\n\n        if (mimeType.endsWith('xml')) {\n            return 'XML';\n        }\n\n        if (mimeType.startsWith('application/')) {\n            return 'File';\n        }\n\n        if (mimeType.startsWith('image/')) {\n            return this._capitalize(mimeType.substring(6));\n        }\n\n        if (mimeType.startsWith('text/')) {\n            return this._capitalize(mimeType.substring(5)) + ' Text';\n        }\n\n        return mimeType;\n    }\n\n    renderHttpDate = (httpDate) => {\n        return DateTime.fromHTTP(httpDate).toLocaleString(DateTime.DATETIME_SHORT_WITH_SECONDS);\n    }\n\n    renderFileItemSize = () => {\n        let unite = 'bytes';\n        let taille = this.props.fileItem.size;\n        if (taille > 1024) {\n            taille = (taille / 1024).toFixed(2);\n            unite = 'KB';\n        }\n        if (taille > 1024) {\n            taille = (taille / 1024).toFixed(2);\n            unite = 'MB';\n        }\n        if (taille > 1024) {\n            taille = (taille / 1024).toFixed(2);\n            unite = 'GB';\n        }\n\n        return `${taille} ${unite}`;\n    }\n\n    renderGrid = () => {\n        let styleThumb = {\n            width: '200px',\n            height: '200px',\n            marginTop: '-15px',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center'\n        }\n\n        return (\n            <Card\n                elevation={2}\n                backgroundColor=\"white\"\n                width={200}\n                height={240}\n                margin={24}\n                display=\"flex\"\n                justifyContent=\"center\"\n                alignItems=\"center\"\n                flexDirection=\"column\"\n            >\n                <Pane style={styleThumb} background=\"tint2\">\n                    <Icon icon={DocumentIcon} size={48} color=\"success\" />\n                </Pane>\n\n                <Pane display=\"inline-flex\" alignItems=\"center\" justifyContent=\"space-between\" style={{ width: '190px', height: '18px', margin: '5px' }}>\n                    <Link href=\"#\" onClick={(evt) => { this.props.handleShowDetails(this.props.fileItem) }} borderBottom=\"none\"><Icon icon={InfoSignIcon} color=\"info\" /></Link>\n                    <Text style={{ overflow: 'hidden', maxWidth: '155px', maxHeight: '24px' }}>{this.props.fileItem.basename}</Text>\n                    <Link href={this.context.davClient.getFileDownloadLink(this.props.fileItem.filename)} target=\"_blank\" borderBottom=\"none\"><DownloadIcon color=\"success\" /></Link>\n                </Pane>\n            </Card>\n        );\n    }\n\n    renderActionMenu = () => {\n        return <Popover\n            position={Position.BOTTOM_RIGHT}\n            content={\n                <Menu>\n                    <Menu.Group>\n                        <Menu.Item icon={InfoSignIcon} intent=\"info\" onSelect={() => { this.props.handleShowDetails(this.props.fileItem) }}>Details...</Menu.Item>\n                        <Menu.Item icon={DownloadIcon} intent=\"success\" onSelect={() => { this.download(this.props.fileItem)} }>Download...</Menu.Item>\n                    </Menu.Group>\n                    <Menu.Group>\n                        <Menu.Item icon={DeleteIcon} intent=\"danger\" onSelect={() => { this.props.handleDelete(this.props.fileItem)} }>Delete</Menu.Item>\n                    </Menu.Group>\n                </Menu>\n            }            \n        >\n            <Button appearance=\"minimal\" intent=\"none\" boxShadow=\"none\" border=\"none\"><MoreIcon/></Button>\n        </Popover>\n    }\n\n    renderTable = () => {\n        return <Table.Row key={this.props.fileItem.basename} isSelectable height={32}>\n            <Table.TextCell textAlign=\"center\" maxWidth={48}>\n                <DocumentIcon size={16} />\n            </Table.TextCell>\n            <Table.TextCell textAlign=\"left\">\n                <Link href={this.context.davClient.getFileDownloadLink(this.props.fileItem.filename)} target=\"_blank\" borderBottom=\"none\">\n                    {this.props.fileItem.basename}\n                </Link>\n            </Table.TextCell>\n            <Table.TextCell textAlign=\"left\">\n                {this.renderMimeType(this.props.fileItem.mime)}\n            </Table.TextCell>\n            <Table.TextCell textAlign=\"left\">\n                {this.renderFileItemSize()}\n            </Table.TextCell>\n            <Table.TextCell textAlign=\"left\">\n                {this.renderHttpDate(this.props.fileItem.lastmod)}\n            </Table.TextCell>\n            <Table.TextCell textAlign=\"center\">\n                {this.renderActionMenu()}\n            </Table.TextCell>\n        </Table.Row>\n    }\n\n    render = () => {\n        switch (this.props.displayMode) {\n            case 'grid':\n                return this.renderGrid();\n\n            case 'table':\n                return this.renderTable();\n\n            default:\n                console.log(`Invalid display mode: ${this.props.displayMode}. Using grid as a default.`);\n                return this.renderGrid();\n        }\n    }\n}","\nimport { Card, Icon, Text, Pane, FolderCloseIcon, Link, Table } from 'evergreen-ui';\n\nimport RegularFile from './RegularFile';\n\nexport default class Folder extends RegularFile {\n\n    renderGrid = () => {\n        let styleThumb = {\n            width: '200px',\n            height: '200px',\n            marginTop: '-15px',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center'\n        }\n\n        return (\n            <Card\n                elevation={2}\n                backgroundColor=\"white\"\n                width={200}\n                height={240}\n                margin={24}\n                display=\"flex\"\n                justifyContent=\"center\"\n                alignItems=\"center\"\n                flexDirection=\"column\"\n            >   \n                <Link href=\"#\" onClick={(evt) => this.props.handleNavigate(this.props.fileItem.basename)} borderBottom=\"none\">             \n                    <Pane style={styleThumb} background=\"tint2\">\n                        <Icon icon={FolderCloseIcon} size={48} color=\"#F7D154\" />\n                    </Pane>\n                    <Pane display=\"inline-flex\" alignItems=\"center\" justifyContent=\"center\" width={190} height={18} margin={5}>\n                        <FolderCloseIcon color=\"#F7D154\"/>\n                        <Text overflow=\"hidden\" maxWidth={155} maxHeight={24}>{this.props.fileItem.basename}</Text>                        \n                    </Pane>                    \n                </Link>\n            </Card>\n        );\n    }\n\n    renderTable = () => {\n        return <Table.Row key={this.props.fileItem.basename} isSelectable justifyContent=\"space-between\" height={32}>\n              <Table.TextCell textAlign=\"center\" maxWidth={48}>\n                <FolderCloseIcon color=\"#F7D154\" size={16}/>\n              </Table.TextCell>\n              <Table.TextCell textAlign=\"left\">\n                  <Link href=\"#\" onClick={(evt) => this.props.handleNavigate(this.props.fileItem.basename)} borderBottom=\"none\">                  \n                  {this.props.fileItem.basename}\n                  </Link>\n                </Table.TextCell>\n                <Table.TextCell textAlign=\"left\">\n                    Folder\n                </Table.TextCell>\n                <Table.TextCell textAlign=\"left\">\n                    &nbsp;                    \n                </Table.TextCell>\n                <Table.TextCell textAlign=\"left\">\n                    {this.renderHttpDate(this.props.fileItem.lastmod)}\n                </Table.TextCell>\n                <Table.TextCell textAlign=\"center\">\n                    {this.renderActionMenu()}\n                </Table.TextCell>\n            </Table.Row>\n    }\n}","\nimport { Card, Icon, Link, Pane, Text, InfoSignIcon, DownloadIcon, Table } from 'evergreen-ui';\n\nimport RegularFile from './RegularFile';\n\nimport { DavConfigurationContext } from '../AppSettings';\n\nexport default class Image extends RegularFile {\n    static contextType = DavConfigurationContext;\n\n    constructor() {\n        super();\n        this.state = {\n            thumb: null\n        }\n    }\n\n    componentDidMount = () => {\n        this.setState({\n            thumb: null\n        }, () => this.generateThumb());\n    }\n\n    generateThumb = () => {\n        const paths = this.context.davBaseUrl.split('/');\n        const homeDir = `/${paths[paths.length - 1]}`;\n\n        const req = {\n            \"username\": this.context.username,\n            \"homeDir\": homeDir,\n            \"filename\": this.props.fileItem.filename\n        }\n\n        const that = this;\n        fetch(this.context.getThumbApiUrl(), { \n            method: 'POST',\n            body: JSON.stringify(req),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n        .then(res => res.blob())\n        .then(res => {\n            var reader = new FileReader();\n            reader.readAsDataURL(res);\n            reader.onloadend = function() {\n                var base64data = reader.result;\n\n                // put that into state\n                that.setState(prev => {\n                    return {\n                        thumb: base64data\n                    }\n                });   \n            }                   \n        })\n        .catch(err => console.log(`Could not generate thumb for file ${this.props.fileItem.filename}\\nReason: ${err}`));\n    }\n\n    renderGrid = () => {\n        let styleThumb = {};\n        if (this.state.thumb !== null) {\n            const imgUrl = 'url(' + this.state.thumb + ')';\n            styleThumb = {\n                backgroundImage: imgUrl,\n                backgroundPosition: 'center',\n                backgroundSize: 'cover',\n                width: '200px',\n                height: '200px',\n                marginTop: '-15px'\n            }        \n        }        \n\n        return (\n            <Card\n                elevation={2}\n                backgroundColor=\"white\"\n                width={200}\n                height={240}\n                margin={24}\n                display=\"flex\"\n                justifyContent=\"center\"\n                alignItems=\"center\"\n                flexDirection=\"column\"\n            > \n                <div style={styleThumb}>&nbsp;</div>\n                <Pane display=\"inline-flex\" alignItems=\"center\" justifyContent=\"space-between\" width={190} height={18} margin={5}>\n                    <Link href=\"#\" borderBottom=\"none\" onClick={(evt) => {this.props.handleShowDetails(this.props.fileItem)}}><Icon icon={InfoSignIcon} color=\"info\"/></Link>\n                    <Text overflow=\"hidden\" maxWidth={155} maxHeigh={24}>{this.props.fileItem.basename}</Text>\n                    <Link href={this.context.davClient.getFileDownloadLink(this.props.fileItem.filename)} target=\"_blank\" borderBottom=\"none\"><DownloadIcon color=\"success\"/></Link>\n                </Pane>\n            </Card>\n        );\n    }\n\n    renderTable = () => {\n\n        let styleThumb = {};\n        if (this.state.thumb !== null) {\n            const imgUrl = 'url(' + this.state.thumb + ')';\n            styleThumb = {\n                backgroundImage: imgUrl,\n                backgroundPosition: 'center',\n                backgroundSize: 'cover',\n                width: '24px',\n                height: '20px',\n                margin: '0px'\n            }        \n        } \n\n        return <Table.Row key={this.props.fileItem.basename} isSelectable justifyContent=\"space-between\" height={32}>\n              <Table.TextCell textAlign=\"center\" maxWidth={48}>\n                <div style={styleThumb}></div>\n              </Table.TextCell>\n              <Table.TextCell textAlign=\"left\">\n                  <Link href={this.context.davClient.getFileDownloadLink(this.props.fileItem.filename)} target=\"_blank\" borderBottom=\"none\">\n                      {this.props.fileItem.basename}\n                  </Link>                \n                </Table.TextCell>\n                <Table.TextCell textAlign=\"left\">\n                    {this.renderMimeType(this.props.fileItem.mimeType)}\n                </Table.TextCell>\n                <Table.TextCell textAlign=\"left\">\n                    {this.renderFileItemSize()}\n                </Table.TextCell>\n                <Table.TextCell textAlign=\"left\">\n                    {this.renderHttpDate(this.props.fileItem.lastmod)}\n                </Table.TextCell>\n              <Table.TextCell textAlign=\"center\">\n                  {this.renderActionMenu()}\n              </Table.TextCell>\n            </Table.Row>\n    }\n}","import { Component } from \"react\"\nimport { EmptyState, Pane, Table, Dialog, Text, Button } from \"evergreen-ui\";\nimport { Spinner, SearchIcon } from \"evergreen-ui\";\n\nimport Folder from './Folder';\nimport Image from './Image';\nimport RegularFile from \"./RegularFile\";\n\nimport { DavConfigurationContext } from '../AppSettings';\n\n/**\n * Component to display the directory content (based on two props : folders and files) either by displaying a list of files \n * or a grid with thumbnails. The user choose how to display directory contents using the displayMode property.\n */\nexport default class DavDirectoryPane extends Component {\n    static contextType = DavConfigurationContext;\n\n    constructor() {\n        super();\n        this.state = {\n            files: [],\n            folders: [],\n            currentRegExp: '',\n            isDeleteDialogShown: false,\n            fileItemToDelete: null\n        }\n    }\n\n    componentDidUpdate = (prevProps) => {\n        // if the folders and files have changed we need to filter them out. If not, we do not change anything.\n        // same for the filter expression : if it changed, then refilter and update\n        let shouldUpdateState = false;\n\n        let folders = this.state.folders;\n        if (prevProps.folders !== this.props.folders || this.state.currentRegExp !== this.context.filterRegExp) {\n            folders = this.props.folders.filter(folder => folder.basename.search(this.context.filterRegExp) !== -1);\n            shouldUpdateState = true;\n        }\n\n        let files = this.state.files;\n        if (prevProps.files !== this.props.files || this.state.currentRegExp !== this.context.filterRegExp) {\n            files = this.props.files.filter(file => file.basename.search(this.context.filterRegExp) !== -1);\n            shouldUpdateState = true;\n        }        \n\n        if (shouldUpdateState) {\n            this.setState({\n                folders: folders,\n                files: files,\n                currentRegExp: this.context.filterRegExp\n            });\n        }        \n    }\n\n    /**\n     * Ensure filter is cleared out before navigating to a new folder\n     */\n    navigate = (folderName) => {\n        this.setState({\n            filter: '',\n            filterRegExp: new RegExp('.*', 'i')\n        }, () => { this.props.handleNavigate(folderName) }\n        );\n    }\n\n    /**\n     * Handles the file item delete click on each displayed file in this directory pane.\n     * This function sets the file item to delete and shows the confirm dialog to delete the file item.\n     * @param fileItem to delete\n     */\n    delete = (fileItem) => {\n        this.setState({\n            isDeleteDialogShown: true,\n            fileItemToDelete: fileItem\n        });\n    }\n\n    doDelete = () => {\n        this.setState({\n            isDeleteDialogShown: false\n        }, () => {\n            this.props.handleDeleteFileItem(this.state.fileItemToDelete)\n        });\n    }\n\n    renderFolders = () => {\n        return this.state.folders\n            .map((directory, index) => {\n            return <Folder key={'dir_' + index} \n                           fileItem={directory} \n                           displayMode={this.props.displayMode}\n                           handleNavigate={this.navigate} \n                           handleShowDetails={this.props.handleShowDetails}\n                           handleDelete={this.delete} />\n        });\n    }\n\n    renderFiles = () => {\n        return this.state.files\n            .map((file, index) => {\n            if (this.context.isImageFile(file.basename)) {\n                return <Image key={'file_' + index} \n                              fileItem={file}\n                              displayMode={this.props.displayMode}\n                              handleShowDetails={this.props.handleShowDetails} \n                              handleDelete={this.delete} />\n            } else {\n                return <RegularFile key={'file_' + index} \n                                    fileItem={file}\n                                    displayMode={this.props.displayMode} \n                                    handleShowDetails={this.props.handleShowDetails} \n                                    handleDelete={this.delete} />\n            }\n        });\n    }  \n\n    renderLoadingState = () => {\n        return <EmptyState\n            background=\"light\"\n            title=\"Loading...\"\n            orientation=\"horizontal\"\n            icon={<Spinner color=\"#C1C4D6\" />}\n            iconBgColor=\"#EDEFF5\"\n            description=\"This can take some time depending of the number of folders and files contained in this directory.\"\n        />\n    }\n\n    renderNothingFound = () => {\n        return <EmptyState\n            background=\"dark\"\n            title=\"Not found!\"\n            orientation=\"horizontal\"\n            icon={<SearchIcon color=\"#C1C4D6\" />}\n            iconBgColor=\"#EDEFF5\"\n            description=\"Nothing matches your search terms. Try something less restrictive?\"\n        />\n    }\n\n    renderEmptyState = () => {\n        return <EmptyState\n            background=\"light\"\n            title=\"Empty directory!\"\n            orientation=\"horizontal\"\n            icon={<SearchIcon color=\"#C1C4D6\" />}\n            iconBgColor=\"#EDEFF5\"\n            description=\"It's lonely here... Upload some file here!\"\n        />\n    }\n\n    renderFoldersAndFiles = () => {\n        if (this.state.folders.length === 0 && this.state.files.length === 0) {\n            return this.context.filter === '' ? this.renderEmptyState() : this.renderNothingFound();\n        }\n\n        return <>\n            {this.renderFolders()}\n            {this.renderFiles()}\n        </>\n    }\n\n    renderDirectoryContentsGrid = () => {\n        return <Pane display=\"flex\" flexWrap=\"wrap\" justifyContent=\"space-evenly\" background=\"overlay\">\n                 { this.props.loading ? this.renderLoadingState() : this.renderFoldersAndFiles() }\n            </Pane>\n    }\n\n    renderDirectoryContentsTable = () => {\n        return <Table>\n            <Table.Head height={32}>\n                <Table.TextHeaderCell textAlign=\"center\" maxWidth={48}>&nbsp;</Table.TextHeaderCell>\n                <Table.TextHeaderCell textAlign=\"left\">Name</Table.TextHeaderCell>\n                <Table.TextHeaderCell textAlign=\"left\">Type</Table.TextHeaderCell>\n                <Table.TextHeaderCell textAlign=\"left\">Size</Table.TextHeaderCell>\n                <Table.TextHeaderCell textAlign=\"left\">Modified</Table.TextHeaderCell>\n                <Table.TextHeaderCell textAlign=\"center\">Actions</Table.TextHeaderCell>\n            </Table.Head>\n        <Table.Body>\n            { this.props.loading ? this.renderLoadingState() : this.renderFoldersAndFiles() }\n        </Table.Body>\n      </Table>\n    }\n\n    renderDeleteConfirmDialog = () => {\n        return <Dialog\n                isShown={this.state.isDeleteDialogShown}\n                title=\"Warning: please confirm...\"\n                intent=\"danger\"\n                onCloseComplete={() => this.setState({isDeleteDialogShown: false})}\n                hasFooter={false}\n            >\n                <Text>\n                    Are you sure you want to delete this file? <br />\n                    {this.state.fileItemToDelete === null ? 'null' : this.state.fileItemToDelete.filename}\n                </Text>\n                <br />\n                <Text intent=\"danger\" appearance=\"primary\">This cannot be undone.</Text>\n                <Pane width=\"100%\" display=\"flex\" justifyContent=\"right\" marginTop={15}>\n                    <Button is=\"div\" marginLeft={0} marginRight={12} appearance=\"default\" intent=\"none\" onClick={(evt) => this.setState({isDeleteDialogShown: false})}>Cancel</Button>\n                    <Button is=\"div\" marginLeft={12} marginRight={0} appearance=\"primary\" intent=\"danger\" onClick={(evt) => this.doDelete()}>Confirm delete</Button>\n                </Pane>\n            </Dialog>\n    }\n\n    render = () => {\n        let directoryContents;\n        switch (this.props.displayMode) {\n            case 'grid': \n                directoryContents = this.renderDirectoryContentsGrid();\n                break;\n\n            case 'table':\n                directoryContents = this.renderDirectoryContentsTable();\n                break;\n\n            default:\n                console.log(`Invalid display mode ${this.props.displayMode}. Using grid as a default.`);\n                directoryContents = this.renderDirectoryContentsGrid();\n                break;\n        }\n\n        return <>\n            {this.renderDeleteConfirmDialog()}\n            {directoryContents}\n        </>;\n    }\n}","import { Component } from \"react\";\nimport { ChevronRightIcon, HomeIcon } from 'evergreen-ui';\nimport { Pane, Link } from 'evergreen-ui';\n\nexport default class DavBreadCrumb extends Component {\n\n    render = () => {\n        let path = this.props.currentDirectory;\n\n        const chevronIcon = <ChevronRightIcon size={18} marginLeft={5} marginRight={5} />\n        const homeIcon = <HomeIcon size={18} marginLeft={5} marginRight={5} />\n\n        let currentDirs = path === '/' ? [''] : path.split('/');\n        let navDirs = [];\n        let breadCrumb = currentDirs.map((dir, index) => {\n            const icon = index === 0 ? homeIcon : chevronIcon;\n            navDirs.push(dir);\n            const fullPath = navDirs.join('/');\n            return <Link href=\"#\" display=\"flex\" alignItems=\"center\" borderBottom=\"none\" key={index + 1} onClick={() => {                \n                this.props.handleNavigate(dir === '' ? '/' : fullPath);\n            }}>{icon}{dir}</Link>\n        });\n\n        return <Pane display=\"flex\" padding={8} background=\"tint2\">\n            {breadCrumb}\n        </Pane>\n    }\n}","import { Component } from \"react\";\n\nimport { Button, Text, toaster } from \"evergreen-ui\";\nimport { UploadIcon, Spinner } from \"evergreen-ui\";\n\nimport { DavConfigurationContext } from '../AppSettings';\n\nexport default class DavUploadButton extends Component {\n    static contextType = DavConfigurationContext;\n\n    constructor() {\n        super();\n        this.state = {\n            currentUploads: []\n        };\n    }\n\n    uploadFile = async () => {\n        const handles = await window.showOpenFilePicker({multiple: true});\n        this.setState({\n            currentUploads: handles\n        }, () => this.doUploadFiles(handles));\n    }\n\n    doUploadFiles = async (handles) => {\n        for(const handle of handles) {\n            const file = await handle.getFile();\n            const targetFileName = `${this.props.currentDirectory}/${file.name}`;\n            console.log(`Target file name is: ${targetFileName}`);\n\n            // tester si le fichier existe déja et s'il faut l'ecraser.\n\n            const uploadOption = {\n                contentLength: file.size\n            }\n\n            this.context.davClient.putFileContents(targetFileName, file, uploadOption)\n            .then(result => {\n                if (!result) {\n                    toaster.danger(`File upload problem for ${targetFileName}`);\n                } else {\n                    // do a refresh of the current directory !\n                    this.props.handleNavigate(this.props.currentDirectory);\n                }\n            }).catch(error => {\n                toaster.danger(`Problem while uploading file ${targetFileName}: ${error}`);\n            }).finally( () => {\n                const index = this.state.currentUploads.indexOf(handle);\n                if (index >= 0) {\n                    this.state.currentUploads.splice(index, 1);\n                    this.setState({\n                        currentUploads: this.state.currentUploads\n                    });\n                } else {\n                    console.log(`Did not find handle of ${handle.file.name}`);\n                }\n            });\n        }\n    }\n\n    render = () => {\n        let status = <></>\n        if (this.state.currentUploads.length > 0) {\n            status = <>\n                <Spinner size={12} marginRight={5}/>\n                <Text>{this.state.currentUploads.length} files uploading.</Text>\n            </>\n        }\n        return <>\n            {status}\n            <Button is=\"div\" marginLeft={12} marginRight={12} iconBefore={UploadIcon} appearance=\"primary\" intent=\"success\" onClick={(evt) => this.uploadFile()}>Upload</Button>\n        </>        \n    }\n}","\nimport { Component } from 'react';\nimport { Popover, Pane, Text, TextInput, Button, FolderNewIcon, Checkbox } from 'evergreen-ui';\nimport { DavConfigurationContext } from '../AppSettings';\n\nexport default class DavNewFolderButton extends Component {\n    static contextType = DavConfigurationContext;\n\n    constructor() {\n        super();\n        this.state = {\n            newFolderName: '',\n            moveToFolder: true\n        }\n    }\n\n    createFolder = async () => {\n        const newDir = `${this.props.currentDirectory}/${this.state.newFolderName}`;\n        await this.context.davClient.createDirectory(newDir);\n        this.setState({\n            newFolderName: '',\n            popoverShown: false\n        }, () => {\n            const destDir = this.state.moveToFolder ? newDir : this.props.currentDirectory;\n            this.props.handleNavigate(destDir);\n        });\n    }\n\n    render = () => {\n        return <Popover\n        content={({ close }) => {\n          return <Pane\n            padding={20}\n            display=\"grid\"\n            alignItems=\"left\"\n            justifyContent=\"left\"\n            gridTemplateColumns=\"auto auto\"\n            gridTemplateRows=\"auto auto auto\"\n          >\n            <Text gridColumnStart=\"1\" gridColumnEnd=\"span 2\">New folder name:</Text>\n            <TextInput gridColumnStart=\"1\" gridColumnEnd=\"span 2\" width=\"100%\" marginTop={5} value={this.state.newFolderName} onChange={(evt) => this.setState({newFolderName: evt.target.value})} />\n            <Checkbox gridColumnStart=\"1\" gridColumnEnd=\"span 2\" width=\"100%\" marginTop={5} disabled={this.state.newFolderName === ''} label=\"Move to new folder afer create\" checked={this.state.moveToFolder} onChange={(evt) => this.setState({moveToFolder: !this.state.moveToFolder})} />\n            <Button is='div' marginTop={10} marginRight={5} alignSelf=\"left\" appearance='primary' intent='info' disabled={this.state.newFolderName === ''} onClick={evt => this.createFolder()}>Create</Button>\n            <Button is=\"div\" marginTop={10} marginLeft={5} alignSelf=\"right\" appearance='default' intent='none' onClick={close}>Close</Button>\n          </Pane>\n        }}>\n        <Button is=\"div\" marginLeft={12} marginRight={12} iconBefore={FolderNewIcon} appearance=\"primary\" intent=\"info\">New folder</Button>\n      </Popover>\n    }\n}","import React, { Component, Fragment } from \"react\";\n\nimport { Pane, Link } from \"evergreen-ui\";\nimport { GridViewIcon, ListIcon } from \"evergreen-ui\";\n\nimport { DavConfigurationContext } from '../AppSettings';\n\nimport DavBreadCrumb from \"./DavBreadCrumb\";\nimport DavUploadButton from \"./DavUploadButton\";\nimport DavNewFolderButton from \"./DavNewFolderButton\";\n\nexport default class DavToolBar extends Component {\n    static contextType = DavConfigurationContext;\n\n    createDirectory = (name) => {\n        // use this :\n        // await client.createDirectory(\"/data/system/storage\");\n    }\n\n    renderFolderTools = () => {\n        return <>\n            <DavUploadButton currentDirectory={this.props.currentDirectory} handleNavigate={this.props.handleNavigate}/>\n            <DavNewFolderButton currentDirectory={this.props.currentDirectory} handleNavigate={this.props.handleNavigate} />\n        </>\n    }\n\n    renderDisplayTools = () => {        \n        return <Fragment>\n            <Link href=\"#\" display=\"flex\" alignItems=\"center\" onClick={(evt) => this.props.handleDisplayMode('grid')} >\n                <GridViewIcon size={18} marginLeft={5} marginRight={5} color={this.props.displayMode === 'grid' ? 'gray600' : 'blue600'} />\n            </Link>\n            &nbsp;\n            <Link href=\"#\" display=\"flex\" alignItems=\"center\" onClick={(evt) => this.props.handleDisplayMode('table')} >\n                <ListIcon size={18} marginLeft={5} marginRight={5} color={this.props.displayMode === 'table' ? 'gray600' : 'blue600'} />\n            </Link>            \n        </Fragment>\n    }\n\n    render = () => {\n        return <Pane zIndex={1} flexShrink={0} background=\"tint2\" display=\"grid\" gridTemplateColumns=\"auto 1fr\" paddingBottom={10}>                                \n                <DavBreadCrumb handleNavigate={this.props.handleNavigate} currentDirectory={this.props.currentDirectory} />\n                <Pane justifySelf=\"end\" display=\"inline-flex\" alignItems=\"center\">\n                    {this.renderFolderTools()}\n                    {this.renderDisplayTools()}\n                </Pane>\n            </Pane>\n    }\n}","const Tree = ({children}) => {\n    return (\n    <div style={{paddingTop: '10px'}}>{children}</div>\n    );\n} \n\nexport default Tree;","\nimport React, {Component} from 'react';\n\nimport { Text, ChevronDownIcon, ChevronRightIcon, FolderCloseIcon } from 'evergreen-ui';\nimport { Icon, FolderOpenIcon } from 'evergreen-ui';\nimport { DavConfigurationContext } from '../../AppSettings';\n\nconst styles = {\n    folderLabel: {\n        display: 'grid',\n        justifyItems: 'start',\n        gridTemplateColumns: 'auto auto 1fr',\n        span: {\n          marginLeft: '5px'\n        },\n        fontFamily: 'Lato'\n    },\n    collapsibleOpen: {\n        height: 'auto',\n        overflow: 'hidden',\n        paddingLeft: '20px'\n    },\n    collapsibleClosed: {\n        height: '0px',\n        overflow: 'hidden',\n        paddingLeft: '20px'\n    }\n  }\n\nclass TreeFolder extends Component {\n  static contextType = DavConfigurationContext;\n\n  constructor() {\n    super();\n    this.state = {\n      isOpen: false,\n      subDirs: []\n    }\n  }\n\n  componentDidUpdate = (prevProps, prevState, snapshot) => {\n    if (this.props.currentDirectory === null || typeof this.props.currentDirectory === 'undefined') {\n      return;\n    }\n    \n    // detect a current directory change\n    if (prevProps.currentDirectory !== this.props.currentDirectory) {\n      // detect if we jumped into this tree folder directory to refresh its contents\n      // that may have changed folowing a directory create or delete operation but only if we are 'open' state\n      if (this.props.currentDirectory === this.props.absolutePath && this.state.isOpen) {\n        this.getDirectoryContents();\n      } else {\n        // if we create a folder and jumped into that new folder, we want to refresh the parent folder as well\n        // to show the newly created folder.\n        const lastIndex = this.props.currentDirectory.lastIndexOf('/');\n        const parentFolder = this.props.currentDirectory.substring(0, lastIndex);\n        if (this.props.absolutePath === parentFolder && this.state.isOpen) {\n          this.getDirectoryContents();\n        }\n      }\n    } \n  }\n\n  getDirectoryContents = async () => {\n    let dirs = [];\n\n    if (this.context.connectionValid) {\n        const directoryItems = await this.context.davClient.getDirectoryContents(this.props.absolutePath);\n        dirs = directoryItems.filter(item => { return item.type === 'directory' });\n\n        this.setState({\n          subDirs: dirs\n        });\n    }\n  }\n\n  handleToggle = (evt) => {\n    this.setState({\n      isOpen: !this.state.isOpen\n    }, () => {\n      if (this.state.isOpen && this.state.subDirs.length === 0) {\n        this.getDirectoryContents();\n      }\n    });\n  }\n\n  handleClick = (evt) => {\n    if (this.state.subDirs.length === 0) {\n      this.getDirectoryContents();\n      this.setState({\n        isOpen: true\n      });\n    }\n\n    this.props.handleNavigate(this.props.absolutePath);\n  }\n\n  renderSubDirectories = () => {\n    return this.state.subDirs.map((dir, index) => {\n      return <TreeFolder key={`${this.props.id}-${index}`} basename={dir.basename} absolutePath={`${this.props.absolutePath}/${dir.basename}`} handleNavigate={this.props.handleNavigate} currentDirectory={this.props.currentDirectory}/>\n    });\n  }\n\n  render = () => {\n    \n    const plusIcon = this.state.isOpen ? ChevronDownIcon : ChevronRightIcon;\n    const folderIcon = this.state.isOpen ? FolderOpenIcon : FolderCloseIcon;\n\n    return <div>\n              <div style={styles.folderLabel}>\n                <Icon onClick={this.handleToggle} icon={plusIcon} size={16} marginRight=\"10\" cursor=\"pointer\"/>\n                <div style={styles.folderLabel} onClick={this.handleClick}>\n                  <Icon icon={folderIcon} size={16} color=\"#F7D154\" cursor=\"pointer\"/>\n                  <Text style={styles.folderLabel.span} cursor=\"pointer\">{this.props.basename}</Text>\n                </div>\n              </div>\n              <div style={this.state.isOpen ? styles.collapsibleOpen : styles.collapsibleClosed}>\n                {this.renderSubDirectories()}\n              </div>\n            </div>\n  }\n}\n\nexport default TreeFolder;","\nimport { Component } from \"react\";\nimport { Pane, Heading } from 'evergreen-ui';\n\nimport Tree from './tree/Tree';\nimport TreeFolder from './tree/TreeFolder';\n\nclass DavSideBar extends Component {\n    render = () => {\n        return <Pane background=\"blueTint\" elevation={0} padding={15} display=\"grid\" gridTemplateRows=\"auto auto 1fr\" gridTemplateColumns=\"auto\" overflowX=\"scroll\" height=\"100%\">  \n            <Pane background=\"blueTint\">\n                <Heading size={900} color=\"neutral\" textAlign=\"left\">My files</Heading>\n            </Pane>\n            <Pane background=\"blueTint\" marginTop={15}>\n                <Heading size={600} color=\"neutral\" textAlign=\"left\">File manager</Heading>\n            </Pane>\n            <Tree>\n                {this.props.rootDirs.map((dir, index) => {\n                    return <TreeFolder key={`treefolder-${index}`} id={`treefolder-${index}`} absolutePath={`/${dir.basename}`} basename={dir.basename} handleNavigate={this.props.handleNavigate} currentDirectory={this.props.currentDirectory} />\n                })}\n            </Tree>\n        </Pane>\n    }\n}\n\nexport default DavSideBar;","\nimport { Component } from 'react';\nimport { Navigate } from 'react-router';\n\nimport { Pane, SideSheet, Heading, Spinner } from 'evergreen-ui';\n\nimport { DavConfigurationContext } from '../AppSettings';\n\nimport DavHeader from '../components/DavHeader';\nimport FileDetailsPane from '../components/FileDetailsPane';\nimport DavDirectoryPane from '../components/DavDirectoryPane';\nimport DavToolBar from '../components/DavToolBar';\nimport DavSideBar from '../components/DavSideBar';\n\n/**\n * The DAV Explorer Pane is the main view component. It composes the page and has functions to interact with\n * the DAV Client. It uses sub components such as DavToolBar and DavDirectoryPane to render things returned \n * by the DavClient.\n */\nexport default class DavExplorerView extends Component {\n    static contextType = DavConfigurationContext;\n\n    constructor() {\n        super();\n\n        this.state = {\n            currentDirectory: null,\n            directories: [],\n            files: [],\n            rootDirs: [],\n            showDetails: false,\n            displayMode: 'table',\n            loading: true\n        }\n    }\n\n    componentDidMount = () => {\n        if (this.state.currentDirectory === null) {\n            this.setState({\n                currentDirectory: '/',\n                loading: true\n            }, () => this.doGetDirectoryContents());\n        }\n    }\n\n    getDirectoryContents = () => {\n        this.setState({\n            loading: true\n        }, () => this.doGetDirectoryContents());\n    }\n\n    doGetDirectoryContents = async () => {\n        let dirs = [];\n        let files = [];\n\n        if (this.context.connectionValid) {\n            const directoryItems = await this.context.davClient.getDirectoryContents(this.state.currentDirectory);\n\n            dirs = directoryItems.filter(item => { return item.type === 'directory' });\n            files = directoryItems.filter(item => { return item.type === 'file' });\n\n            if ('/' === this.state.currentDirectory) {\n                this.setState({\n                    rootDirs: dirs\n                });\n            }\n        } else {\n            console.error('Cannot get directory contents since connectin is not valid.');\n        }\n\n        this.setState({\n            directories: dirs,\n            files: files,\n            loading: false\n        });\n    }\n\n    navigate = (folderName) => {\n        const separator = this.state.currentDirectory.endsWith('/') || folderName.startsWith('/') ? '' : '/';\n        let newDir = this.state.currentDirectory + separator + folderName;\n        this.setState((prev) => {\n            return {\n                currentDirectory: newDir,\n                files: [],\n                directories: []\n            }\n        }, () => {\n            console.log(`Navigated to ${newDir}, now get directory contents...`);\n            this.getDirectoryContents();\n        });\n    }\n\n    navigateAbsolute = (absolutePath) => {\n        this.setState((prev) => {\n            return {\n                currentDirectory: absolutePath,\n                files: [],\n                directories: []\n            }\n        }, () => {\n            console.log(`Absolute navigated to ${absolutePath}, now get directory contents...`);\n            this.getDirectoryContents();\n        });\n    }\n\n    toggleFileDetails = (fileItem) => {\n        let modified = fileItem;\n        if (modified.filename.startsWith(this.context.homeDirectory)) {\n            modified.filename = modified.filename.substring(this.context.homeDirectory.length);\n        }\n\n        this.setState({\n            showDetails: true,\n            detailedFileItem: modified\n        });\n    }\n\n    changeDisplayMode = (displayMode) => {\n        this.setState({\n            displayMode: displayMode\n        });\n    }\n\n    deleteFileItem = (fileItem) => {\n        this.context.davClient.deleteFile(fileItem.filename)\n        .then(this.getDirectoryContents());\n    }\n\n    render = () => {\n\n        if (!this.context || !this.context.connectionValid) {\n            return <Navigate to=\"/login\" />\n        }\n\n        if (!this.state.currentDirectory) {\n            return <Pane gridTemplateColumns=\"auto\">\n                <Spinner marginX=\"auto\" marginTop={120} />\n                <Heading size={600} marginX=\"auto\" marginTop={15} textAlign=\"center\">Nico's Drive is loading...</Heading>\n            </Pane>\n        }\n\n        return <Pane display=\"grid\" gridTemplateColumns=\"1fr 4fr\" height=\"100vh\" maxHeight=\"100vh\" overflow=\"hidden\">\n            <DavSideBar rootDirs={this.state.rootDirs} handleNavigate={this.navigateAbsolute} currentDirectory={this.state.currentDirectory} />\n\n            <Pane display=\"grid\" gridTemplateRows=\"auto auto 1fr\" height=\"100%\" overflowY=\"scroll\">\n                <DavHeader />\n\n                <DavToolBar currentDirectory={this.state.currentDirectory}\n                    displayMode={this.state.displayMode} \n                    handleDisplayMode={this.changeDisplayMode}\n                    handleNavigate={this.navigateAbsolute} />\n\n                <DavDirectoryPane displayMode={this.state.displayMode}\n                    folders={this.state.directories}\n                    files={this.state.files}\n                    loading={this.state.loading}\n                    handleDeleteFileItem={this.deleteFileItem}\n                    handleNavigate={this.navigate}\n                    handleShowDetails={this.toggleFileDetails} />\n\n            </Pane>\n\n            <SideSheet id=\"side-details\"\n                isShown={this.state.showDetails}\n                onCloseComplete={() => this.setState({ showDetails: false })}\n            >\n                <FileDetailsPane fileItem={this.state.detailedFileItem} davClient={this.state.davClient} />\n            </SideSheet>\n        </Pane>\n    }\n}","import { Component } from 'react';\n\nimport { Button, InfoSignIcon, Link, LogInIcon } from 'evergreen-ui';\nimport { Link as ReactRouterLink } from 'react-router-dom';\n\nimport { DavConfigurationContext } from '../../AppSettings';\n\nimport './WelcomePage.css';\n\nexport default class WelcomePage extends Component {\n    static contextType = DavConfigurationContext;\n\n    showLoginDialog = () => {\n        this.context.setShowConnectionDialog(true);\n    }\n\n    render = () => {\n        return <header id=\"header\">\n\t\t\t\t<div className=\"content\">\n\t\t\t\t\t<h1><a href=\"/\">Nico's Drive</a></h1>\n\t\t\t\t\t<p>The private online storage solution.<br />\n\t\t\t\t\tBackup your memories ... <strong>automatically!</strong><br />\n                    Access your files anytime, anywhere, just like a shared drive,<br />\n                    On any computer.</p>\n\t\t\t\t\t<ul className=\"actions\">\n                        <li><Button is=\"div\" onClick={() => window.location.assign('https://github.com/hironico/nico.drive#readme')} appearance=\"default\" height={60} padding={28} iconBefore={InfoSignIcon} fontSize={22}>Learn more</Button></li>\n                        <li><Button is=\"div\" appearance=\"primary\" intent=\"success\" height={60} padding={28} iconBefore={LogInIcon} fontSize={22}>\n                            <Link is={ReactRouterLink} to=\"/login\">Login</Link>\n                            </Button></li>\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"image phone\"><div className=\"inner\"><img src=\"images/screen.jpg\" alt=\"\" /></div></div>\n\t\t\t</header>\n    }\n}","\nimport { React, Component } from 'react';\n\nimport appTheme from './AppTheme';\nimport {DavConfigurationProvider} from './AppSettings';\n\nimport { ThemeProvider } from 'evergreen-ui';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Routes, Route, Navigate } from 'react-router';\n\nimport LoginView from './views/LoginView';\nimport DavExplorerView from './views/DavExplorerView';\nimport WelcomePage from './components/welcome-page/WelcomePage';\n\n// theming provided by this page: https://github.com/segmentio/evergreen/issues/542\n// see also: https://evergreen.segment.com/introduction/theming\n\nclass App extends Component {\n  render = () => {\n    return <ThemeProvider value={appTheme}>      \n      <DavConfigurationProvider>\n        <BrowserRouter>\n        <Routes>\n          <Route path=\"/\" element={<WelcomePage />} />\n          <Route path=\"login\" element={<LoginView />} />\n          <Route path=\"explorer\" element={<DavExplorerView />} />\n          <Route path=\"*\" element={<Navigate to=\"/\" />} />\n        </Routes>\n        </BrowserRouter>\n        </DavConfigurationProvider>\n    </ThemeProvider>\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}