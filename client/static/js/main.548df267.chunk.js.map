{"version":3,"sources":["logo.svg","AppSettings.js","components/Folder.js","components/Image.js","components/RegularFile.js","components/RatingPane.js","components/FileDetailsPane.js","components/welcome-page/WelcomePage.js","components/DavExplorerPane.js","components/LoginDialog.js","App.js","reportWebVitals.js","index.js"],"names":["DavConfigurationContext","AuthType","Basic","React","createContext","connectionValid","DavConfigurationProvider","setDavClient","client","url","uri","URL","davBaseUrl","protocol","host","pathTab","pathname","split","davWebContext","splice","homeDir","join","setState","davClient","homeDirectory","showConnectionDialog","setConnectionValid","disconnect","setShowConnectionDialog","showConDialog","console","log","getBasePath","state","getClientUrl","getThumbApiUrl","getExifApiUrl","getMetadataApiUrl","isImageFile","filename","startsWith","index","lastIndexOf","extention","toUpperCase","substring","supportedFormats","indexOf","render","Provider","value","props","children","authType","username","password","Component","Folder","Card","elevation","backgroundColor","width","height","margin","display","justifyContent","alignItems","flexDirection","Link","href","onClick","evt","navigate","fileItem","basename","Pane","style","marginTop","background","icon","FolderOpenIcon","size","color","Text","overflow","maxWidth","maxHeight","Image","componentDidMount","thumb","generateThumb","req","that","fetch","context","method","body","JSON","stringify","headers","then","res","blob","reader","FileReader","readAsDataURL","onloadend","base64data","result","prev","catch","err","showDetails","styleThumb","backgroundImage","backgroundPosition","backgroundSize","InfoSignIcon","getFileDownloadLink","target","DownloadIcon","contextType","RegularFile","DocumentIcon","RatingPane","stars","rating","maxRating","lightedStar","StarIcon","push","unlightedStar","StarEmptyIcon","FileDetailsPane","loadImageInformation","loadMetaDataInformation","getDownloadLink","metaUrl","exifRequest","json","imageData","metadataRequest","metadata","tags","renderFileItemSize","unite","taille","toFixed","renderImageTabs","isImage","padding","Tablist","marginBottom","flexBasis","marginRight","tabs","filter","tab","map","Tab","id","onSelect","selectedIndex","isSelected","aria-controls","panelTab","renderFileDetails","renderImageDetails","renderMetadataDetails","role","aria-labelledby","aria-hidden","Table","Head","TextHeaderCell","Body","Row","TextCell","lastmod","image","rows","Object","keys","key","renderTags","placeholder","length","TagInput","inputProps","values","flexGrow","disabled","getRating","Number","parseInt","downloadIcon","zIndex","flexShrink","borderBottom","Heading","Button","appearance","intent","is","iconBefore","marginLeft","gridTemplateColumns","WelcomePage","showLoginDialog","className","alert","fontSize","LogInIcon","src","alt","DavExplorerPane","componentDidUpdate","currentDirectory","getDirectoryContents","a","dirs","files","directoryItems","item","type","directories","folderName","separator","endsWith","newDir","navigateAbsolute","absolutePath","toggleFileDetails","modified","detailedFileItem","renderFolders","directory","renderFiles","file","renderBreadCrumb","path","chevronIcon","ChevronRightIcon","homeIcon","HomeIcon","currentDirs","navDirs","dir","fullPath","renderAvatarMenu","Popover","position","Position","BOTTOM_LEFT","content","Menu","Group","Item","Badge","Divider","LogOutIcon","Avatar","name","cursor","renderRootPane","breadCrumb","justifySelf","flexWrap","SideSheet","isShown","onCloseComplete","LoginDialog","testConnection","clientOptions","createClient","errorMessage","error","isLoading","onConfirm","renderDialog","Dialog","title","isConfirmLoading","close","hasFooter","TextInputField","onChange","e","label","Paragraph","App","clearfix","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.548df267.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from \"react\";\nimport { AuthType } from \"webdav\";\n\nconst defaultValue = {\n    davBaseUrl: 'https://localhost:8080',\n    davWebContext: '/photo',\n    authType: AuthType.Basic,\n    username: 'hironico',\n    password: 'hironico',\n    davClient: null,\n    connectionValid: false,\n    showConnectionDialog: false,\n    homeDirectory: '/blog',\n    currentDirectory: '/',\n    supportedFormats: ['JPEG', 'JPG', 'PNG', 'WEBP', 'AVIF', 'TIFF', 'TIF', 'GIF', 'SVG', 'CR2'],\n    setDavClient: (client) => { },\n    setConnectionValid: () => { },\n    setShowConnectionDialog: (showConDlg) => { },\n    getClientUrl: () => { },\n    getThumbApiUrl: () => { },\n    getExifApiUrl: () => { },\n    getMetadataApiUrl: () => { },\n    isImageFile: () => { },\n    setCurrentDirectory: () => { },\n    disconnect: () => { }\n}\n\nconst DavConfigurationContext = React.createContext({ connectionValid: false });\n\nclass DavConfigurationProvider extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            davBaseUrl: 'https://localhost:8080',\n            davWebContext: '/photo',\n            authType: AuthType.Basic,\n            username: 'hironico',\n            password: 'hironico',\n            davClient: null,\n            connectionValid: false,\n            showConnectionDialog: false,\n            homeDirectory: '/blog',\n            supportedFormats: ['JPEG', 'JPG', 'PNG', 'WEBP', 'AVIF', 'TIFF', 'GIF', 'SVG', 'CR2'],\n            setDavClient: this.setDavClient,\n            setConnectionValid: this.setConnectionValid,\n            setShowConnectionDialog: this.setShowConnectionDialog,\n            getClientUrl: this.getClientUrl,\n            getThumbApiUrl: this.getThumbApiUrl,\n            getExifApiUrl: this.getExifApiUrl,\n            getMetadataApiUrl: this.getMetadataApiUrl,\n            isImageFile: this.isImageFile,\n            getBasePath: this.getBasePath,\n            disconnect: this.disconnect\n        }\n    }\n\n    setDavClient = (client, url) => {\n        const urlValid = (typeof url !== 'undefined' && url !== null);\n        const uri = urlValid ? new URL(url) : null;\n        const davBaseUrl = uri ? `${uri.protocol}//${uri.host}` : '';\n        let pathTab = uri ? uri.pathname.split('/') : '';\n        const davWebContext = uri ? `/${pathTab[0]}` : '';\n        pathTab = uri ? pathTab.splice(0, 1) : [];\n        const homeDir = uri ? pathTab.join('/') : '';\n\n        this.setState({\n            davClient: client,\n            davBaseUrl: client ? davBaseUrl : '',\n            davWebContext: client ? davWebContext : '',\n            homeDirectory: client ? homeDir : '',\n            connectionValid: client ? true : false,\n            showConnectionDialog: client ? false : true\n        });\n    }\n\n    setConnectionValid = (connectionValid) => {\n        this.setState({\n            connectionValid: connectionValid\n        });\n    }\n\n    disconnect = () => {\n        this.setDavClient(null, null);\n    }\n\n    setShowConnectionDialog = (showConDialog) => {\n        console.log('Must set showConnectionDialog to : ' + showConDialog);\n        this.setState({\n            showConnectionDialog: showConDialog\n        });\n    }\n\n    getBasePath = () => {\n        return `${this.state.davWebContext}${this.state.homeDirectory}`;\n    }\n\n    getClientUrl = () => {\n        return `${this.state.davBaseUrl}${this.state.davWebContext}`;\n    }\n\n    getThumbApiUrl = () => {\n        return `${this.state.davBaseUrl}/thumb`;\n    }\n\n    getExifApiUrl = () => {\n        return `${this.state.davBaseUrl}/meta/exif`;\n    }\n\n    getMetadataApiUrl = () => {\n        return `${this.state.davBaseUrl}/meta/xmp`;\n    }\n\n    isImageFile = (filename) => {\n        if (typeof filename === 'undefined' || filename === null) {\n            return false;\n        }\n\n        if (filename.startsWith('.')) {\n            return false;\n        }\n\n        const index = filename.lastIndexOf('.');\n        if (index < 0) {\n            return false;\n        }\n\n        const extention = filename.toUpperCase().substring(index + 1);\n\n        const formatIndex = this.state.supportedFormats.indexOf(extention);\n        return formatIndex !== -1;\n    }\n\n    render = () => {\n        return <DavConfigurationContext.Provider value={this.state}>{this.props.children}</DavConfigurationContext.Provider>\n    }\n}\n\nexport { DavConfigurationContext, DavConfigurationProvider }\n","\nimport { Card, Icon, Text, Pane, FolderOpenIcon, Link } from 'evergreen-ui';\nimport { Component } from 'react';\n\nexport default class Folder extends Component {\n\n    render = () => {\n        let styleThumb = {\n            width: '200px',\n            height: '200px',\n            marginTop: '-15px',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center'\n        }\n\n        return (\n            <Card\n                elevation={2}\n                backgroundColor=\"white\"\n                width={200}\n                height={240}\n                margin={24}\n                display=\"flex\"\n                justifyContent=\"center\"\n                alignItems=\"center\"\n                flexDirection=\"column\"\n            >   \n                <Link href=\"#\" onClick={(evt) => this.props.navigate(this.props.fileItem.basename)}>             \n                    <Pane style={styleThumb} background=\"tint2\">\n                        <Icon icon={FolderOpenIcon} size={48} color=\"#F7D154\" />\n                    </Pane>\n                    <Pane display=\"inline-flex\" alignItems=\"center\" justifyContent=\"center\" style={{width: '190px', height: '18px', margin: '5px'}}>\n                        <FolderOpenIcon color=\"#F7D154\"/>\n                        <Text style={{overflow: 'hidden', maxWidth: '155px', maxHeight: '24px'}}>{this.props.fileItem.basename}</Text>                        \n                    </Pane>                    \n                </Link>\n            </Card>\n        );\n    }\n}","\nimport { Card, Icon, Link, Pane, Text, InfoSignIcon, DownloadIcon } from 'evergreen-ui';\nimport { Component } from 'react';\n\nimport { DavConfigurationContext } from '../AppSettings';\n\nexport default class Image extends Component {\n    static contextType = DavConfigurationContext;\n\n    constructor() {\n        super();\n        this.state = {\n            thumb: null\n        }\n    }\n\n    componentDidMount = () => {\n        this.setState({\n            thumb: null\n        }, () => this.generateThumb());\n    }\n\n    generateThumb = () => {\n        const req = {\n            \"filename\": this.props.fileItem.filename\n        }\n\n        const that = this;\n        fetch(this.context.getThumbApiUrl(), { \n            method: 'POST',\n            body: JSON.stringify(req),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n        .then(res => res.blob())\n        .then(res => {\n            var reader = new FileReader();\n            reader.readAsDataURL(res);\n            reader.onloadend = function() {\n                var base64data = reader.result;\n\n                // put that into state\n                that.setState(prev => {\n                    return {\n                        thumb: base64data\n                    }\n                });   \n            }                   \n        })\n        .catch(err => console.log(`Could not generate thumb for file ${this.props.fileItem.filename}\\nReason: ${err}`));\n    }\n\n    showDetails = () => {\n        this.props.showDetails(this.props.fileItem);\n    }\n\n    render = () => {\n        let styleThumb = {};\n        if (this.state.thumb !== null) {\n            const imgUrl = 'url(' + this.state.thumb + ')';\n            styleThumb = {\n                backgroundImage: imgUrl,\n                backgroundPosition: 'center',\n                backgroundSize: 'cover',\n                width: '200px',\n                height: '200px',\n                marginTop: '-15px'\n            }        \n        }        \n\n        return (\n            <Card\n                elevation={2}\n                backgroundColor=\"white\"\n                width={200}\n                height={240}\n                margin={24}\n                display=\"flex\"\n                justifyContent=\"center\"\n                alignItems=\"center\"\n                flexDirection=\"column\"\n            > \n                <div style={styleThumb}>&nbsp;</div>\n                <Pane display=\"inline-flex\" alignItems=\"center\" justifyContent=\"space-between\" style={{width: '190px', height: '18px', margin: '5px'}}>\n                    <Link href=\"#\" onClick={(evt) => {this.showDetails()}}><Icon icon={InfoSignIcon} color=\"info\"/></Link>\n                    <Text style={{overflow: 'hidden', maxWidth: '155px', maxHeight: '24px'}}>{this.props.fileItem.basename}</Text>\n                    <Link href={this.context.davClient.getFileDownloadLink(this.props.fileItem.filename)} target=\"_blank\"><DownloadIcon color=\"success\"/></Link>\n                </Pane>\n            </Card>\n        );\n    }\n}","\nimport { Card, Icon, Pane, DocumentIcon, Link, Text, InfoSignIcon, DownloadIcon } from 'evergreen-ui';\nimport { Component } from 'react';\nimport { DavConfigurationContext } from '../AppSettings';\n\nexport default class RegularFile extends Component {\n    static contextType = DavConfigurationContext;\n\n    showDetails = () => {\n        this.props.showDetails(this.props.fileItem);\n    }\n\n    render = () => {\n        let styleThumb = {\n            width: '200px',\n            height: '200px',\n            marginTop: '-15px',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center'\n        }\n\n        return (\n            <Card\n                elevation={2}\n                backgroundColor=\"white\"\n                width={200}\n                height={240}\n                margin={24}\n                display=\"flex\"\n                justifyContent=\"center\"\n                alignItems=\"center\"\n                flexDirection=\"column\"\n            >                \n                <Pane style={styleThumb} background=\"tint2\">\n                    <Icon icon={DocumentIcon} size={48} color=\"success\" />\n                </Pane>  \n\n                <Pane display=\"inline-flex\" alignItems=\"center\" justifyContent=\"space-between\" style={{width: '190px', height: '18px', margin: '5px'}}>\n                    <Link href=\"#\" onClick={(evt) => {this.showDetails()}}><Icon icon={InfoSignIcon} color=\"info\"/></Link>\n                    <Text style={{overflow: 'hidden', maxWidth: '155px', maxHeight: '24px'}}>{this.props.fileItem.basename}</Text>\n                    <Link href={this.context.davClient.getFileDownloadLink(this.props.fileItem.filename)} target=\"_blank\"><DownloadIcon color=\"success\"/></Link>\n                </Pane>\n            </Card>\n        );\n    }\n}","import { Component } from 'react';\nimport { Pane, StarIcon, StarEmptyIcon } from 'evergreen-ui';\n\nexport default class RatingPane extends Component {\n\n    render = () => {\n        let stars = [];\n\n        let rating = this.props.rating ? this.props.rating : 0;\n        let maxRating = this.props.maxRating ? this.props.maxRating : 5;\n        if (maxRating < rating) {\n            maxRating = rating;\n        }\n\n        let size = this.props.size ? this.props.size : 24;\n        \n        for(let index = 0; index < rating; index++) {\n            const lightedStar = <StarIcon key={index} color=\"#FBE6A2\" size={size}/>\n            stars.push(lightedStar);\n        }\n\n        for(let index = rating; index < maxRating; index++) {\n            const unlightedStar = <StarEmptyIcon key={index} color=\"#C7CED4\" size={size}/>\n            stars.push(unlightedStar);\n        }\n\n        return <Pane display=\"inline-fex\" alignItems=\"center\">\n            {stars}\n        </Pane>\n    }\n}","import { Button, Heading, InfoSignIcon, Pane, Table, DownloadIcon, Tablist, Tab, TagInput } from 'evergreen-ui';\nimport { Fragment, Component } from 'react';\n\nimport RatingPane from './RatingPane';\n\nimport { DavConfigurationContext } from '../AppSettings';\n\nexport default class FileDetailsPane extends Component {\n    static contextType = DavConfigurationContext;\n\n    constructor() {\n        super();\n\n        this.state = {\n            imageData: [],\n            selectedIndex: 0,\n            tabs: ['Information', 'Image', 'Metadata']\n        }\n    }\n\n    componentDidMount = () => {\n        this.loadImageInformation();\n        this.loadMetaDataInformation();\n    }\n\n    getDownloadLink = () => {        \n        if (!this.context.connectionValid) {\n            // console.log('davClient is undefined in context. Cannot download file.');\n            return;\n        }\n\n        return this.context.davClient.getFileDownloadLink(this.props.fileItem.filename);\n    }\n\n    loadImageInformation = () => {\n        const metaUrl = this.context.getExifApiUrl();\n\n        const exifRequest = {\n            \"filename\": this.props.fileItem.filename\n        }\n\n        fetch(metaUrl, {\n            method: 'POST',\n            body: JSON.stringify(exifRequest),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(res => res.json())\n            .then(res => {\n                // console.log('Received exif for this file: ' + JSON.stringify(res));\n                this.setState({\n                    imageData: res\n                });\n            }).catch(err => {\n                console.log('Error while reading exif data: ' + err);\n            });\n    }\n\n\n    loadMetaDataInformation = () => {\n        const metaUrl = this.context.getMetadataApiUrl();\n\n        const metadataRequest = {\n            \"filename\": this.props.fileItem.filename,\n            \"raw\": false\n        }\n\n        fetch(metaUrl, {\n            method: 'POST',\n            body: JSON.stringify(metadataRequest),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(res => res.json())\n            .then(res => {\n                /*\n                console.log('Received metadata for this file: ' + JSON.stringify(res));\n                console.log('Tags are: ' + res.tags);\n                */\n\n                this.setState({\n                    metadata: res\n                });\n            }).catch(err => {\n                console.log('Error while reading metadata: ' + err);\n                this.setState({\n                    metadata: { tags: '' }\n                });\n            });\n    }\n\n    renderFileItemSize = () => {\n        let unite = 'bytes';\n        let taille = this.props.fileItem.size;\n        if (taille > 1024) {\n            taille = (taille / 1024).toFixed(2);\n            unite = 'KB';\n        }\n        if (taille > 1024) {\n            taille = (taille / 1024).toFixed(2);\n            unite = 'MB';\n        }\n        if (taille > 1024) {\n            taille = (taille / 1024).toFixed(2);\n            unite = 'GB';\n        }\n\n        return <span>{taille}&nbsp;{unite}</span>\n    }\n\n    renderImageTabs = () => {\n        const isImage = this.context.isImageFile(this.props.fileItem.basename);\n        return <Pane padding={15}>\n            <Tablist marginBottom={16} flexBasis={240} marginRight={24}>\n                {this.state.tabs.filter((tab, index) => {\n                    return index > 0 ? isImage : true;\n                })\n                    .map((tab, index) => (\n                        <Tab\n                            key={tab}\n                            id={tab}\n                            onSelect={() => this.setState({ selectedIndex: index })}\n                            isSelected={index === this.state.selectedIndex}\n                            aria-controls={`panel-${tab}`}\n                        >\n                            {tab}\n                        </Tab>\n                    ))}\n            </Tablist>\n            {this.state.tabs.map((tab, index) => {\n\n                let panelTab;\n                switch (index) {\n                    case 0:\n                        panelTab = this.renderFileDetails();\n                        break;\n\n                    case 1:\n                        panelTab = this.renderImageDetails();\n                        break;\n\n                    case 2:\n                        panelTab = this.renderMetadataDetails();\n                        break;\n\n                    default:\n                        panelTab = <div />\n                }\n\n                return <Pane\n                    key={tab}\n                    id={`panel-${tab}`}\n                    role=\"tabpanel\"\n                    aria-labelledby={tab}\n                    aria-hidden={index !== this.state.selectedIndex}\n                    display={index === this.state.selectedIndex ? 'block' : 'none'}\n                >\n                    {panelTab}\n                </Pane>\n            })}\n\n        </Pane>\n    }\n\n    renderFileDetails = () => {\n        return <Table marginTop={15}>\n            <Table.Head>\n                <Table.TextHeaderCell>\n                    <Pane display=\"inline-flex\" alignItems=\"center\">\n                        <InfoSignIcon />&nbsp;File information\n                    </Pane>\n                </Table.TextHeaderCell>\n                <Table.TextHeaderCell>\n                    &nbsp;\n                </Table.TextHeaderCell>\n            </Table.Head>\n            <Table.Body>\n                <Table.Row key=\"row_path\">\n                    <Table.TextCell>Path:</Table.TextCell>\n                    <Table.TextCell>{this.props.fileItem.filename}</Table.TextCell>\n                </Table.Row>\n                <Table.Row>\n                    <Table.TextCell key=\"row_modif\">Last modif:</Table.TextCell>\n                    <Table.TextCell>{this.props.fileItem.lastmod}</Table.TextCell>\n                </Table.Row>\n                <Table.Row>\n                    <Table.TextCell key=\"row_size\">Size:</Table.TextCell>\n                    <Table.TextCell>{this.renderFileItemSize()}</Table.TextCell>\n                </Table.Row>\n            </Table.Body>\n        </Table>\n    }\n\n    renderImageDetails = () => {\n        if (typeof this.state.imageData.image === 'undefined') {\n            return <Fragment>&nbsp;</Fragment>\n        }\n\n        let rows = Object.keys(this.state.imageData.image).map((key, index) => {\n            return <Table.Row key={index}>\n                <Table.TextCell>{key}</Table.TextCell>\n                <Table.TextCell>{this.state.imageData.image[key]}</Table.TextCell>\n            </Table.Row>\n        });\n\n        return <Table marginTop={15}>\n            <Table.Head>\n                <Table.TextHeaderCell>\n                    <Pane display=\"inline-flex\" alignItems=\"center\">\n                        <InfoSignIcon />&nbsp;Image information\n                    </Pane>\n                </Table.TextHeaderCell>\n                <Table.TextHeaderCell>\n                    &nbsp;\n                </Table.TextHeaderCell>\n            </Table.Head>\n            <Table.Body>\n                {rows}\n            </Table.Body>\n        </Table>\n    }\n\n    renderMetadataDetails = () => {\n        if (typeof this.state.metadata === 'undefined') {\n            return <Fragment>&nbsp;</Fragment>\n        }\n\n        let rows = Object.keys(this.state.metadata).map((key, index) => {\n            return <Table.Row key={`meta-${index}`}>\n                <Table.TextCell>{key}</Table.TextCell>\n                <Table.TextCell>{this.state.metadata[key]}</Table.TextCell>\n            </Table.Row>\n        });\n\n        return <Table marginTop={15}>\n            <Table.Head>\n                <Table.TextHeaderCell>\n                    <Pane display=\"inline-flex\" alignItems=\"center\">\n                        <InfoSignIcon />&nbsp;Metadata information\n                    </Pane>\n                </Table.TextHeaderCell>\n                <Table.TextHeaderCell>\n                    &nbsp;\n                </Table.TextHeaderCell>\n            </Table.Head>\n            <Table.Body>\n                {rows}\n            </Table.Body>\n        </Table>\n    }\n\n    renderTags = () => {\n        const isImage = this.context.isImageFile(this.props.fileItem.basename);\n        if (!isImage) {\n            return <div>&nbsp;</div>\n        }\n\n        if (!this.state.metadata) {\n            return <div>Tags loading...</div>\n        }\n\n        let tags = [];\n        if (typeof this.state.metadata.tags !== 'undefined') {\n            if ('' !== this.state.metadata.tags) {\n                tags = this.state.metadata.tags.split(',');\n            } \n        }\n\n        const placeholder = tags.length === 0 ? 'No tags for this image' : '';\n        return <TagInput\n            inputProps={{ placeholder: placeholder }}\n            values={tags}\n            flexGrow={2}\n            margin={15}\n            disabled={true}\n        />\n    }\n\n    getRating = () => {\n        const isImage = this.context.isImageFile(this.props.fileItem.basename);\n        if (!isImage) {\n            return 0;\n        }\n\n        if (!this.state.metadata) {\n            return 0;\n        }\n\n        if (!this.state.metadata['xmp:Rating']) {\n            return 0;\n        }\n        \n        return Number.parseInt(this.state.metadata['xmp:Rating']);\n    }\n\n    render = () => {\n        // console.log('Render file details: \\n' + JSON.stringify(this.props.fileItem));\n\n        const downloadIcon = <DownloadIcon size={24} />\n        const infoIcon = <InfoSignIcon size={24} />\n        \n        return <Pane zIndex={1} flexShrink={0} elevation={0} backgroundColor=\"white\">\n            <Pane padding={16} borderBottom=\"muted\">\n                <Heading size={600}>{this.props.fileItem.basename}</Heading>\n            </Pane>\n            <Pane display=\"inline-flex\" alignItems=\"center\">\n                <Button appearance=\"primary\" intent=\"success\" is=\"a\" margin={20} iconBefore={downloadIcon} href={this.getDownloadLink()} target=\"_blank\" disabled={!this.context.connectionValid}>Download</Button>                \n                <RatingPane rating={this.getRating()} maxRating={5} marginRight={10} marginLeft={10}/>\n            </Pane>\n            <Pane display=\"flex\" gridTemplateColumns=\"auto\">\n                {this.renderTags()}\n            </Pane>\n            <Pane>\n                {this.renderImageTabs()}\n            </Pane>\n        </Pane>\n    }\n}","import { Component } from 'react';\n\nimport { Button, InfoSignIcon, LogInIcon } from 'evergreen-ui';\n\nimport { DavConfigurationContext } from '../../AppSettings';\n\nimport './WelcomePage.css';\n\nexport default class WelcomePage extends Component {\n    static contextType = DavConfigurationContext;\n    constructor() {\n        super();\n    }\n\n    showLoginDialog = () => {\n        this.context.setShowConnectionDialog(true);\n    }\n\n    render = () => {\n        return <header id=\"header\">\n\t\t\t\t<div className=\"content\">\n\t\t\t\t\t<h1><a href=\"#\">Nico's Drive</a></h1>\n\t\t\t\t\t<p>Personal storage solution<br />\n\t\t\t\t\tKeep your private memories ... <strong>private!</strong></p>\n\t\t\t\t\t<ul className=\"actions\">\n                        <li><Button is=\"div\" onClick={() => alert('Coming soon...')} appearance=\"default\" height={60} padding={28} iconBefore={InfoSignIcon} fontSize={22}>Learn more</Button></li>\n                        <li><Button is=\"div\" onClick={() => this.showLoginDialog()} appearance=\"primary\" intent=\"success\" height={60} padding={28} iconBefore={LogInIcon} fontSize={22}>Login</Button></li>\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"image phone\"><div className=\"inner\"><img src=\"images/screen.jpg\" alt=\"\" /></div></div>\n\t\t\t</header>\n    }\n}","\nimport { Pane, Link, ChevronRightIcon, HomeIcon, SideSheet, Avatar, Badge, Popover, Menu, InfoSignIcon, Position, LogOutIcon } from 'evergreen-ui';\nimport { Component, Fragment } from 'react';\n\nimport { DavConfigurationContext } from '../AppSettings';\n\nimport Folder from './Folder';\nimport Image from './Image';\nimport RegularFile from './RegularFile';\nimport FileDetailsPane from './FileDetailsPane';\n\nimport WelcomePage from './welcome-page/WelcomePage';\n\nexport default class DavExplorerPane extends Component {\n    static contextType = DavConfigurationContext;\n\n    constructor() {\n        super();\n\n        this.state = {\n            currentDirectory: null,\n            directories: [],\n            files: [],\n            showDetails: false\n        }\n    }\n\n    componentDidUpdate = () => {\n        if (this.context.connectionValid && this.context.davClient !== null && this.state.currentDirectory === null) {\n            this.setState({\n                currentDirectory: '/'\n            }, () => {\n                this.getDirectoryContents();\n            });\n        }\n    }\n    \n    getDirectoryContents = async () => {\n\n        let dirs = [];\n        let files = [];\n\n        if (this.context.connectionValid) {\n            const directoryItems = await this.context.davClient.getDirectoryContents(this.state.currentDirectory);\n            dirs = directoryItems.filter(item => { return item.type === 'directory' });\n            files = directoryItems.filter(item => { return item.type === 'file' });\n        }\n\n        this.setState({\n            directories: dirs,\n            files: files\n        }, () => {\n            console.log(`${dirs.length} directories and ${files.length} files from ${this.state.currentDirectory}`);\n        });\n    }\n\n    navigate = (folderName) => {\n        const separator = this.state.currentDirectory.endsWith('/') || folderName.startsWith('/') ? '' : '/';\n        let newDir = this.state.currentDirectory + separator + folderName;\n        this.setState((prev) => {\n            return {\n                currentDirectory: newDir,\n                files: [],\n                directories: []\n            }\n        }, () => {\n            console.log(`Navigated to ${newDir}, now get directory contents...`);\n            this.getDirectoryContents();\n        });\n    }\n\n    navigateAbsolute = (absolutePath) => {\n        this.setState((prev) => {\n            return {\n                currentDirectory: absolutePath,\n                files: [],\n                directories: []\n            }\n        }, () => {\n            console.log(`Absolute navigated to ${absolutePath}, now get directory contents...`);\n            this.getDirectoryContents();\n        });\n    }\n\n    toggleFileDetails = (fileItem) => {\n        let modified = fileItem;\n        if (modified.filename.startsWith(this.context.homeDirectory)) {\n            modified.filename = modified.filename.substring(this.context.homeDirectory.length);\n        }\n\n        this.setState({\n            showDetails: true,\n            detailedFileItem: modified\n        });\n    }\n\n    disconnect = () => {\n        this.context.disconnect();\n    }\n\n    renderFolders = () => {\n        let folders = this.state.directories.map((directory, index) => {\n            return <Folder fileItem={directory} navigate={this.navigate} showDetails={this.toggleFileDetails} key={'dir_' + index} />\n        });\n        return folders;\n    }\n\n    renderFiles = () => {\n        let images = this.state.files.map((file, index) => {\n            if (this.context.isImageFile(file.basename)) {\n                return <Image fileItem={file} navigate={this.navigate} showDetails={this.toggleFileDetails} key={'file_' + index} />\n            } else {\n                return <RegularFile fileItem={file} navigate={this.navigate} showDetails={this.toggleFileDetails} key={'file_' + index} />\n            }\n        });\n        return images;\n    }\n\n    renderBreadCrumb = () => {\n        let path = this.state.currentDirectory;\n\n        const chevronIcon = <ChevronRightIcon size={24} style={{ marginLeft: '5px', marginRight: '5px' }} />\n        const homeIcon = <HomeIcon size={24} style={{ marginLeft: '5px', marginRight: '5px' }} />\n\n        let currentDirs = path === '/' ? [''] : path.split('/');\n        let navDirs = [];\n        let breadCrumb = currentDirs.map((dir, index) => {\n            const icon = index === 0 ? homeIcon : chevronIcon;\n            navDirs.push(dir);\n            const fullPath = navDirs.join('/');\n            return <Link href=\"#\" style={{ display: 'flex', alignItems: 'center' }} key={index + 1} onClick={() => {                \n                this.navigateAbsolute(dir === '' ? '/' : fullPath);\n            }}>{icon}{dir}</Link>\n        });\n\n        return breadCrumb;\n    }\n\n    renderAvatarMenu = () => {\n        return <Popover\n        position={Position.BOTTOM_LEFT}\n        content={\n          <Menu>\n            <Menu.Group>\n              <Menu.Item icon={InfoSignIcon} intent=\"success\"><Badge color=\"green\">{this.context.username}</Badge></Menu.Item>              \n              <Menu.Item>{this.context.getClientUrl()}</Menu.Item>\n            </Menu.Group>\n            <Menu.Divider />\n            <Menu.Group>\n              <Menu.Item icon={LogOutIcon} intent=\"danger\" onClick={() => {this.disconnect()}}>\n                Disconnect\n              </Menu.Item>\n            </Menu.Group>\n          </Menu>\n        }\n      >\n        <Avatar name={this.context.username} size={40} marginLeft={15} marginRight={15} style={{cursor: 'pointer'}}/>\n      </Popover>\n    }\n\n    renderRootPane = () => {\n        const breadCrumb = this.renderBreadCrumb();\n\n        return <Fragment>\n            <Pane zIndex={1} flexShrink={0} elevation={0} backgroundColor=\"white\" display=\"grid\" gridTemplateColumns=\"auto 1fr\">\n                <Pane display=\"flex\" padding={8} background=\"blueTint\">\n                    {breadCrumb}\n                </Pane>\n                <Pane justifySelf=\"end\" display=\"inline-flex\" alignItems=\"center\">\n                   {this.renderAvatarMenu()}\n                </Pane>                \n            </Pane>\n            <Pane display=\"flex\" flexWrap=\"wrap\" justifyContent=\"space-evenly\" background=\"overlay\">\n                {this.renderFolders()}\n                {this.renderFiles()}\n            </Pane>\n        </Fragment>\n    }\n\n    render = () => {\n\n        if (!this.context.connectionValid) {\n            return <WelcomePage />\n        }\n\n        if (!this.state.currentDirectory) {\n            return <h3>Loading...</h3>\n        }\n\n        return <Pane>\n            {this.renderRootPane()}\n\n            <SideSheet\n                isShown={this.state.showDetails}\n                onCloseComplete={() => this.setState({ showDetails: false })}\n            >\n                <FileDetailsPane fileItem={this.state.detailedFileItem} davClient={this.state.davClient} />\n            </SideSheet>\n        </Pane>\n    }\n}","import { Component } from 'react';\nimport { Dialog, Pane, TextInputField, Text, Paragraph, Button } from 'evergreen-ui';\nimport { DavConfigurationContext } from '../AppSettings';\n\nimport { createClient, AuthType } from \"webdav\";\n\nexport default class LoginDialog extends Component {\n    static contextType = DavConfigurationContext;\n    \n    constructor() {\n        super();\n        this.state = {\n            isLoading: false,\n            username: '',\n            password: '',\n            url: '',\n            errorMessage: ''\n        }\n    }\n\n    testConnection = async () => {\n        try {\n\n            const clientOptions = {\n                authType: AuthType.Basic,\n                username: this.state.username,\n                password: this.state.password\n            }\n\n            const client = createClient(this.state.url, clientOptions);\n\n            const directoryItems = await client.getDirectoryContents('./');\n\n            this.context.setDavClient(client, this.state.url);\n\n            // reset form in order not to have credentials after clicking logout\n            this.setState({\n                url: '',\n                username: '',\n                password: '',\n                errorMessage: ''\n            });\n\n        } catch (error) {\n            console.error('Could not connect to webdav: ' + JSON.stringify(error));\n            this.context.setDavClient(null);\n            this.context.setConnectionValid(false);\n            this.setState({\n                errorMessage: JSON.stringify(error)\n            });\n        } finally {\n            this.setState({\n                isLoading: false\n            });\n        }\n    }\n\n    componentDidMount = () => {\n        this.setState({\n            username: this.context.username,\n            password: this.context.password,\n            url: this.context.getClientUrl() + this.context.homeDirectory,\n            errorMessage: ''\n        });\n    }\n\n    onConfirm = () => {\n        this.setState({ \n            isLoading: true            \n        }, () => this.testConnection());\n    }\n\n    onCloseComplete = () => {\n        this.context.setShowConnectionDialog(false);\n        this.setState({ isLoading: false, errorMessage: '' });\n    }\n\n    renderDialog = () => {\n        return <Dialog\n            isShown={this.context.showConnectionDialog}\n            title=\"WebDAV Connection setup...\"\n            onCloseComplete={() => this.onCloseComplete()}\n            isConfirmLoading={this.state.isLoading}\n            onConfirm={(close) => this.onConfirm(close)}           \n            hasFooter={false}\n        >\n            <Pane display=\"grid\" gridTemplateColumns=\"auto\">\n                    <TextInputField id=\"txt-login\" \n                                    value={this.state.username} \n                                    onChange={e => this.setState({ username: e.target.value })}\n                                    placeholder=\"Login name...\" \n                                    label=\"Login:\"/>\n\n                    <TextInputField id=\"txt-password\" \n                                    type=\"password\" \n                                    value={this.state.password} \n                                    onChange={e => this.setState({ password: e.target.value })}\n                                    placeholder=\"Password...\" \n                                    label=\"Password:\"/>\n\n                    <TextInputField id=\"txt-url\" \n                                    value={this.state.url} \n                                    onChange={e => this.setState({ url: e.target.value })}\n                                    placeholder=\"WebDAV URL...\"\n                                    label=\"WebDAV base URL:\"/>\n                    <Pane>\n                        <Paragraph>{this.state.errorMessage}</Paragraph>\n                        <Button is=\"div\" marginTop={16} onClick={() => this.onConfirm()} disabled={this.state.isLoading} appearance=\"primary\" intent=\"success\">\n                        {this.state.isLoading ? 'Please wait...' : 'Connect'}\n                        </Button>\n                    </Pane>\n            </Pane>          \n        </Dialog>\n    }\n\n    render = () => {\n        return this.renderDialog();\n    }\n}","\nimport { React, Component } from 'react';\nimport { Pane } from 'evergreen-ui';\n\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {DavConfigurationProvider} from './AppSettings';\n\nimport DavExplorerPane from './components/DavExplorerPane';\nimport LoginDialog from './components/LoginDialog';\n\nclass App extends Component {\n\n  render = () => {\n    return (      \n        <div className=\"App\">\n          <Pane clearfix width=\"100%\">\n              <DavConfigurationProvider>\n                <LoginDialog />\n                <DavExplorerPane />\n              </DavConfigurationProvider>\n          </Pane>\n        </div>      \n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}